In [1]:

    
    
    # This Python 3 environment comes with many helpful analytics libraries installed
    # It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
    # For example, here's several helpful packages to load in 
    
    import numpy as np # linear algebra
    import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
    import seaborn as sns  # seaborn for visualizationn
    import matplotlib.pyplot as plt  # for visualization
    from sklearn.linear_model import LinearRegression  #Import Linear regression model
    from sklearn.model_selection import train_test_split  #To split the dataset into Train and test randomly
    from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_squared_log_error, r2_score
    
    # Input data files are available in the "../input/" directory.
    # For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory
    
    import os
    print(os.listdir("../input"))
    
    # Any results you write to the current directory are saved as output.
    #Read data from CSV
    ins_df = pd.read_csv("../input/insurance.csv")
    ins_df1 = ins_df.copy() #Take a copy of the original dataframe and play in the copied version.
    ins_df.head()
    
    
    # Independent variable: age, sex, bmi, children, smoker and region
    # Dependent variable / Target variable: expenses
    
    
    
    ['insurance.csv']
    

Out[1]:

| age | sex | bmi | children | smoker | region | expenses  
---|---|---|---|---|---|---|---  
0 | 19 | female | 27.9 | 0 | yes | southwest | 16884.92  
1 | 18 | male | 33.8 | 1 | no | southeast | 1725.55  
2 | 28 | male | 33.0 | 3 | no | southeast | 4449.46  
3 | 33 | male | 22.7 | 0 | no | northwest | 21984.47  
4 | 32 | male | 28.9 | 0 | no | northwest | 3866.86  
  
In [2]:

    
    
    # Know about the columns, data types, total rows, number of not null values in each column
    ins_df1.info()
    
    
    
    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 1338 entries, 0 to 1337
    Data columns (total 7 columns):
    age         1338 non-null int64
    sex         1338 non-null object
    bmi         1338 non-null float64
    children    1338 non-null int64
    smoker      1338 non-null object
    region      1338 non-null object
    expenses    1338 non-null float64
    dtypes: float64(2), int64(2), object(3)
    memory usage: 73.2+ KB
    

In [3]:

    
    
    #Check the count of duplicate records and remove duplicate records
    ins_df1.duplicated().sum()
    ins_df1.drop_duplicates(inplace = True)
    

In [4]:

    
    
    ins_df1.duplicated().sum()
    

Out[4]:

    
    
    0

In [5]:

    
    
    #Convert the categorical data "smoker" to numeric value using label encoder
    from sklearn.preprocessing import LabelEncoder
    labelencoder = LabelEncoder()
    ins_df1.iloc[:,4] = labelencoder.fit_transform(ins_df1.iloc[:,4])
    #ins_df1['smoker'] = ins_df1['smoker'].replace({"yes":1,"no":0})
    #ins_df1['sex'] = ins_df1['sex'].replace({"male":1,"female":0})
    ins_df1.head()
    

Out[5]:

| age | sex | bmi | children | smoker | region | expenses  
---|---|---|---|---|---|---|---  
0 | 19 | female | 27.9 | 0 | 1 | southwest | 16884.92  
1 | 18 | male | 33.8 | 1 | 0 | southeast | 1725.55  
2 | 28 | male | 33.0 | 3 | 0 | southeast | 4449.46  
3 | 33 | male | 22.7 | 0 | 0 | northwest | 21984.47  
4 | 32 | male | 28.9 | 0 | 0 | northwest | 3866.86  
  
In [6]:

    
    
    '''Describe the dataset by statistical measure for each column.Comparing mean and median for outliers. 
    Age - Slight variation between mean and median.
    bmi - Slight variation between mean and median.
    expenses - High variation between mean and median. '''
    ins_df1.describe()
    

Out[6]:

| age | bmi | children | smoker | expenses  
---|---|---|---|---|---  
count | 1337.000000 | 1337.000000 | 1337.000000 | 1337.000000 | 1337.000000  
mean | 39.222139 | 30.665520 | 1.095737 | 0.204936 | 13279.121638  
std | 14.044333 | 6.100664 | 1.205571 | 0.403806 | 12110.359657  
min | 18.000000 | 16.000000 | 0.000000 | 0.000000 | 1121.870000  
25% | 27.000000 | 26.300000 | 0.000000 | 0.000000 | 4746.340000  
50% | 39.000000 | 30.400000 | 1.000000 | 0.000000 | 9386.160000  
75% | 51.000000 | 34.700000 | 2.000000 | 0.000000 | 16657.720000  
max | 64.000000 | 53.100000 | 5.000000 | 1.000000 | 63770.430000  
  
In [7]:

    
    
    # No outlier in age column.
    ax = sns.boxplot(ins_df1['age'])
    ax.set_title('Dispersion of Age')
    plt.show(ax)
    

![](__results___files/__results___6_0.png)

In [8]:

    
    
    '''To ensure there are no outliers for bmi by box plot. But, there are few bmi values above 47 
    which can be considered as outliers'''
    ax = sns.boxplot(ins_df1['bmi'])
    ax.set_title("Dispersion of bmi")
    plt.show(ax)
    

![](__results___files/__results___7_0.png)

In [9]:

    
    
    ax = sns.boxplot(ins_df1['expenses'])
    ax.set_title("Dispersion of Expenses")
    plt.show(ax)
    

![](__results___files/__results___8_0.png)

In [10]:

    
    
    '''The scatter plot is not representing, when Age is increasing bmi is also increasing. 
    Few data points of bmi is high at younger age compare to other data points. Those data points 
    can be consider as outliers'''
    ax = sns.scatterplot(x = 'age', y = 'bmi', data = ins_df1)
    ax.set_title('Age vs BMI')
    plt.show(ax)
    

![](__results___files/__results___9_0.png)

In [11]:

    
    
    # To understand the relationship between the Age and expenses with respect to bmi.
    #----------------------------------------------------------------------------------
    #Scatter plot clearly states that, when age is increasing expenses also increasing but has three different
    #groups of expenses irrespective of bmi. Hence, BMI is not influencing the expenses with Age. 
    plt.figure(figsize=(15,10))
    ax = sns.scatterplot(x='age',y='expenses',hue = 'bmi',size = 'bmi', data=ins_df1)
    ax = ax.set_title("Age vs Expenses by BMI")
    plt.xlabel("Age")
    plt.ylabel("Expenses")
    plt.show(ax)
    

![](__results___files/__results___10_0.png)

In [12]:

    
    
    #Scatter plot clearly states that, Age with sex are not influencing the expenses.
    plt.figure(figsize=(10,7))
    ax = sns.scatterplot(x='age',y='expenses', hue='sex',style = 'sex',data=ins_df1)
    ax.set_title("Age vs Expenses by Sex")
    plt.show(ax)
    

![](__results___files/__results___11_0.png)

In [13]:

    
    
    #Both Age and smoker are highly influncing the expenses. Smoker yes
    plt.figure(figsize=(10,7))
    ax = sns.scatterplot(x='age',y='expenses', hue=ins_df1['smoker'],style = ins_df1['smoker'],size = ins_df1['smoker'], data=ins_df1)
    ax.set_title("Age vs Expenses by Smoker")
    plt.xlabel("Smoker (Yes - 1, No - 0)")
    plt.ylabel("Expenses")
    plt.show(ax)
    

![](__results___files/__results___12_0.png)

In [14]:

    
    
    #To understand the relationship of each independent variable with dependent variable.
    #Age has positive side (30%) relationship against expenses
    #bmi has positive side (20%) relationship against expenses
    #Children has almost no relationship against expenses
    #Smoker has strong positive relationship (78%) against expenses
    #sex has no relationship against expenses
    ins_df1.corr()
    

Out[14]:

| age | bmi | children | smoker | expenses  
---|---|---|---|---|---  
age | 1.000000 | 0.109414 | 0.041536 | -0.025587 | 0.298308  
bmi | 0.109414 | 1.000000 | 0.012641 | 0.003964 | 0.198637  
children | 0.041536 | 0.012641 | 1.000000 | 0.007331 | 0.067389  
smoker | -0.025587 | 0.003964 | 0.007331 | 1.000000 | 0.787234  
expenses | 0.298308 | 0.198637 | 0.067389 | 0.787234 | 1.000000  
  
In [15]:

    
    
    #Swarm plot shows how smoker feature is influencing the expeneses compare with smoker and non-smoker
    ax = sns.swarmplot(x='smoker',y='expenses',data=ins_df1)
    ax.set_title("Smoker vs Expenses")
    plt.xlabel("Smoker (Yes - 1, No - 0)")
    plt.ylabel("Expenses")
    plt.show(ax)
    

![](__results___files/__results___14_0.png)

In [16]:

    
    
    #These three features have relationship with expenses.
    x = ins_df1[['age','bmi','smoker']]
    y = ins_df1['expenses']
    #train_test_split() to split the dataset into train and test set at random.
    #test size data set should be 30% data
    X_train,X_test,Y_train, Y_test = train_test_split(x,y,test_size=0.3,random_state=42)
    #Creating an linear regression model object
    model = LinearRegression()
    #Training the model using training data set
    model.fit(X_train, Y_train) 
    #X_train_predict = model.predict(X_train)
    #X_test_predict = model.predict(X_test)
    

Out[16]:

    
    
    LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,
             normalize=False)

In [17]:

    
    
    print("Intercept value:", model.intercept_)
    print("Coefficient values:", model.coef_)
    
    
    
    Intercept value: -11251.993494851236
    Coefficient values: [  255.83642151   312.02217221 22904.23974509]
    

In [18]:

    
    
    coef_df = pd.DataFrame(list(zip(X_train.columns,model.coef_)), columns = ['Features','Predicted Coeff'])
    coef_df
    #print("Features train data:\n",X_train.smoker)
    

Out[18]:

| Features | Predicted Coeff  
---|---|---  
0 | age | 255.836422  
1 | bmi | 312.022172  
2 | smoker | 22904.239745  
  
In [19]:

    
    
    #Predicting the Y value from the train set and test set.
    Y_train_predict = model.predict(X_train)
    Y_train_predict[0:5]
    
    Y_test_predict = model.predict(X_test)
                         
                 
    

In [20]:

    
    
    #Plot to see the actual expenses and predicted expenses from Train data set
    ax = sns.scatterplot(Y_train,Y_train_predict)
    ax.set_title("Actual Expenses vs Predicted Expenses")
    plt.xlabel("Actual Expenses")
    plt.ylabel("Predicted Expenses")
    plt.show(ax)
    

![](__results___files/__results___19_0.png)

In [21]:

    
    
    #Train and predict the Y_train for the feature 'smoker'
    smoker_model = LinearRegression()
    smoker_model.fit(X_train[['smoker']], Y_train)
    print("intercept:",smoker_model.intercept_, "coeff:", smoker_model.coef_)
    
    #print("Train - Mean squared error:", np.mean((Y_train - model.predict(X_train)) ** 2))
    smoker_df = pd.DataFrame(list(zip(Y_train, smoker_model.predict(X_train[['smoker']]))), columns = ['Actual Expenses','Predicted Expenses'])
    smoker_df.head()
    #X_train['smoker'].shape
    
    
    
    intercept: 8407.907476383265 coeff: [22300.99566795]
    

Out[21]:

| Actual Expenses | Predicted Expenses  
---|---|---  
0 | 27322.73 | 8407.907476  
1 | 42303.69 | 30708.903144  
2 | 42112.24 | 30708.903144  
3 | 41676.08 | 30708.903144  
4 | 44202.65 | 30708.903144  
  
In [22]:

    
    
    #MSE for Train data set
    print("MSE:",np.sqrt(mean_squared_error(Y_train, Y_train_predict)))
    print("MSE only for Smoker:", np.sqrt(mean_squared_error(Y_train,smoker_model.predict(X_train[['smoker']]))))
    
    
    
    MSE: 6027.100460864909
    MSE only for Smoker: 7349.221074596347
    

In [23]:

    
    
    #R-Squared value for Train data set
    print("R-squared value:",round(r2_score(Y_train, Y_train_predict),3))
    print("R-squared value only for smoker:", round(r2_score(Y_train,smoker_model.predict(X_train[['smoker']]))),3)
    
    
    
    R-squared value: 0.732
    R-squared value only for smoker: 1.0 3
    

In [24]:

    
    
    #Mean absolute error for Train data set
    print("Mean absolute error:",mean_absolute_error(Y_train, Y_train_predict))
    print("Mean absolute Error only for Smoker:", mean_absolute_error(Y_train,smoker_model.predict(X_train[['smoker']])))
    
    
    
    Mean absolute error: 4206.246166025211
    Mean absolute Error only for Smoker: 5621.553287565009
    

In [25]:

    
    
    print("MSE for Test data set")
    print("MSE:",np.sqrt(mean_squared_error(Y_test, Y_test_predict)))
    print("MSE only for Smoker:", np.sqrt(mean_squared_error(Y_test,smoker_model.predict(X_test[['smoker']]))))
    
    
    
    MSE for Test data set
    MSE: 6271.076600820795
    MSE only for Smoker: 7807.04579665806
    

