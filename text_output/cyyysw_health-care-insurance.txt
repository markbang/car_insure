In [1]:

    
    
    # This Python 3 environment comes with many helpful analytics libraries installed
    # It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
    # For example, here's several helpful packages to load in 
    
    import numpy as np # linear algebra
    import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
    
    # Input data files are available in the "../input/" directory.
    # For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory
    
    import os
    print(os.listdir("../input"))
    
    
    # Any results you write to the current directory are saved as output.
    
    
    
    ['database.sqlite', 'hashes.txt', 'PlanAttributes.csv', 'Network.csv', 'raw', 'Crosswalk2016.csv', 'BenefitsCostSharing.csv', 'Crosswalk2015.csv', 'BusinessRules.csv', 'Rate.csv', 'ServiceArea.csv']
    

In [2]:

    
    
    import matplotlib.pyplot as plt
    import seaborn as sns
    import sqlite3
    

In [3]:

    
    
    database = ("../input/database.sqlite")
    conn = sqlite3.connect(database)
    

In [4]:

    
    
    tables = pd.read_sql("""SELECT *
                            FROM sqlite_master
                            WHERE type='table';""", conn)
    tables
    

Out[4]:

| type | name | tbl_name | rootpage | sql  
---|---|---|---|---|---  
0 | table | Crosswalk2015 | Crosswalk2015 | 2 | CREATE TABLE Crosswalk2015 (\n State TEXT,\\...  
1 | table | Crosswalk2016 | Crosswalk2016 | 13477 | CREATE TABLE Crosswalk2016 (\n State TEXT,\\...  
2 | table | PlanAttributes | PlanAttributes | 28666 | CREATE TABLE PlanAttributes (\n AVCalculato...  
3 | table | Network | Network | 132401 | CREATE TABLE Network (\n BusinessYear INTEG...  
4 | table | BenefitsCostSharing | BenefitsCostSharing | 133024 | CREATE TABLE BenefitsCostSharing (\n Benefi...  
5 | table | ServiceArea | ServiceArea | 1654869 | CREATE TABLE ServiceArea (\n BusinessYear I...  
6 | table | BusinessRules | BusinessRules | 1659588 | CREATE TABLE BusinessRules (\n BusinessYear...  
7 | table | Rate | Rate | 1670287 | CREATE TABLE Rate (\n BusinessYear INTEGER,...  
  
Total 8 tables. First check how many years of the information.

In [5]:

    
    
    year=pd.read_sql("""SELECT DISTINCT BusinessYear FROM Rate;""", conn)
    year
    

Out[5]:

| BusinessYear  
---|---  
0 | 2014  
1 | 2015  
2 | 2016  
  
Three years of information available. The following part is about the sources
that provide service across the country, from SourceArea table.

In [6]:

    
    
    table_servicearea = pd.read_sql("""SELECT *
                            FROM servicearea
                            LIMIT 100;""", conn)
    table_servicearea
    

Out[6]:

| BusinessYear | StateCode | IssuerId | SourceName | VersionNum | ImportDate | IssuerId2 | StateCode2 | ServiceAreaId | ServiceAreaName | CoverEntireState | County | PartialCounty | ZipCodes | PartialCountyJustification | RowNumber | MarketCoverage | DentalOnlyPlan  
---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---  
0 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS001 | Geisinger Health Plan | No | 42103 | No |  |  | 42 |  |   
1 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS001 | Geisinger Health Plan | No | 42105 | No |  |  | 43 |  |   
2 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS001 | Geisinger Health Plan | No | 42107 | No |  |  | 44 |  |   
3 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS001 | Geisinger Health Plan | No | 42109 | No |  |  | 45 |  |   
4 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS001 | Geisinger Health Plan | No | 42111 | No |  |  | 46 |  |   
5 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS001 | Geisinger Health Plan | No | 42113 | No |  |  | 47 |  |   
6 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS001 | Geisinger Health Plan | No | 42115 | No |  |  | 48 |  |   
7 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS001 | Geisinger Health Plan | No | 42117 | No |  |  | 49 |  |   
8 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS001 | Geisinger Health Plan | No | 42119 | No |  |  | 50 |  |   
9 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS001 | Geisinger Health Plan | No | 42127 | No |  |  | 51 |  |   
10 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS001 | Geisinger Health Plan | No | 42131 | No |  |  | 52 |  |   
11 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS001 | Geisinger Health Plan | No | 42133 | No |  |  | 53 |  |   
12 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42027 | No |  |  | 54 |  |   
13 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42035 | No |  |  | 55 |  |   
14 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42037 | No |  |  | 56 |  |   
15 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42043 | No |  |  | 57 |  |   
16 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42067 | No |  |  | 58 |  |   
17 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42069 | No |  |  | 59 |  |   
18 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42079 | No |  |  | 60 |  |   
19 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42081 | No |  |  | 61 |  |   
20 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42087 | No |  |  | 62 |  |   
21 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42089 | No |  |  | 63 |  |   
22 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42093 | No |  |  | 64 |  |   
23 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42097 | No |  |  | 65 |  |   
24 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42099 | No |  |  | 66 |  |   
25 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42131 | No |  |  | 67 |  |   
26 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42107 | No |  |  | 68 |  |   
27 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42109 | No |  |  | 69 |  |   
28 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42115 | No |  |  | 70 |  |   
29 | 2014 | PA | 22444 | HIOS | 9 | 2014-01-21 08:29:49 | 22444 | PA | PAS002 | GHP Extra | No | 42119 | No |  |  | 71 |  |   
... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ...  
70 | 2014 | AL | 12538 | HIOS | 8 | 2014-01-21 08:29:49 | 12538 | AL | ALS001 | State of Alabama | Yes |  |  |  |  | 13 |  |   
71 | 2014 | AL | 17540 | HIOS | 3 | 2013-09-02 11:39:25 | 17540 | AL | ALS001 | DentalGuard Preferred - PPO | Yes |  |  |  |  | 13 |  |   
72 | 2014 | AL | 44580 | HIOS | 10 | 2014-01-21 08:29:49 | 44580 | AL | ALS001 | Birmingham | No | 1073 | No |  |  | 13 |  |   
73 | 2014 | AL | 44580 | HIOS | 10 | 2014-01-21 08:29:49 | 44580 | AL | ALS001 | Birmingham | No | 1117 | No |  |  | 14 |  |   
74 | 2014 | AL | 44580 | HIOS | 10 | 2014-01-21 08:29:49 | 44580 | AL | ALS002 | Huntsville | No | 1089 | No |  |  | 15 |  |   
75 | 2014 | AL | 44580 | HIOS | 10 | 2014-01-21 08:29:49 | 44580 | AL | ALS003 | Dental | Yes |  |  |  |  | 16 |  |   
76 | 2014 | AL | 44785 | HIOS | 4 | 2013-09-10 14:43:20 | 44785 | AL | ALS001 | AL FFS Exchange | Yes |  |  |  |  | 13 |  |   
77 | 2014 | AL | 46211 | HIOS | 1 | 2013-06-06 10:50:48 | 46211 | AL | ALS001 | Alabama Service Area | Yes |  |  |  |  | 13 |  |   
78 | 2014 | AL | 46944 | HIOS | 7 | 2014-01-17 09:36:20 | 46944 | AL | ALS001 | State | Yes |  |  |  |  | 13 |  |   
79 | 2014 | AL | 59809 | HIOS | 8 | 2014-01-16 07:24:04 | 59809 | AL | ALS001 | UnitedHealthcare Life Insurance Company - AL | Yes |  |  |  |  | 13 |  |   
80 | 2014 | AL | 77233 | HIOS | 6 | 2014-01-17 09:36:20 | 77233 | AL | ALS001 | Service Area - DIC AL | Yes |  |  |  |  | 13 |  |   
81 | 2014 | AL | 82285 | HIOS | 7 | 2014-01-21 08:29:49 | 82285 | AL | ALS001 | Service Area - DDIC AL | Yes |  |  |  |  | 13 |  |   
82 | 2014 | AZ | 17100 | HIOS | 7 | 2013-10-15 07:27:56 | 17100 | AZ | AZS001 | MetLife Preferred Program | Yes |  |  |  |  | 13 |  |   
83 | 2014 | AZ | 17454 | HIOS | 5 | 2013-09-17 16:07:07 | 17454 | AZ | AZS001 | DentalGuard Preferred - PPO | Yes |  |  |  |  | 13 |  |   
84 | 2014 | AZ | 18156 | HIOS | 1 | 2013-06-06 10:50:48 | 18156 | AZ | AZS001 | Arizona Service Area | Yes |  |  |  |  | 13 |  |   
85 | 2014 | AZ | 23307 | HIOS | 8 | 2014-01-16 07:24:04 | 23307 | AZ | AZS001 | HHP HMO.1 | No | 4013 | No |  |  | 13 |  |   
86 | 2014 | AZ | 23307 | HIOS | 8 | 2014-01-16 07:24:04 | 23307 | AZ | AZS002 | HHP HMO.2 | No | 4019 | No |  |  | 14 |  |   
87 | 2014 | AZ | 30045 | HIOS | 5 | 2014-03-19 07:06:49 | 30045 | AZ | AZS001 | Arizona | Yes |  |  |  |  | 13 |  |   
88 | 2014 | AZ | 33851 | HIOS | 5 | 2013-09-16 06:33:22 | 33851 | AZ | AZS001 | Premier Access - Arizona | Yes |  |  |  |  | 13 |  |   
89 | 2014 | AZ | 51485 | HIOS | 13 | 2014-03-19 07:06:49 | 51485 | AZ | AZS001 | Health Net PPO | Yes |  |  |  |  | 13 |  |   
90 | 2014 | AZ | 52147 | HIOS | 2 | 2013-07-01 08:34:30 | 52147 | AZ | AZS001 | Arizona | Yes |  |  |  |  | 13 |  |   
91 | 2014 | AZ | 53901 | HIOS | 7 | 2014-01-16 07:24:04 | 53901 | AZ | AZS001 | BCBS PPO | Yes |  |  |  |  | 13 |  |   
92 | 2014 | AZ | 58292 | HIOS | 7 | 2014-01-17 09:36:20 | 58292 | AZ | AZS001 | Service Area - DIC AZ | Yes |  |  |  |  | 13 |  |   
93 | 2014 | AZ | 60761 | HIOS | 5 | 2013-11-23 14:44:18 | 60761 | AZ | AZS001 | Maricopa | No | 4013 | No |  |  | 13 |  |   
94 | 2014 | AZ | 60761 | HIOS | 5 | 2013-11-23 14:44:18 | 60761 | AZ | AZS002 | Pima | No | 4019 | No |  |  | 14 |  |   
95 | 2014 | AZ | 60761 | HIOS | 5 | 2013-11-23 14:44:18 | 60761 | AZ | AZS003 | Santa Cruz | No | 4023 | No |  |  | 15 |  |   
96 | 2014 | AZ | 60761 | HIOS | 5 | 2013-11-23 14:44:18 | 60761 | AZ | AZS004 | Maricopa Pima Santa Cruz | No | 4013 | No |  |  | 16 |  |   
97 | 2014 | AZ | 60761 | HIOS | 5 | 2013-11-23 14:44:18 | 60761 | AZ | AZS004 | Maricopa Pima Santa Cruz | No | 4019 | No |  |  | 17 |  |   
98 | 2014 | AZ | 60761 | HIOS | 5 | 2013-11-23 14:44:18 | 60761 | AZ | AZS004 | Maricopa Pima Santa Cruz | No | 4023 | No |  |  | 18 |  |   
99 | 2014 | AZ | 66105 | HIOS | 6 | 2014-03-19 07:06:49 | 66105 | AZ | AZS001 | Dental | Yes |  |  |  |  | 13 |  |   
  
100 rows Ã 18 columns

first let's look at how many states have been included in this dataset.

In [7]:

    
    
    state_in_area=pd.read_sql("""SELECT DISTINCT statecode from servicearea order by statecode;""", conn)
    state_in_area
    

Out[7]:

| StateCode  
---|---  
0 | AK  
1 | AL  
2 | AR  
3 | AZ  
4 | DE  
5 | FL  
6 | GA  
7 | HI  
8 | IA  
9 | ID  
10 | IL  
11 | IN  
12 | KS  
13 | LA  
14 | ME  
15 | MI  
16 | MO  
17 | MS  
18 | MT  
19 | NC  
20 | ND  
21 | NE  
22 | NH  
23 | NJ  
24 | NM  
25 | NV  
26 | OH  
27 | OK  
28 | OR  
29 | PA  
30 | SC  
31 | SD  
32 | TN  
33 | TX  
34 | UT  
35 | VA  
36 | WI  
37 | WV  
38 | WY  
  
A little surprise. the data is from 40, not 50 states of the country. Let's
look at how many different issuers(plan provider?), service area across the
country.

In [8]:

    
    
    servicearea_issuerid=pd.read_sql("""select statecode, count(distinct(issuerid)) as num_issuer
                                        , count(distinct(serviceareaid)) as num_service
                                        , count(distinct (serviceareaname)) as num_servicename
                                        from servicearea
                                        group by statecode
                                        order by statecode;""", conn)
    servicearea_issuerid
    

Out[8]:

| StateCode | num_issuer | num_service | num_servicename  
---|---|---|---|---  
0 | AK | 13 | 3 | 14  
1 | AL | 19 | 5 | 31  
2 | AR | 16 | 8 | 21  
3 | AZ | 38 | 19 | 91  
4 | DE | 15 | 4 | 21  
5 | FL | 36 | 8 | 82  
6 | GA | 34 | 18 | 89  
7 | HI | 5 | 2 | 6  
8 | IA | 24 | 12 | 44  
9 | ID | 8 | 4 | 13  
10 | IL | 33 | 49 | 102  
11 | IN | 33 | 23 | 70  
12 | KS | 21 | 5 | 33  
13 | LA | 23 | 8 | 40  
14 | ME | 16 | 9 | 27  
15 | MI | 44 | 12 | 278  
16 | MO | 27 | 10 | 93  
17 | MS | 10 | 6 | 21  
18 | MT | 12 | 6 | 19  
19 | NC | 23 | 10 | 53  
20 | ND | 17 | 3 | 16  
21 | NE | 22 | 7 | 38  
22 | NH | 18 | 4 | 22  
23 | NJ | 21 | 6 | 41  
24 | NM | 8 | 12 | 14  
25 | NV | 15 | 5 | 34  
26 | OH | 43 | 34 | 116  
27 | OK | 26 | 24 | 37  
28 | OR | 18 | 5 | 32  
29 | PA | 44 | 16 | 166  
30 | SC | 24 | 12 | 47  
31 | SD | 15 | 2 | 14  
32 | TN | 24 | 11 | 44  
33 | TX | 48 | 90 | 156  
34 | UT | 16 | 8 | 39  
35 | VA | 31 | 20 | 69  
36 | WI | 39 | 8 | 86  
37 | WV | 16 | 7 | 21  
38 | WY | 15 | 3 | 14  
  
from the results, it seems serviceareaid and serviceareaname are two different
definitions. the number of service area id is less than that of service area
name. I am not sure if that means certain plan providers offer service in
several areas (with name), and multiple service areas (with name) share one
service area id.

Now let's take a look at how many sources across the country.

In [9]:

    
    
    source_type=pd.read_sql("""SELECT distinct(SourceName)
                            from ServiceArea 
                            ; """, conn)
    source_type
    

Out[9]:

| SourceName  
---|---  
0 | HIOS  
1 | OPM  
2 | SERFF  
  
Three sources through which data was collected.

In [10]:

    
    
    # see how the popuar of each source in states
    source_popularity=pd.read_sql("""select sourcename, count(distinct(statecode)) 
                                from servicearea group by sourcename; """, conn)
    source_popularity
    

Out[10]:

| SourceName | count(distinct(statecode))  
---|---|---  
0 | HIOS | 23  
1 | OPM | 27  
2 | SERFF | 20  
  
OPM is the most popular source that was used in 27 states.

In [11]:

    
    
    # see how many services of each source in states
    source_count=pd.read_sql("""select sourcename, count(statecode) as service_number
                                from servicearea group by sourcename order by sourcename; """, conn)
    source_count
    

Out[11]:

| SourceName | service_number  
---|---|---  
0 | HIOS | 19925  
1 | OPM | 2134  
2 | SERFF | 20188  
  
Although OPM serves 27 states while SERFF's service was in only 20 states,
SERFF has the most data input counts but OPM has the least.

Let's see the distributions in different states.

In [12]:

    
    
    source_state=pd.read_sql("""SELECT StateCode, SourceName, COUNT(SourceName) as num_source 
                            from ServiceArea 
                            group by StateCode, SourceName 
                            order by num_source desc; """, conn)
    source_state
    

Out[12]:

| StateCode | SourceName | num_source  
---|---|---|---  
0 | MI | SERFF | 6077  
1 | VA | SERFF | 4242  
2 | PA | HIOS | 3525  
3 | TX | HIOS | 3146  
4 | GA | HIOS | 2241  
5 | IL | SERFF | 2107  
6 | MO | HIOS | 2022  
7 | KS | SERFF | 1728  
8 | OH | SERFF | 1665  
9 | WI | HIOS | 1315  
10 | FL | HIOS | 1305  
11 | NE | SERFF | 1185  
12 | IN | HIOS | 1147  
13 | NC | HIOS | 1086  
14 | OK | HIOS | 953  
15 | TN | HIOS | 906  
16 | OR | SERFF | 625  
17 | IA | SERFF | 514  
18 | LA | HIOS | 491  
19 | MS | HIOS | 462  
20 | VA | OPM | 432  
21 | AR | SERFF | 364  
22 | UT | SERFF | 353  
23 | NJ | HIOS | 343  
24 | KS | OPM | 309  
25 | PA | OPM | 267  
26 | TX | OPM | 256  
27 | MO | OPM | 255  
28 | ND | HIOS | 251  
29 | SC | HIOS | 240  
... | ... | ... | ...  
40 | IL | OPM | 108  
41 | WV | SERFF | 104  
42 | WI | OPM | 102  
43 | NC | OPM | 85  
44 | OK | OPM | 79  
45 | DE | SERFF | 53  
46 | ME | OPM | 48  
47 | WY | HIOS | 46  
48 | AK | HIOS | 35  
49 | NV | OPM | 8  
50 | AK | OPM | 6  
51 | HI | SERFF | 6  
52 | NM | OPM | 4  
53 | SC | OPM | 4  
54 | AR | OPM | 3  
55 | DE | OPM | 3  
56 | GA | OPM | 3  
57 | IN | OPM | 3  
58 | LA | OPM | 3  
59 | MT | OPM | 3  
60 | NH | OPM | 3  
61 | TN | OPM | 3  
62 | WV | OPM | 3  
63 | OR | OPM | 2  
64 | UT | OPM | 2  
65 | AL | OPM | 1  
66 | IL | HIOS | 1  
67 | MI | HIOS | 1  
68 | OH | HIOS | 1  
69 | VA | HIOS | 1  
  
70 rows Ã 3 columns

* * *

Now let's take a look at table 'rate'.

In [13]:

    
    
    table_rate = pd.read_sql("""SELECT *
                            FROM Rate
                            LIMIT 30;""", conn)
    table_rate
    

Out[13]:

| BusinessYear | StateCode | IssuerId | SourceName | VersionNum | ImportDate | IssuerId2 | FederalTIN | RateEffectiveDate | RateExpirationDate | PlanId | RatingAreaId | Tobacco | Age | IndividualRate | IndividualTobaccoRate | Couple | PrimarySubscriberAndOneDependent | PrimarySubscriberAndTwoDependents | PrimarySubscriberAndThreeOrMoreDependents | CoupleAndOneDependent | CoupleAndTwoDependents | CoupleAndThreeOrMoreDependents | RowNumber  
---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---  
0 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 0-20 | 29.00 |  |  |  |  |  |  |  |  | 14  
1 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0020001 | Rating Area 1 | No Preference | Family Option | 36.95 |  | 73.9 | 107.61 | 107.61 | 107.61 | 144.56 | 144.56 | 144.56 | 14  
2 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0020001 | Rating Area 2 | No Preference | Family Option | 36.95 |  | 73.9 | 107.61 | 107.61 | 107.61 | 144.56 | 144.56 | 144.56 | 15  
3 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 21 | 32.00 |  |  |  |  |  |  |  |  | 15  
4 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 22 | 32.00 |  |  |  |  |  |  |  |  | 16  
5 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0020001 | Rating Area 3 | No Preference | Family Option | 36.95 |  | 73.9 | 107.61 | 107.61 | 107.61 | 144.56 | 144.56 | 144.56 | 16  
6 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0020002 | Rating Area 1 | No Preference | Family Option | 32.45 |  | 64.9 | 94.5 | 94.5 | 94.5 | 126.95 | 126.95 | 126.95 | 17  
7 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 23 | 32.00 |  |  |  |  |  |  |  |  | 17  
8 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 24 | 32.00 |  |  |  |  |  |  |  |  | 18  
9 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0020002 | Rating Area 2 | No Preference | Family Option | 32.45 |  | 64.9 | 94.5 | 94.5 | 94.5 | 126.95 | 126.95 | 126.95 | 18  
10 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0020002 | Rating Area 3 | No Preference | Family Option | 32.45 |  | 64.9 | 94.5 | 94.5 | 94.5 | 126.95 | 126.95 | 126.95 | 19  
11 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 25 | 32.00 |  |  |  |  |  |  |  |  | 19  
12 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 26 | 32.00 |  |  |  |  |  |  |  |  | 20  
13 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 27 | 32.00 |  |  |  |  |  |  |  |  | 21  
14 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 28 | 32.00 |  |  |  |  |  |  |  |  | 22  
15 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 29 | 32.00 |  |  |  |  |  |  |  |  | 23  
16 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 30 | 32.00 |  |  |  |  |  |  |  |  | 24  
17 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 31 | 32.00 |  |  |  |  |  |  |  |  | 25  
18 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 32 | 32.00 |  |  |  |  |  |  |  |  | 26  
19 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 33 | 32.00 |  |  |  |  |  |  |  |  | 27  
20 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 34 | 32.00 |  |  |  |  |  |  |  |  | 28  
21 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 35 | 32.00 |  |  |  |  |  |  |  |  | 29  
22 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 36 | 32.00 |  |  |  |  |  |  |  |  | 30  
23 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 37 | 32.00 |  |  |  |  |  |  |  |  | 31  
24 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 38 | 32.00 |  |  |  |  |  |  |  |  | 32  
25 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 39 | 32.00 |  |  |  |  |  |  |  |  | 33  
26 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 40 | 32.00 |  |  |  |  |  |  |  |  | 34  
27 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 41 | 32.00 |  |  |  |  |  |  |  |  | 35  
28 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 42 | 32.00 |  |  |  |  |  |  |  |  | 36  
29 | 2014 | AK | 21989 | HIOS | 6 | 2014-03-19 07:06:49 | 21989 | 93-0438772 | 2014-01-01 | 2014-12-31 | 21989AK0010001 | Rating Area 1 | No Preference | 43 | 32.00 |  |  |  |  |  |  |  |  | 37  
  
First, what does the average rate look like in each state?

In [14]:

    
    
    rate_state=pd.read_sql("""select businessyear, statecode, avg(individualrate) as rate_ave
                            from rate 
                            group by businessyear, statecode
                            order by rate_ave desc;""", conn)
    rate_state
    

Out[14]:

| BusinessYear | StateCode | rate_ave  
---|---|---|---  
0 | 2014 | WY | 73648.582224  
1 | 2014 | MS | 52125.237397  
2 | 2014 | KS | 49680.716475  
3 | 2014 | TN | 44975.596390  
4 | 2014 | MO | 44459.083736  
5 | 2014 | AR | 40102.113094  
6 | 2014 | SD | 39368.231782  
7 | 2014 | NM | 35505.227647  
8 | 2014 | SC | 34540.400559  
9 | 2014 | NC | 34415.800294  
10 | 2014 | LA | 32071.473954  
11 | 2014 | AL | 30376.926656  
12 | 2014 | AK | 26667.898057  
13 | 2014 | ND | 26339.233993  
14 | 2014 | GA | 25214.679575  
15 | 2014 | UT | 20333.377578  
16 | 2014 | NE | 20325.909963  
17 | 2014 | OH | 19137.075760  
18 | 2014 | ID | 18457.376815  
19 | 2014 | MT | 18405.733582  
20 | 2014 | TX | 17043.163987  
21 | 2014 | OK | 13992.336032  
22 | 2014 | IN | 9811.632657  
23 | 2014 | AZ | 9103.873065  
24 | 2014 | MI | 8710.653031  
25 | 2014 | PA | 7402.982039  
26 | 2016 | AK | 628.555865  
27 | 2015 | AK | 623.849621  
28 | 2016 | WI | 495.136374  
29 | 2014 | WI | 474.703744  
... | ... | ... | ...  
81 | 2014 | NH | 277.302947  
82 | 2016 | TX | 277.089626  
83 | 2015 | TX | 274.799288  
84 | 2016 | MO | 274.126625  
85 | 2015 | NV | 272.983556  
86 | 2015 | NM | 270.483889  
87 | 2015 | MS | 267.688579  
88 | 2014 | FL | 267.417355  
89 | 2016 | OH | 265.954770  
90 | 2015 | IA | 261.334281  
91 | 2016 | VA | 258.568196  
92 | 2016 | HI | 256.341476  
93 | 2016 | ND | 255.682541  
94 | 2015 | OR | 255.351227  
95 | 2015 | MI | 252.195073  
96 | 2016 | KS | 251.866718  
97 | 2015 | OH | 251.531820  
98 | 2016 | NE | 244.616856  
99 | 2016 | NM | 240.629280  
100 | 2015 | KS | 238.974485  
101 | 2016 | MS | 237.566646  
102 | 2016 | AL | 231.690536  
103 | 2015 | MO | 224.164116  
104 | 2016 | IN | 223.137739  
105 | 2015 | IN | 221.929264  
106 | 2015 | AL | 215.844990  
107 | 2014 | WV | 206.104756  
108 | 2015 | AR | 196.282286  
109 | 2015 | NE | 183.670999  
110 | 2016 | MI | 174.703004  
  
111 rows Ã 3 columns

Very surprisingly, average rate in 2014 is very very high in most states. in
some top states the number even reached 5 digits... since WY is the top 1,
let's look at it more closely.

In [15]:

    
    
    rate_wy_TOP=pd.read_sql("""select individualrate 
                            from rate 
                            where statecode='WY' and businessyear=2014
                            ORDER BY INDIVIDUALRATE DESC
                            limit 1000;""", conn)
    rate_wy_TOP
    

Out[15]:

| IndividualRate  
---|---  
0 | 999999.00  
1 | 999999.00  
2 | 999999.00  
3 | 999999.00  
4 | 999999.00  
5 | 999999.00  
6 | 999999.00  
7 | 999999.00  
8 | 999999.00  
9 | 999999.00  
10 | 999999.00  
11 | 999999.00  
12 | 999999.00  
13 | 999999.00  
14 | 999999.00  
15 | 999999.00  
16 | 999999.00  
17 | 999999.00  
18 | 999999.00  
19 | 999999.00  
20 | 999999.00  
21 | 999999.00  
22 | 999999.00  
23 | 999999.00  
24 | 999999.00  
25 | 999999.00  
26 | 999999.00  
27 | 999999.00  
28 | 999999.00  
29 | 999999.00  
... | ...  
970 | 992.16  
971 | 992.16  
972 | 992.16  
973 | 992.16  
974 | 990.84  
975 | 990.10  
976 | 990.10  
977 | 989.73  
978 | 989.73  
979 | 989.73  
980 | 989.73  
981 | 987.65  
982 | 985.73  
983 | 985.60  
984 | 985.60  
985 | 985.60  
986 | 985.60  
987 | 985.60  
988 | 985.60  
989 | 985.60  
990 | 985.07  
991 | 985.07  
992 | 984.37  
993 | 983.45  
994 | 983.45  
995 | 982.96  
996 | 982.08  
997 | 980.62  
998 | 980.19  
999 | 980.19  
  
1000 rows Ã 1 columns

one million??? is that a real number or something like system bug? let's take
a look at other states.

In [16]:

    
    
    rate_AK_TOP=pd.read_sql("""select individualrate 
                            from rate 
                            where statecode='AK' and businessyear=2014
                            ORDER BY INDIVIDUALRATE DESC
                            LIMIT 550;""", conn)
    rate_AK_TOP
    

Out[16]:

| IndividualRate  
---|---  
0 | 999999.00  
1 | 999999.00  
2 | 999999.00  
3 | 999999.00  
4 | 999999.00  
5 | 999999.00  
6 | 999999.00  
7 | 999999.00  
8 | 999999.00  
9 | 999999.00  
10 | 999999.00  
11 | 999999.00  
12 | 999999.00  
13 | 999999.00  
14 | 999999.00  
15 | 999999.00  
16 | 999999.00  
17 | 999999.00  
18 | 999999.00  
19 | 999999.00  
20 | 999999.00  
21 | 999999.00  
22 | 999999.00  
23 | 999999.00  
24 | 999999.00  
25 | 999999.00  
26 | 999999.00  
27 | 999999.00  
28 | 999999.00  
29 | 999999.00  
... | ...  
520 | 999999.00  
521 | 999999.00  
522 | 999999.00  
523 | 999999.00  
524 | 999999.00  
525 | 999999.00  
526 | 999999.00  
527 | 999999.00  
528 | 999999.00  
529 | 999999.00  
530 | 999999.00  
531 | 999999.00  
532 | 999999.00  
533 | 999999.00  
534 | 999999.00  
535 | 999999.00  
536 | 999999.00  
537 | 999999.00  
538 | 999999.00  
539 | 999999.00  
540 | 1898.28  
541 | 1898.28  
542 | 1898.28  
543 | 1898.28  
544 | 1898.28  
545 | 1898.28  
546 | 1898.28  
547 | 1898.28  
548 | 1898.28  
549 | 1898.28  
  
550 rows Ã 1 columns

So in AK, it seems the same thing, and the next level is $ 1900.

Also it seems the average in 2016 is much lower, so how about the rate in 2016
in WY?

In [17]:

    
    
    rate_wy_TOP_2016=pd.read_sql("""select individualrate 
                            from rate 
                            where statecode='WY' and businessyear=2016
                            ORDER BY INDIVIDUALRATE DESC
                            LIMIT 1000;""", conn)
    rate_wy_TOP_2016
    

Out[17]:

| IndividualRate  
---|---  
0 | 1406.81  
1 | 1406.81  
2 | 1406.81  
3 | 1406.81  
4 | 1394.99  
5 | 1394.99  
6 | 1394.99  
7 | 1394.99  
8 | 1385.31  
9 | 1385.31  
10 | 1385.31  
11 | 1385.31  
12 | 1384.78  
13 | 1384.78  
14 | 1384.78  
15 | 1384.78  
16 | 1384.31  
17 | 1384.31  
18 | 1374.43  
19 | 1374.43  
20 | 1374.43  
21 | 1374.43  
22 | 1373.22  
23 | 1373.22  
24 | 1373.22  
25 | 1373.22  
26 | 1372.68  
27 | 1372.68  
28 | 1363.55  
29 | 1363.55  
... | ...  
970 | 1053.26  
971 | 1053.26  
972 | 1053.26  
973 | 1053.17  
974 | 1053.17  
975 | 1052.44  
976 | 1052.44  
977 | 1052.22  
978 | 1052.22  
979 | 1052.22  
980 | 1052.14  
981 | 1052.14  
982 | 1051.56  
983 | 1051.56  
984 | 1051.23  
985 | 1051.23  
986 | 1050.22  
987 | 1049.15  
988 | 1049.15  
989 | 1049.15  
990 | 1047.33  
991 | 1047.21  
992 | 1047.14  
993 | 1047.14  
994 | 1047.14  
995 | 1046.92  
996 | 1046.92  
997 | 1046.92  
998 | 1045.74  
999 | 1045.74  
  
1000 rows Ã 1 columns

The million level disappeared. The highest level in 2016 is in the similar
range as 2014 secondary level, which is less than $2000.

Then let's see what planid is associated with the million dollar rate.

In [18]:

    
    
    rate_PLAN_WY=pd.read_sql("""select DISTINCT(PLANID)
                                    from rate 
                                    WHERE STATECODE='WY' AND INDIVIDUALRATE=999999
                                    ;""", conn)
    rate_PLAN_WY
    

Out[18]:

| PlanId  
---|---  
0 | 47731WY0030002  
1 | 47731WY0030001  
2 | 47731WY0020002  
3 | 47731WY0020001  
  
Only four plan ids are responsible for the million dollar rate. How many plan
ids are there in WY?

In [19]:

    
    
    rate_PLANS_2014_WY=pd.read_sql("""select DISTINCT(PLANID)
                                    from rate 
                                    WHERE BUSINESSYEAR=2014 AND STATECODE='WY'
                                    ;""", conn)
    rate_PLANS_2014_WY
    

Out[19]:

| PlanId  
---|---  
0 | 11269WY0070001  
1 | 11269WY0080001  
2 | 11269WY0070002  
3 | 11269WY0080002  
4 | 11269WY0070003  
5 | 11269WY0080003  
6 | 11269WY0070004  
7 | 11269WY0080004  
8 | 11269WY0070005  
9 | 37378WY0010001  
10 | 37378WY0010002  
11 | 37378WY0010003  
12 | 38921WY0010001  
13 | 38921WY0030001  
14 | 38921WY0040001  
15 | 38921WY0050001  
16 | 38921WY0060001  
17 | 38921WY0020001  
18 | 47731WY0020001  
19 | 47731WY0020003  
20 | 47731WY0020002  
21 | 47731WY0030001  
22 | 47731WY0030002  
23 | 47731WY0020004  
24 | 47731WY0020005  
25 | 47731WY0020006  
26 | 47731WY0030003  
27 | 47731WY0030004  
28 | 47731WY0030006  
29 | 47731WY0030005  
... | ...  
33 | 53189WY0070004  
34 | 53189WY0070005  
35 | 53189WY0070006  
36 | 53189WY0070007  
37 | 53189WY0070009  
38 | 53189WY0070010  
39 | 53189WY0070011  
40 | 53189WY0070012  
41 | 53189WY0070013  
42 | 53189WY0070014  
43 | 53189WY0080001  
44 | 53189WY0080002  
45 | 53189WY0080005  
46 | 53189WY0080006  
47 | 53189WY0080003  
48 | 53189WY0080004  
49 | 53189WY0080007  
50 | 53189WY0080008  
51 | 53189WY0080009  
52 | 53189WY0080010  
53 | 53189WY0080011  
54 | 53189WY0080012  
55 | 83964WY0020003  
56 | 83964WY0020001  
57 | 83964WY0010001  
58 | 83964WY0020004  
59 | 83964WY0010002  
60 | 83964WY0020002  
61 | 83964WY0010003  
62 | 83964WY0010004  
  
63 rows Ã 1 columns

So definitely there are other plans in WY that charged less.

Lets get all those million dollar plans in all states in 2014.

In [20]:

    
    
    rate_PLANS_2014_EXP=pd.read_sql("""select  STATECODE, PLANID
                                        from rate 
                                        WHERE BUSINESSYEAR=2014 AND INDIVIDUALRATE=999999
                                        GROUP BY PLANID
                                        ORDER BY STATECODE;""", conn)
    rate_PLANS_2014_EXP
    

Out[20]:

| StateCode | PlanId  
---|---|---  
0 | AK | 74819AK0010001  
1 | AK | 74819AK0010002  
2 | AK | 74819AK0020001  
3 | AK | 74819AK0020002  
4 | AL | 12538AL0010001  
5 | AL | 12538AL0010002  
6 | AL | 12538AL0020001  
7 | AL | 12538AL0020002  
8 | AR | 26904AR0010001  
9 | AR | 26904AR0010002  
10 | AR | 26904AR0020001  
11 | AR | 26904AR0020002  
12 | AZ | 77352AZ0010001  
13 | AZ | 77352AZ0010002  
14 | AZ | 77352AZ0020001  
15 | AZ | 77352AZ0020002  
16 | GA | 83502GA0010001  
17 | GA | 83502GA0010002  
18 | GA | 83502GA0020001  
19 | GA | 83502GA0020002  
20 | ID | 17859ID0010001  
21 | ID | 17859ID0010002  
22 | ID | 17859ID0020001  
23 | ID | 17859ID0020002  
24 | IN | 83557IN0010001  
25 | IN | 83557IN0010002  
26 | IN | 83557IN0020001  
27 | IN | 83557IN0020002  
28 | KS | 63790KS0010001  
29 | KS | 63790KS0010002  
... | ... | ...  
68 | OK | 40254OK0010001  
69 | OK | 40254OK0010002  
70 | OK | 40254OK0020001  
71 | OK | 40254OK0020002  
72 | PA | 71933PA0010001  
73 | PA | 71933PA0010002  
74 | PA | 71933PA0020001  
75 | PA | 71933PA0020002  
76 | SC | 89281SC0010001  
77 | SC | 89281SC0010002  
78 | SC | 89281SC0020001  
79 | SC | 89281SC0020002  
80 | SD | 61214SD0010001  
81 | SD | 61214SD0010002  
82 | SD | 61214SD0020001  
83 | SD | 61214SD0020002  
84 | TN | 24601TN0010001  
85 | TN | 24601TN0010002  
86 | TN | 24601TN0020001  
87 | TN | 24601TN0020002  
88 | TX | 47665TX0010001  
89 | TX | 47665TX0010002  
90 | TX | 47665TX0020001  
91 | TX | 47665TX0020002  
92 | UT | 42757UT0020001  
93 | UT | 42757UT0020002  
94 | WY | 47731WY0020001  
95 | WY | 47731WY0020002  
96 | WY | 47731WY0030001  
97 | WY | 47731WY0030002  
  
98 rows Ã 2 columns

These plans have common features: 1) statecode is embedded in the middle of
the id. 2) they all end with 0001 or 0002.

We noticed the high rate disappeared in 2016. So is that because the rate
decreased or the plan was canceled?

In [21]:

    
    
    rate_PLANS_2016_2014EXP=pd.read_sql("""SELECT STATECODE, PLANID
                                        FROM RATE
                                        WHERE BUSINESSYEAR=2016 AND 
                                        PLANID IN
                                        (select PLANID
                                        from rate 
                                        WHERE BUSINESSYEAR=2014 AND INDIVIDUALRATE=999999
                                        )
                                         ;""", conn)
    rate_PLANS_2016_2014EXP
    

Out[21]:

| StateCode | PlanId  
---|---|---  
  
seems the plans were canceled in 2016. To assure it, try several examples.

In [22]:

    
    
    rate_PLANS_2016=pd.read_sql("""SELECT STATECODE, PLANID
                                        FROM RATE
                                        WHERE BUSINESSYEAR=2016 AND 
                                        PLANID = '74819AK0010001'
                                         ;""", conn)
    rate_PLANS_2016
    

Out[22]:

| StateCode | PlanId  
---|---|---  
  
In [23]:

    
    
    rate_PLANS_2016WY=pd.read_sql("""SELECT DISTINCT(PLANID)
                                        FROM RATE
                                        WHERE BUSINESSYEAR=2016 AND 
                                        STATECODE = 'WY' 
                                        AND PLANID NOT IN ( '47731WY0030002', '47731WY0030001','47731WY0020002', '47731WY0020001' ) 
                                         ;""", conn)
    rate_PLANS_2016WY
    

Out[23]:

| PlanId  
---|---  
0 | 11269WY0170011  
1 | 11269WY0190010  
2 | 11269WY0190011  
3 | 11269WY0170012  
4 | 11269WY0190012  
5 | 11269WY0170013  
6 | 11269WY0190005  
7 | 11269WY0170006  
8 | 11269WY0190001  
9 | 11269WY0170014  
10 | 11269WY0190002  
11 | 11269WY0170001  
12 | 11269WY0190006  
13 | 11269WY0170003  
14 | 11269WY0190008  
15 | 11269WY0170007  
16 | 11269WY0190003  
17 | 11269WY0170002  
18 | 11269WY0190007  
19 | 11269WY0170004  
20 | 11269WY0190009  
21 | 11269WY0170008  
22 | 11269WY0190004  
23 | 11269WY0170015  
24 | 11269WY0170009  
25 | 11269WY0170010  
26 | 11269WY0170005  
27 | 11269WY0080001  
28 | 11269WY0080002  
29 | 11269WY0080003  
... | ...  
81 | 54763WY0040001  
82 | 54763WY0040002  
83 | 62081WY0010001  
84 | 62081WY0020001  
85 | 62081WY0030001  
86 | 62081WY0040001  
87 | 76197WY0030001  
88 | 76197WY0030002  
89 | 76197WY0040001  
90 | 76197WY0040002  
91 | 80132WY0010001  
92 | 80132WY0030001  
93 | 80132WY0030002  
94 | 80132WY0010002  
95 | 80132WY0020001  
96 | 80132WY0020002  
97 | 80132WY0040001  
98 | 80132WY0040002  
99 | 80132WY0050001  
100 | 80132WY0050002  
101 | 80132WY0060001  
102 | 80132WY0060002  
103 | 83964WY0020003  
104 | 83964WY0020004  
105 | 83964WY0010004  
106 | 83964WY0010003  
107 | 90776WY0030001  
108 | 90776WY0030002  
109 | 90776WY0040001  
110 | 90776WY0040002  
  
111 rows Ã 1 columns

So now, we are pretty sure that those million dollar plans were canceled in
2016.

Then next question is what are those plans, instead of just plan id? now we
need another table plan attributes.

In [24]:

    
    
    PLANTYPE=pd.read_sql("""SELECT PLANID, PLANTYPE, BenefitPackageId
                            FROM PLANATTRIBUTES
                            WHERE PLANID IN
                                        (select PLANID
                                        from rate 
                                        WHERE BUSINESSYEAR=2014 AND INDIVIDUALRATE=999999)
                            ;""", conn)
    PLANTYPE
    

Out[24]:

| PlanId | PlanType | BenefitPackageId  
---|---|---|---  
  
No record???!!! check WY state since we know them so well.

In [25]:

    
    
    PLANTYPE1=pd.read_sql("""SELECT PLANID, PLANTYPE, BenefitPackageId
                            FROM PLANATTRIBUTES
                            WHERE PLANID IN
                                        (SELECT DISTINCT(PLANID)
                                        FROM RATE
                                        WHERE BUSINESSYEAR=2014 AND 
                                        STATECODE = 'WY' 
                                        AND PLANID NOT IN ( '47731WY0030002', '47731WY0030001','47731WY0020002', '47731WY0020001'))
                            ;""", conn)
    PLANTYPE1
    

Out[25]:

| PlanId | PlanType | BenefitPackageId  
---|---|---|---  
  
Still no record???!!! need look at the new table carefully

In [26]:

    
    
    PLANID_IN_ATTRI=pd.read_sql("""SELECT DISTINCT (PLANID)
                                    FROM planattributes
                                    where statecode='WY' AND BUSINESSYEAR=2014;""", conn)
    PLANID_IN_ATTRI
    

Out[26]:

| PlanId  
---|---  
0 | 38921WY0060001-00  
1 | 38921WY0060001-01  
2 | 47731WY0030001-00  
3 | 47731WY0020001-00  
4 | 47731WY0020001-01  
5 | 47731WY0030001-01  
6 | 53189WY0080006-00  
7 | 53189WY0070006-01  
8 | 53189WY0080007-00  
9 | 53189WY0070007-00  
10 | 53189WY0070004-03  
11 | 53189WY0070004-04  
12 | 53189WY0070007-01  
13 | 53189WY0080007-01  
14 | 53189WY0070007-02  
15 | 53189WY0080005-00  
16 | 53189WY0070003-00  
17 | 53189WY0080005-01  
18 | 53189WY0070003-01  
19 | 53189WY0070003-02  
20 | 53189WY0070003-03  
21 | 53189WY0070003-04  
22 | 53189WY0070003-05  
23 | 53189WY0070003-06  
24 | 53189WY0070006-00  
25 | 53189WY0080004-00  
26 | 53189WY0070004-00  
27 | 53189WY0080004-01  
28 | 53189WY0070004-01  
29 | 53189WY0070004-02  
... | ...  
130 | 53189WY0070010-00  
131 | 53189WY0080010-01  
132 | 53189WY0070010-01  
133 | 53189WY0070010-02  
134 | 53189WY0070010-03  
135 | 53189WY0070010-04  
136 | 53189WY0070010-05  
137 | 53189WY0070010-06  
138 | 83964WY0010004-01  
139 | 53189WY0070011-00  
140 | 53189WY0080011-00  
141 | 53189WY0070011-01  
142 | 53189WY0080011-01  
143 | 53189WY0070011-02  
144 | 53189WY0070011-03  
145 | 53189WY0070011-04  
146 | 83964WY0020001-00  
147 | 83964WY0020001-01  
148 | 83964WY0010001-01  
149 | 83964WY0010002-00  
150 | 83964WY0020002-00  
151 | 83964WY0020002-01  
152 | 83964WY0010002-01  
153 | 83964WY0020003-00  
154 | 83964WY0010003-00  
155 | 83964WY0020003-01  
156 | 83964WY0010003-01  
157 | 83964WY0010004-00  
158 | 83964WY0020004-00  
159 | 83964WY0020004-01  
  
160 rows Ã 1 columns

Unbelievable! The same feature in different tables has different data format!
If you notice the last several plan ids, they are the million dollar plans.
But in this table, these plan ids have extra "-xx" part!!!

Then we need try again with the function to extract the part in "rate" table.

In [27]:

    
    
    PLANTYPE_MODIFY=pd.read_sql("""SELECT planid, PLANTYPE, BenefitPackageId, PlanMarketingName, ISSUERID
                                    FROM PLANATTRIBUTES
                                    WHERE SUBSTR(PLANATTRIBUTES.PLANID,1, 14) IN
                                    (select PLANID
                                    from rate 
                                    WHERE BUSINESSYEAR=2014 AND INDIVIDUALRATE=999999)
                                    ;""", conn)
    PLANTYPE_MODIFY
    

Out[27]:

| PlanId | PlanType | BenefitPackageId | PlanMarketingName | IssuerId  
---|---|---|---|---|---  
0 | 74819AK0020001-00 | PPO | 1 | BESTOne Child Dental Plus | 74819  
1 | 74819AK0010001-00 | PPO | 1 | BEST Life Child Dental Plus | 74819  
2 | 74819AK0010001-01 | PPO | 1 | BEST Life Child Dental Plus | 74819  
3 | 74819AK0020001-01 | PPO | 1 | BESTOne Child Dental Plus | 74819  
4 | 74819AK0020002-00 | PPO | 2 | BESTOne Child Dental | 74819  
5 | 74819AK0010002-00 | PPO | 2 | BEST Life Child Dental | 74819  
6 | 74819AK0010002-01 | PPO | 2 | BEST Life Child Dental | 74819  
7 | 74819AK0020002-01 | PPO | 2 | BESTOne Child Dental | 74819  
8 | 12538AL0020001-00 | PPO | 1 | BESTOne Child Dental Plus | 12538  
9 | 12538AL0010001-00 | PPO | 1 | BEST Life Child Dental Plus | 12538  
10 | 12538AL0020001-01 | PPO | 1 | BESTOne Child Dental Plus | 12538  
11 | 12538AL0010001-01 | PPO | 1 | BEST Life Child Dental Plus | 12538  
12 | 12538AL0020002-00 | PPO | 2 | BESTOne Child Dental | 12538  
13 | 12538AL0010002-00 | PPO | 2 | BEST Life Child Dental | 12538  
14 | 12538AL0020002-01 | PPO | 2 | BESTOne Child Dental | 12538  
15 | 12538AL0010002-01 | PPO | 2 | BEST Life Child Dental | 12538  
16 | 77352AZ0020001-00 | PPO | 1 | BESTOne Child Dental Plus | 77352  
17 | 77352AZ0010001-00 | PPO | 1 | BEST Life Child Dental Plus | 77352  
18 | 77352AZ0020001-01 | PPO | 1 | BESTOne Child Dental Plus | 77352  
19 | 77352AZ0010001-01 | PPO | 1 | BEST Life Child Dental Plus | 77352  
20 | 77352AZ0010002-00 | PPO | 2 | BEST Life Child Dental | 77352  
21 | 77352AZ0020002-00 | PPO | 2 | BESTOne Child Dental | 77352  
22 | 77352AZ0010002-01 | PPO | 2 | BEST Life Child Dental | 77352  
23 | 77352AZ0020002-01 | PPO | 2 | BESTOne Child Dental | 77352  
24 | 83502GA0010002-01 | PPO | 1 | BEST Life Child Dental | 83502  
25 | 83502GA0020002-01 | PPO | 1 | BEST Life Child Dental | 83502  
26 | 83502GA0020001-00 | PPO | 1 | BEST Life Child Dental Plus | 83502  
27 | 83502GA0010001-00 | PPO | 1 | BEST Life Child Dental Plus | 83502  
28 | 83502GA0010001-01 | PPO | 1 | BEST Life Child Dental Plus | 83502  
29 | 83502GA0020001-01 | PPO | 1 | BEST Life Child Dental Plus | 83502  
... | ... | ... | ... | ... | ...  
256 | 26904AR0020001-00 | PPO | 1 | BESTOne Child Dental Plus | 26904  
257 | 26904AR0010001-00 | PPO | 1 | BEST Life Child Dental Plus | 26904  
258 | 26904AR0010002-00 | PPO | 2 | BEST Life Child Dental | 26904  
259 | 26904AR0020002-00 | PPO | 2 | BESTOne Child Dental | 26904  
260 | 63790KS0020001-00 | PPO | 1 | BESTOne Child Dental Plus | 63790  
261 | 63790KS0010001-00 | PPO | 1 | BEST Life Child Dental Plus | 63790  
262 | 63790KS0010002-00 | PPO | 2 | BEST Life Child Dental | 63790  
263 | 63790KS0020002-00 | PPO | 2 | BESTOne Child Dental | 63790  
264 | 35700MI0020001-00 | PPO | 1 | BESTOne Child Dental Plus | 35700  
265 | 35700MI0010001-00 | PPO | 1 | BEST Life Child Dental Plus | 35700  
266 | 35700MI0010002-00 | PPO | 2 | BESTLife Child Dental | 35700  
267 | 35700MI0020002-00 | PPO | 2 | BESTOne Child Dental | 35700  
268 | 93895MT0020001-00 | PPO | 1 | BESTOne Child Dental Plus | 93895  
269 | 93895MT0010001-00 | PPO | 1 | BEST Life Child Dental Plus | 93895  
270 | 93895MT0010002-00 | PPO | 2 | BEST Life Child Dental | 93895  
271 | 93895MT0020002-00 | PPO | 2 | BESTOne Child Dental Plus | 93895  
272 | 50022NE0020001-00 | PPO | 1 | BESTOne Child Dental Plus | 50022  
273 | 50022NE0010001-00 | PPO | 1 | BEST Life Child Dental Plus | 50022  
274 | 50022NE0010002-00 | PPO | 2 | BEST Life Child Dental | 50022  
275 | 50022NE0020002-00 | PPO | 2 | BESTOne Child Dental | 50022  
276 | 47509OH0020001-00 | PPO | 1 | BESTOne Child Dental Plus | 47509  
277 | 47509OH0010001-00 | PPO | 1 | BEST Life Child Dental Plus | 47509  
278 | 47509OH0010002-00 | PPO | 2 | BEST Life Child Dental | 47509  
279 | 47509OH0020002-00 | PPO | 2 | BESTOne Child Dental | 47509  
280 | 61214SD0020001-00 | PPO | 1 | BESTOne Child Dental Plus | 61214  
281 | 61214SD0010001-00 | PPO | 1 | BEST Life Child Dental Plus | 61214  
282 | 61214SD0010002-00 | PPO | 2 | BEST Life Child Dental | 61214  
283 | 61214SD0020002-00 | PPO | 2 | BESTOne Child Dental | 61214  
284 | 42757UT0020001-00 | PPO | 1 | BESTOne Child Dental Plus | 42757  
285 | 42757UT0020002-00 | PPO | 1 | BESTOne Child Dental | 42757  
  
286 rows Ã 5 columns

Now we got all of them. It seems they are all PPO plans, and are all dental
plans? Check it!

In [28]:

    
    
    PLANTYPE_MODIFY=pd.read_sql("""SELECT PLANTYPE, PlanMarketingName
                                    FROM PLANATTRIBUTES
                                    WHERE SUBSTR(PLANATTRIBUTES.PLANID,1, 14) IN
                                    (select PLANID
                                    from rate 
                                    WHERE BUSINESSYEAR=2014 AND INDIVIDUALRATE=999999)
                                    GROUP BY PLANMARKETINGNAME
                                    ;""", conn)
    PLANTYPE_MODIFY
    

Out[28]:

| PlanType | PlanMarketingName  
---|---|---  
0 | PPO | BEST Life Child Dental  
1 | PPO | BEST Life Child Dental Plus  
2 | PPO | BESTLife Child Dental  
3 | PPO | BESTOne Child Dental  
4 | PPO | BESTOne Child Dental Plus  
  
So now we know all those million dollar plans in 2014 are all dental PPO
plans. for future analysis, probably we need separate dental plan from other
insurance plans to make comparison among states.

First take a look at the average rate from the states.

In [29]:

    
    
    rate_state_reg=pd.read_sql("""select businessyear, statecode, avg(individualrate) as rate_ave
                            from rate 
                            WHERE INDIVIDUALRATE != 999999
                            group by businessyear, statecode
                            order by STATECODE;""", conn)
    rate_state_reg
    

Out[29]:

| BusinessYear | StateCode | rate_ave  
---|---|---|---  
0 | 2014 | AK | 650.731685  
1 | 2015 | AK | 623.849621  
2 | 2016 | AK | 628.555865  
3 | 2014 | AL | 292.389124  
4 | 2015 | AL | 215.844990  
5 | 2016 | AL | 231.690536  
6 | 2014 | AR | 169.794107  
7 | 2015 | AR | 196.282286  
8 | 2016 | AR | 297.828922  
9 | 2014 | AZ | 371.687725  
10 | 2015 | AZ | 393.848115  
11 | 2016 | AZ | 353.645713  
12 | 2014 | DE | 280.979500  
13 | 2015 | DE | 368.509249  
14 | 2016 | DE | 395.512996  
15 | 2014 | FL | 267.417355  
16 | 2015 | FL | 342.451145  
17 | 2016 | FL | 327.351469  
18 | 2014 | GA | 275.275456  
19 | 2015 | GA | 297.344257  
20 | 2016 | GA | 382.078460  
21 | 2016 | HI | 256.341476  
22 | 2014 | IA | 341.813347  
23 | 2015 | IA | 261.334281  
24 | 2016 | IA | 336.530705  
25 | 2014 | ID | 318.535988  
26 | 2014 | IL | 379.076225  
27 | 2015 | IL | 375.995723  
28 | 2016 | IL | 362.115567  
29 | 2014 | IN | 467.159841  
... | ... | ... | ...  
81 | 2014 | PA | 357.063010  
82 | 2015 | PA | 312.545187  
83 | 2016 | PA | 324.729081  
84 | 2014 | SC | 317.764108  
85 | 2015 | SC | 390.375389  
86 | 2016 | SC | 411.545330  
87 | 2014 | SD | 423.741179  
88 | 2015 | SD | 349.074508  
89 | 2016 | SD | 348.996351  
90 | 2014 | TN | 406.186836  
91 | 2015 | TN | 345.751294  
92 | 2016 | TN | 407.263990  
93 | 2014 | TX | 248.474809  
94 | 2015 | TX | 274.799288  
95 | 2016 | TX | 277.089626  
96 | 2014 | UT | 473.799678  
97 | 2015 | UT | 403.987676  
98 | 2016 | UT | 282.916561  
99 | 2014 | VA | 399.604184  
100 | 2015 | VA | 282.240625  
101 | 2016 | VA | 258.568196  
102 | 2014 | WI | 474.703744  
103 | 2015 | WI | 460.238902  
104 | 2016 | WI | 495.136374  
105 | 2014 | WV | 206.104756  
106 | 2015 | WV | 377.256669  
107 | 2016 | WV | 396.895335  
108 | 2014 | WY | 451.446491  
109 | 2015 | WY | 398.847285  
110 | 2016 | WY | 389.786427  
  
111 rows Ã 3 columns

In [30]:

    
    
    rate_state_pivot1=pd.read_sql("""select  statecode, businessyear,avg(individualrate) as rate_ave
                                            from rate 
                                            WHERE businessyear in (2014, 2015, 2016) and INDIVIDUALRATE != 999999
                                            group by businessyear, statecode
                                            ;""", conn)
    rate_state_pivot1
    

Out[30]:

| StateCode | BusinessYear | rate_ave  
---|---|---|---  
0 | AK | 2014 | 650.731685  
1 | AL | 2014 | 292.389124  
2 | AR | 2014 | 169.794107  
3 | AZ | 2014 | 371.687725  
4 | DE | 2014 | 280.979500  
5 | FL | 2014 | 267.417355  
6 | GA | 2014 | 275.275456  
7 | IA | 2014 | 341.813347  
8 | ID | 2014 | 318.535988  
9 | IL | 2014 | 379.076225  
10 | IN | 2014 | 467.159841  
11 | KS | 2014 | 262.596902  
12 | LA | 2014 | 382.322501  
13 | ME | 2014 | 351.801596  
14 | MI | 2014 | 276.050757  
15 | MO | 2014 | 150.467906  
16 | MS | 2014 | 318.371830  
17 | MT | 2014 | 246.762570  
18 | NC | 2014 | 375.606214  
19 | ND | 2014 | 305.550410  
20 | NE | 2014 | 317.836416  
21 | NH | 2014 | 277.302947  
22 | NJ | 2014 | 387.478783  
23 | NM | 2014 | 253.262283  
24 | OH | 2014 | 405.018790  
25 | OK | 2014 | 364.675515  
26 | PA | 2014 | 357.063010  
27 | SC | 2014 | 317.764108  
28 | SD | 2014 | 423.741179  
29 | TN | 2014 | 406.186836  
... | ... | ... | ...  
81 | IA | 2016 | 336.530705  
82 | IL | 2016 | 362.115567  
83 | IN | 2016 | 223.137739  
84 | KS | 2016 | 251.866718  
85 | LA | 2016 | 321.969498  
86 | ME | 2016 | 367.270948  
87 | MI | 2016 | 174.703004  
88 | MO | 2016 | 274.126625  
89 | MS | 2016 | 237.566646  
90 | MT | 2016 | 331.884895  
91 | NC | 2016 | 300.650959  
92 | ND | 2016 | 255.682541  
93 | NE | 2016 | 244.616856  
94 | NH | 2016 | 352.932716  
95 | NJ | 2016 | 449.650578  
96 | NM | 2016 | 240.629280  
97 | NV | 2016 | 328.111901  
98 | OH | 2016 | 265.954770  
99 | OK | 2016 | 316.471635  
100 | OR | 2016 | 307.974696  
101 | PA | 2016 | 324.729081  
102 | SC | 2016 | 411.545330  
103 | SD | 2016 | 348.996351  
104 | TN | 2016 | 407.263990  
105 | TX | 2016 | 277.089626  
106 | UT | 2016 | 282.916561  
107 | VA | 2016 | 258.568196  
108 | WI | 2016 | 495.136374  
109 | WV | 2016 | 396.895335  
110 | WY | 2016 | 389.786427  
  
111 rows Ã 3 columns

This time, the numbers look reasonable. Let's make it to pivot table

In [31]:

    
    
    rate_state_pivot=pd.read_sql("""select statecode,
                                            SUM(CASE WHEN BusinessYear = 2014 THEN rate_ave END) AS '2014',
                                             SUM(CASE WHEN BusinessYear = 2015 THEN rate_ave  END) AS '2015',
                                             SUM(CASE WHEN BusinessYear = 2016 THEN rate_ave  END) AS '2016'
                                    from (select  statecode, businessyear,avg(individualrate) as rate_ave
                                            from rate 
                                            WHERE INDIVIDUALRATE != 999999
                                            group by businessyear, statecode
                                            )
                                    group by statecode;""", conn)
    rate_state_pivot
    

Out[31]:

| statecode | 2014 | 2015 | 2016  
---|---|---|---|---  
0 | AK | 650.731685 | 623.849621 | 628.555865  
1 | AL | 292.389124 | 215.844990 | 231.690536  
2 | AR | 169.794107 | 196.282286 | 297.828922  
3 | AZ | 371.687725 | 393.848115 | 353.645713  
4 | DE | 280.979500 | 368.509249 | 395.512996  
5 | FL | 267.417355 | 342.451145 | 327.351469  
6 | GA | 275.275456 | 297.344257 | 382.078460  
7 | HI | NaN | NaN | 256.341476  
8 | IA | 341.813347 | 261.334281 | 336.530705  
9 | ID | 318.535988 | NaN | NaN  
10 | IL | 379.076225 | 375.995723 | 362.115567  
11 | IN | 467.159841 | 221.929264 | 223.137739  
12 | KS | 262.596902 | 238.974485 | 251.866718  
13 | LA | 382.322501 | 352.489545 | 321.969498  
14 | ME | 351.801596 | 342.704502 | 367.270948  
15 | MI | 276.050757 | 252.195073 | 174.703004  
16 | MO | 150.467906 | 224.164116 | 274.126625  
17 | MS | 318.371830 | 267.688579 | 237.566646  
18 | MT | 246.762570 | 287.123670 | 331.884895  
19 | NC | 375.606214 | 339.435816 | 300.650959  
20 | ND | 305.550410 | 370.775731 | 255.682541  
21 | NE | 317.836416 | 183.670999 | 244.616856  
22 | NH | 277.302947 | 367.271167 | 352.932716  
23 | NJ | 387.478783 | 412.639821 | 449.650578  
24 | NM | 253.262283 | 270.483889 | 240.629280  
25 | NV | NaN | 272.983556 | 328.111901  
26 | OH | 405.018790 | 251.531820 | 265.954770  
27 | OK | 364.675515 | 314.723452 | 316.471635  
28 | OR | NaN | 255.351227 | 307.974696  
29 | PA | 357.063010 | 312.545187 | 324.729081  
30 | SC | 317.764108 | 390.375389 | 411.545330  
31 | SD | 423.741179 | 349.074508 | 348.996351  
32 | TN | 406.186836 | 345.751294 | 407.263990  
33 | TX | 248.474809 | 274.799288 | 277.089626  
34 | UT | 473.799678 | 403.987676 | 282.916561  
35 | VA | 399.604184 | 282.240625 | 258.568196  
36 | WI | 474.703744 | 460.238902 | 495.136374  
37 | WV | 206.104756 | 377.256669 | 396.895335  
38 | WY | 451.446491 | 398.847285 | 389.786427  
  
How many plans are dental plans?

In [32]:

    
    
    dental_plan=pd.read_sql("""select statecode, businessyear, count(distinct(planid)) as num_dental
                                    from planattributes
                                    where dentalonlyplan = 'Yes'
                                    group by statecode, businessyear
                                    order by statecode;""", conn)
    dental_plan
    

Out[32]:

| StateCode | BusinessYear | num_dental  
---|---|---|---  
0 | AK | 2014 | 52  
1 | AK | 2015 | 58  
2 | AK | 2016 | 58  
3 | AL | 2014 | 100  
4 | AL | 2015 | 101  
5 | AL | 2016 | 92  
6 | AR | 2014 | 103  
7 | AR | 2015 | 82  
8 | AR | 2016 | 30  
9 | AZ | 2014 | 161  
10 | AZ | 2015 | 156  
11 | AZ | 2016 | 142  
12 | DE | 2014 | 66  
13 | DE | 2015 | 71  
14 | DE | 2016 | 65  
15 | FL | 2014 | 174  
16 | FL | 2015 | 138  
17 | FL | 2016 | 149  
18 | GA | 2014 | 147  
19 | GA | 2015 | 164  
20 | GA | 2016 | 162  
21 | HI | 2016 | 20  
22 | IA | 2014 | 69  
23 | IA | 2015 | 101  
24 | IA | 2016 | 68  
25 | ID | 2014 | 59  
26 | IL | 2014 | 95  
27 | IL | 2015 | 107  
28 | IL | 2016 | 106  
29 | IN | 2014 | 105  
... | ... | ... | ...  
81 | PA | 2014 | 206  
82 | PA | 2015 | 218  
83 | PA | 2016 | 205  
84 | SC | 2014 | 78  
85 | SC | 2015 | 122  
86 | SC | 2016 | 111  
87 | SD | 2014 | 59  
88 | SD | 2015 | 85  
89 | SD | 2016 | 63  
90 | TN | 2014 | 54  
91 | TN | 2015 | 105  
92 | TN | 2016 | 102  
93 | TX | 2014 | 228  
94 | TX | 2015 | 195  
95 | TX | 2016 | 173  
96 | UT | 2014 | 55  
97 | UT | 2015 | 63  
98 | UT | 2016 | 44  
99 | VA | 2014 | 175  
100 | VA | 2015 | 151  
101 | VA | 2016 | 132  
102 | WI | 2014 | 56  
103 | WI | 2015 | 128  
104 | WI | 2016 | 115  
105 | WV | 2014 | 73  
106 | WV | 2015 | 73  
107 | WV | 2016 | 56  
108 | WY | 2014 | 55  
109 | WY | 2015 | 88  
110 | WY | 2016 | 73  
  
111 rows Ã 3 columns

How many total plan numbers are there?

In [33]:

    
    
    total_plan=pd.read_sql("""select statecode, businessyear, count (distinct (planid)) as total_plan
                                    from planattributes
                                    group by statecode, businessyear
                                    order by statecode;""", conn)
    total_plan
    

Out[33]:

| StateCode | BusinessYear | total_plan  
---|---|---|---  
0 | AK | 2014 | 241  
1 | AK | 2015 | 281  
2 | AK | 2016 | 197  
3 | AL | 2014 | 194  
4 | AL | 2015 | 245  
5 | AL | 2016 | 214  
6 | AR | 2014 | 394  
7 | AR | 2015 | 429  
8 | AR | 2016 | 246  
9 | AZ | 2014 | 1307  
10 | AZ | 2015 | 1338  
11 | AZ | 2016 | 700  
12 | DE | 2014 | 151  
13 | DE | 2015 | 220  
14 | DE | 2016 | 231  
15 | FL | 2014 | 1415  
16 | FL | 2015 | 2011  
17 | FL | 2016 | 1704  
18 | GA | 2014 | 476  
19 | GA | 2015 | 1372  
20 | GA | 2016 | 1045  
21 | HI | 2016 | 110  
22 | IA | 2014 | 586  
23 | IA | 2015 | 615  
24 | IA | 2016 | 526  
25 | ID | 2014 | 447  
26 | IL | 2014 | 733  
27 | IL | 2015 | 1763  
28 | IL | 2016 | 1803  
29 | IN | 2014 | 834  
... | ... | ... | ...  
81 | PA | 2014 | 952  
82 | PA | 2015 | 1888  
83 | PA | 2016 | 1368  
84 | SC | 2014 | 302  
85 | SC | 2015 | 828  
86 | SC | 2016 | 687  
87 | SD | 2014 | 264  
88 | SD | 2015 | 357  
89 | SD | 2016 | 222  
90 | TN | 2014 | 461  
91 | TN | 2015 | 879  
92 | TN | 2016 | 733  
93 | TX | 2014 | 829  
94 | TX | 2015 | 2609  
95 | TX | 2016 | 3003  
96 | UT | 2014 | 507  
97 | UT | 2015 | 609  
98 | UT | 2016 | 411  
99 | VA | 2014 | 594  
100 | VA | 2015 | 758  
101 | VA | 2016 | 904  
102 | WI | 2014 | 1604  
103 | WI | 2015 | 2968  
104 | WI | 2016 | 2563  
105 | WV | 2014 | 126  
106 | WV | 2015 | 172  
107 | WV | 2016 | 318  
108 | WY | 2014 | 160  
109 | WY | 2015 | 374  
110 | WY | 2016 | 273  
  
111 rows Ã 3 columns

In [34]:

    
    
    dental_total_plan=dental_plan.merge(total_plan)
    dental_total_plan
    

Out[34]:

| StateCode | BusinessYear | num_dental | total_plan  
---|---|---|---|---  
0 | AK | 2014 | 52 | 241  
1 | AK | 2015 | 58 | 281  
2 | AK | 2016 | 58 | 197  
3 | AL | 2014 | 100 | 194  
4 | AL | 2015 | 101 | 245  
5 | AL | 2016 | 92 | 214  
6 | AR | 2014 | 103 | 394  
7 | AR | 2015 | 82 | 429  
8 | AR | 2016 | 30 | 246  
9 | AZ | 2014 | 161 | 1307  
10 | AZ | 2015 | 156 | 1338  
11 | AZ | 2016 | 142 | 700  
12 | DE | 2014 | 66 | 151  
13 | DE | 2015 | 71 | 220  
14 | DE | 2016 | 65 | 231  
15 | FL | 2014 | 174 | 1415  
16 | FL | 2015 | 138 | 2011  
17 | FL | 2016 | 149 | 1704  
18 | GA | 2014 | 147 | 476  
19 | GA | 2015 | 164 | 1372  
20 | GA | 2016 | 162 | 1045  
21 | HI | 2016 | 20 | 110  
22 | IA | 2014 | 69 | 586  
23 | IA | 2015 | 101 | 615  
24 | IA | 2016 | 68 | 526  
25 | ID | 2014 | 59 | 447  
26 | IL | 2014 | 95 | 733  
27 | IL | 2015 | 107 | 1763  
28 | IL | 2016 | 106 | 1803  
29 | IN | 2014 | 105 | 834  
... | ... | ... | ... | ...  
81 | PA | 2014 | 206 | 952  
82 | PA | 2015 | 218 | 1888  
83 | PA | 2016 | 205 | 1368  
84 | SC | 2014 | 78 | 302  
85 | SC | 2015 | 122 | 828  
86 | SC | 2016 | 111 | 687  
87 | SD | 2014 | 59 | 264  
88 | SD | 2015 | 85 | 357  
89 | SD | 2016 | 63 | 222  
90 | TN | 2014 | 54 | 461  
91 | TN | 2015 | 105 | 879  
92 | TN | 2016 | 102 | 733  
93 | TX | 2014 | 228 | 829  
94 | TX | 2015 | 195 | 2609  
95 | TX | 2016 | 173 | 3003  
96 | UT | 2014 | 55 | 507  
97 | UT | 2015 | 63 | 609  
98 | UT | 2016 | 44 | 411  
99 | VA | 2014 | 175 | 594  
100 | VA | 2015 | 151 | 758  
101 | VA | 2016 | 132 | 904  
102 | WI | 2014 | 56 | 1604  
103 | WI | 2015 | 128 | 2968  
104 | WI | 2016 | 115 | 2563  
105 | WV | 2014 | 73 | 126  
106 | WV | 2015 | 73 | 172  
107 | WV | 2016 | 56 | 318  
108 | WY | 2014 | 55 | 160  
109 | WY | 2015 | 88 | 374  
110 | WY | 2016 | 73 | 273  
  
111 rows Ã 4 columns

Look at medical insurance rate and dental insurance rate separately.

In [35]:

    
    
    medical_rate=pd.read_sql("""select rate.statecode, rate.businessyear, avg(rate.individualrate) as medical_rate
                                from rate
                                inner join planattributes on rate.planid=substr(planattributes.planid, 1,14)
                                where planattributes.dentalonlyplan='No' 
                                group by rate.statecode, rate.businessyear
                                order by rate.statecode;""", conn)
    medical_rate
    

Out[35]:

| StateCode | BusinessYear | medical_rate  
---|---|---|---  
0 | AK | 2014 | 656.080178  
1 | AK | 2015 | 728.765589  
2 | AK | 2016 | 842.657470  
3 | AL | 2014 | 405.271730  
4 | AL | 2015 | 381.534070  
5 | AL | 2016 | 427.718616  
6 | AR | 2014 | 400.995957  
7 | AR | 2015 | 388.348509  
8 | AR | 2016 | 418.047550  
9 | AZ | 2014 | 398.672300  
10 | AZ | 2015 | 425.727427  
11 | AZ | 2016 | 452.269622  
12 | DE | 2014 | 442.077373  
13 | DE | 2015 | 459.760959  
14 | DE | 2016 | 526.001743  
15 | FL | 2014 | 429.299851  
16 | FL | 2015 | 484.414956  
17 | FL | 2016 | 499.932616  
18 | GA | 2014 | 400.107102  
19 | GA | 2015 | 423.859048  
20 | GA | 2016 | 508.724816  
21 | HI | 2016 | 380.290722  
22 | IA | 2014 | 410.545895  
23 | IA | 2015 | 421.464589  
24 | IA | 2016 | 459.882714  
25 | ID | 2014 | 374.879270  
26 | IL | 2014 | 426.868417  
27 | IL | 2015 | 428.129060  
28 | IL | 2016 | 456.648576  
29 | IN | 2014 | 511.172229  
... | ... | ... | ...  
81 | PA | 2014 | 381.143244  
82 | PA | 2015 | 407.778995  
83 | PA | 2016 | 448.881900  
84 | SC | 2014 | 429.219593  
85 | SC | 2015 | 452.727226  
86 | SC | 2016 | 471.280750  
87 | SD | 2014 | 447.848931  
88 | SD | 2015 | 424.188322  
89 | SD | 2016 | 463.834805  
90 | TN | 2014 | 326.073964  
91 | TN | 2015 | 425.085104  
92 | TN | 2016 | 491.086278  
93 | TX | 2014 | 380.761199  
94 | TX | 2015 | 412.892558  
95 | TX | 2016 | 424.755976  
96 | UT | 2014 | 314.602457  
97 | UT | 2015 | 333.186501  
98 | UT | 2016 | 393.327450  
99 | VA | 2014 | 607.983549  
100 | VA | 2015 | 393.550710  
101 | VA | 2016 | 414.704891  
102 | WI | 2014 | 481.781458  
103 | WI | 2015 | 502.979532  
104 | WI | 2016 | 534.207408  
105 | WV | 2014 | 396.449868  
106 | WV | 2015 | 509.338576  
107 | WV | 2016 | 558.498938  
108 | WY | 2014 | 571.143594  
109 | WY | 2015 | 590.678294  
110 | WY | 2016 | 614.962777  
  
111 rows Ã 3 columns

In [36]:

    
    
    dental_rate=pd.read_sql("""select rate.statecode, rate.businessyear, avg(rate.individualrate) as medicine_rate
                                from rate
                                inner join planattributes on rate.planid=substr(planattributes.planid, 1,14)
                                where planattributes.dentalonlyplan='Yes' 
                                group by rate.statecode, rate.businessyear
                                order by rate.statecode;""", conn)
    dental_rate
    

Out[36]:

| StateCode | BusinessYear | medicine_rate  
---|---|---|---  
0 | AK | 2014 | 244913.512181  
1 | AK | 2015 | 33.118977  
2 | AK | 2016 | 37.670703  
3 | AL | 2014 | 63183.319819  
4 | AL | 2015 | 62.850340  
5 | AL | 2016 | 65.164673  
6 | AR | 2014 | 104026.869473  
7 | AR | 2015 | 19.504923  
8 | AR | 2016 | 26.965939  
9 | AZ | 2014 | 53772.274093  
10 | AZ | 2015 | 325.647580  
11 | AZ | 2016 | 303.129771  
12 | DE | 2014 | 31.371226  
13 | DE | 2015 | 76.044604  
14 | DE | 2016 | 79.609358  
15 | FL | 2014 | 204.348748  
16 | FL | 2015 | 195.264767  
17 | FL | 2016 | 194.152566  
18 | GA | 2014 | 42099.569763  
19 | GA | 2015 | 188.644399  
20 | GA | 2016 | 158.801185  
21 | HI | 2016 | 36.928924  
22 | IA | 2014 | 28.290169  
23 | IA | 2015 | 72.965241  
24 | IA | 2016 | 30.828054  
25 | ID | 2014 | 100138.312847  
26 | IL | 2014 | 200.643087  
27 | IL | 2015 | 154.316403  
28 | IL | 2016 | 42.908652  
29 | IN | 2014 | 94049.914837  
... | ... | ... | ...  
81 | PA | 2014 | 39533.491321  
82 | PA | 2015 | 110.685460  
83 | PA | 2016 | 78.403506  
84 | SC | 2014 | 82142.419966  
85 | SC | 2015 | 218.179189  
86 | SC | 2016 | 214.057459  
87 | SD | 2014 | 330494.328043  
88 | SD | 2015 | 22.396972  
89 | SD | 2016 | 23.834759  
90 | TN | 2014 | 187670.068788  
91 | TN | 2015 | 369.967338  
92 | TN | 2016 | 385.032660  
93 | TX | 2014 | 30937.275735  
94 | TX | 2015 | 144.098453  
95 | TX | 2016 | 155.897244  
96 | UT | 2014 | 90544.229748  
97 | UT | 2015 | 927.001011  
98 | UT | 2016 | 22.026291  
99 | VA | 2014 | 145.903309  
100 | VA | 2015 | 142.724604  
101 | VA | 2016 | 108.242131  
102 | WI | 2014 | 365.227971  
103 | WI | 2015 | 173.285372  
104 | WI | 2016 | 116.475897  
105 | WV | 2014 | 22.786014  
106 | WV | 2015 | 76.050548  
107 | WV | 2016 | 74.590898  
108 | WY | 2014 | 218695.998060  
109 | WY | 2015 | 25.481778  
110 | WY | 2016 | 26.422130  
  
111 rows Ã 3 columns

Forgot to exclude the million dollar plans...

In [37]:

    
    
    dental_realrate=pd.read_sql("""select rate.statecode, rate.businessyear, avg(rate.individualrate) as dental_rate
                                from rate
                                inner join planattributes on rate.planid=substr(planattributes.planid, 1,14)
                                where planattributes.dentalonlyplan='Yes' and rate.individualrate !=999999 
                                group by rate.statecode, rate.businessyear
                                order by rate.statecode;""", conn)
    dental_realrate
    

Out[37]:

| StateCode | BusinessYear | dental_rate  
---|---|---|---  
0 | AK | 2014 | 20.921538  
1 | AK | 2015 | 33.118977  
2 | AK | 2016 | 37.670703  
3 | AL | 2014 | 27.206548  
4 | AL | 2015 | 62.850340  
5 | AL | 2016 | 65.164673  
6 | AR | 2014 | 23.225775  
7 | AR | 2015 | 19.504923  
8 | AR | 2016 | 26.965939  
9 | AZ | 2014 | 480.405925  
10 | AZ | 2015 | 325.647580  
11 | AZ | 2016 | 303.129771  
12 | DE | 2014 | 31.371226  
13 | DE | 2015 | 76.044604  
14 | DE | 2016 | 79.609358  
15 | FL | 2014 | 204.348748  
16 | FL | 2015 | 195.264767  
17 | FL | 2016 | 194.152566  
18 | GA | 2014 | 230.116553  
19 | GA | 2015 | 188.644399  
20 | GA | 2016 | 158.801185  
21 | HI | 2016 | 36.928924  
22 | IA | 2014 | 28.290169  
23 | IA | 2015 | 72.965241  
24 | IA | 2016 | 30.828054  
25 | ID | 2014 | 30.201792  
26 | IL | 2014 | 200.643087  
27 | IL | 2015 | 154.316403  
28 | IL | 2016 | 42.908652  
29 | IN | 2014 | 208.375279  
... | ... | ... | ...  
81 | PA | 2014 | 148.894863  
82 | PA | 2015 | 110.685460  
83 | PA | 2016 | 78.403506  
84 | SC | 2014 | 218.031004  
85 | SC | 2015 | 218.179189  
86 | SC | 2016 | 214.057459  
87 | SD | 2014 | 25.842799  
88 | SD | 2015 | 22.396972  
89 | SD | 2016 | 23.834759  
90 | TN | 2014 | 1165.977438  
91 | TN | 2015 | 369.967338  
92 | TN | 2016 | 385.032660  
93 | TX | 2014 | 187.039308  
94 | TX | 2015 | 144.098453  
95 | TX | 2016 | 155.897244  
96 | UT | 2014 | 1960.972905  
97 | UT | 2015 | 927.001011  
98 | UT | 2016 | 22.026291  
99 | VA | 2014 | 145.903309  
100 | VA | 2015 | 142.724604  
101 | VA | 2016 | 108.242131  
102 | WI | 2014 | 365.227971  
103 | WI | 2015 | 173.285372  
104 | WI | 2016 | 116.475897  
105 | WV | 2014 | 22.786014  
106 | WV | 2015 | 76.050548  
107 | WV | 2016 | 74.590898  
108 | WY | 2014 | 47.769905  
109 | WY | 2015 | 25.481778  
110 | WY | 2016 | 26.422130  
  
111 rows Ã 3 columns

In [38]:

    
    
    medical_dental_rate=medical_rate.merge(dental_realrate)
    medical_dental_rate
    

Out[38]:

| StateCode | BusinessYear | medical_rate | dental_rate  
---|---|---|---|---  
0 | AK | 2014 | 656.080178 | 20.921538  
1 | AK | 2015 | 728.765589 | 33.118977  
2 | AK | 2016 | 842.657470 | 37.670703  
3 | AL | 2014 | 405.271730 | 27.206548  
4 | AL | 2015 | 381.534070 | 62.850340  
5 | AL | 2016 | 427.718616 | 65.164673  
6 | AR | 2014 | 400.995957 | 23.225775  
7 | AR | 2015 | 388.348509 | 19.504923  
8 | AR | 2016 | 418.047550 | 26.965939  
9 | AZ | 2014 | 398.672300 | 480.405925  
10 | AZ | 2015 | 425.727427 | 325.647580  
11 | AZ | 2016 | 452.269622 | 303.129771  
12 | DE | 2014 | 442.077373 | 31.371226  
13 | DE | 2015 | 459.760959 | 76.044604  
14 | DE | 2016 | 526.001743 | 79.609358  
15 | FL | 2014 | 429.299851 | 204.348748  
16 | FL | 2015 | 484.414956 | 195.264767  
17 | FL | 2016 | 499.932616 | 194.152566  
18 | GA | 2014 | 400.107102 | 230.116553  
19 | GA | 2015 | 423.859048 | 188.644399  
20 | GA | 2016 | 508.724816 | 158.801185  
21 | HI | 2016 | 380.290722 | 36.928924  
22 | IA | 2014 | 410.545895 | 28.290169  
23 | IA | 2015 | 421.464589 | 72.965241  
24 | IA | 2016 | 459.882714 | 30.828054  
25 | ID | 2014 | 374.879270 | 30.201792  
26 | IL | 2014 | 426.868417 | 200.643087  
27 | IL | 2015 | 428.129060 | 154.316403  
28 | IL | 2016 | 456.648576 | 42.908652  
29 | IN | 2014 | 511.172229 | 208.375279  
... | ... | ... | ... | ...  
81 | PA | 2014 | 381.143244 | 148.894863  
82 | PA | 2015 | 407.778995 | 110.685460  
83 | PA | 2016 | 448.881900 | 78.403506  
84 | SC | 2014 | 429.219593 | 218.031004  
85 | SC | 2015 | 452.727226 | 218.179189  
86 | SC | 2016 | 471.280750 | 214.057459  
87 | SD | 2014 | 447.848931 | 25.842799  
88 | SD | 2015 | 424.188322 | 22.396972  
89 | SD | 2016 | 463.834805 | 23.834759  
90 | TN | 2014 | 326.073964 | 1165.977438  
91 | TN | 2015 | 425.085104 | 369.967338  
92 | TN | 2016 | 491.086278 | 385.032660  
93 | TX | 2014 | 380.761199 | 187.039308  
94 | TX | 2015 | 412.892558 | 144.098453  
95 | TX | 2016 | 424.755976 | 155.897244  
96 | UT | 2014 | 314.602457 | 1960.972905  
97 | UT | 2015 | 333.186501 | 927.001011  
98 | UT | 2016 | 393.327450 | 22.026291  
99 | VA | 2014 | 607.983549 | 145.903309  
100 | VA | 2015 | 393.550710 | 142.724604  
101 | VA | 2016 | 414.704891 | 108.242131  
102 | WI | 2014 | 481.781458 | 365.227971  
103 | WI | 2015 | 502.979532 | 173.285372  
104 | WI | 2016 | 534.207408 | 116.475897  
105 | WV | 2014 | 396.449868 | 22.786014  
106 | WV | 2015 | 509.338576 | 76.050548  
107 | WV | 2016 | 558.498938 | 74.590898  
108 | WY | 2014 | 571.143594 | 47.769905  
109 | WY | 2015 | 590.678294 | 25.481778  
110 | WY | 2016 | 614.962777 | 26.422130  
  
111 rows Ã 4 columns

Does the rate has any relationship with age? First look at how many age groups
are there?

In [39]:

    
    
    age_rate=pd.read_sql("""select distinct (age) from rate;""", conn)
    age_rate
    

Out[39]:

| Age  
---|---  
0 | 0-20  
1 | Family Option  
2 | 21  
3 | 22  
4 | 23  
5 | 24  
6 | 25  
7 | 26  
8 | 27  
9 | 28  
10 | 29  
11 | 30  
12 | 31  
13 | 32  
14 | 33  
15 | 34  
16 | 35  
17 | 36  
18 | 37  
19 | 38  
20 | 39  
21 | 40  
22 | 41  
23 | 42  
24 | 43  
25 | 44  
26 | 45  
27 | 46  
28 | 47  
29 | 48  
30 | 49  
31 | 50  
32 | 51  
33 | 52  
34 | 53  
35 | 54  
36 | 55  
37 | 56  
38 | 57  
39 | 58  
40 | 59  
41 | 60  
42 | 61  
43 | 62  
44 | 63  
45 | 64  
46 | 65 and over  
  
In [40]:

    
    
    rate_age=pd.read_sql("""select avg(individualrate) as rate, age
                            from rate
                            where individualrate !=999999
                            group by age
                            ;""", conn)
    rate_age
    

Out[40]:

| rate | Age  
---|---|---  
0 | 122.255943 | 0-20  
1 | 222.825670 | 21  
2 | 222.892517 | 22  
3 | 222.971821 | 23  
4 | 223.065340 | 24  
5 | 223.613431 | 25  
6 | 227.144294 | 26  
7 | 231.314342 | 27  
8 | 238.036521 | 28  
9 | 243.621318 | 29  
10 | 246.441819 | 30  
11 | 250.639422 | 31  
12 | 254.837197 | 32  
13 | 257.471734 | 33  
14 | 260.276442 | 34  
15 | 261.750142 | 35  
16 | 263.160615 | 36  
17 | 264.589205 | 37  
18 | 266.028661 | 38  
19 | 268.857086 | 39  
20 | 271.734013 | 40  
21 | 275.967345 | 41  
22 | 280.033084 | 42  
23 | 285.675437 | 43  
24 | 292.710350 | 44  
25 | 301.118284 | 45  
26 | 310.952963 | 46  
27 | 321.986220 | 47  
28 | 334.596024 | 48  
29 | 347.024492 | 49  
30 | 361.068879 | 50  
31 | 374.894517 | 51  
32 | 390.108350 | 52  
33 | 405.499592 | 53  
34 | 422.109329 | 54  
35 | 438.945512 | 55  
36 | 456.935933 | 56  
37 | 475.117970 | 57  
38 | 494.501979 | 58  
39 | 504.277592 | 59  
40 | 523.394323 | 60  
41 | 539.911002 | 61  
42 | 550.763318 | 62  
43 | 564.360322 | 63  
44 | 572.616903 | 64  
45 | 572.751853 | 65 and over  
46 | 28.528600 | Family Option  
  
In [41]:

    
    
    fig, ax=plt.subplots(figsize=[20, 5])
    sns.barplot(x='Age', y='rate', data=rate_age)
    

Out[41]:

    
    
    <matplotlib.axes._subplots.AxesSubplot at 0x7f07433e4128>

![](__results___files/__results___72_1.png)

The average rate definietly goes up with age. Is it true for both medical and
dental rate?

In [42]:

    
    
    medical_rate_age=pd.read_sql("""select rate.statecode, avg(rate.individualrate) as medical_rate, rate.age
                                from rate
                                inner join planattributes on rate.planid=substr(planattributes.planid, 1,14)
                                where planattributes.dentalonlyplan='No' 
                                group by rate.statecode, rate.age
                                order by rate.statecode;""", conn)
    medical_rate_age
    

Out[42]:

| StateCode | medical_rate | Age  
---|---|---|---  
0 | AK | 287.268880 | 0-20  
1 | AK | 452.436965 | 21  
2 | AK | 452.436965 | 22  
3 | AK | 452.436965 | 23  
4 | AK | 452.436965 | 24  
5 | AK | 454.211556 | 25  
6 | AK | 463.233955 | 26  
7 | AK | 474.112276 | 27  
8 | AK | 491.740414 | 28  
9 | AK | 506.229902 | 29  
10 | AK | 513.470763 | 30  
11 | AK | 524.324867 | 31  
12 | AK | 535.188430 | 32  
13 | AK | 541.955736 | 33  
14 | AK | 549.196543 | 34  
15 | AK | 552.825442 | 35  
16 | AK | 556.443951 | 36  
17 | AK | 560.053479 | 37  
18 | AK | 563.670233 | 38  
19 | AK | 570.903501 | 39  
20 | AK | 578.149593 | 40  
21 | AK | 589.010480 | 41  
22 | AK | 599.397550 | 42  
23 | AK | 613.880872 | 43  
24 | AK | 632.004464 | 44  
25 | AK | 653.242475 | 45  
26 | AK | 678.566274 | 46  
27 | AK | 707.062148 | 47  
28 | AK | 739.656049 | 48  
29 | AK | 771.793555 | 49  
... | ... | ... | ...  
1764 | WY | 444.686173 | 36  
1765 | WY | 447.578622 | 37  
1766 | WY | 450.468423 | 38  
1767 | WY | 456.254236 | 39  
1768 | WY | 462.037732 | 40  
1769 | WY | 470.716396 | 41  
1770 | WY | 479.034128 | 42  
1771 | WY | 490.600232 | 43  
1772 | WY | 505.063464 | 44  
1773 | WY | 522.055588 | 45  
1774 | WY | 542.301480 | 46  
1775 | WY | 565.079590 | 47  
1776 | WY | 591.109405 | 48  
1777 | WY | 616.781439 | 49  
1778 | WY | 645.705700 | 50  
1779 | WY | 674.267045 | 51  
1780 | WY | 705.721991 | 52  
1781 | WY | 737.537883 | 53  
1782 | WY | 771.886194 | 54  
1783 | WY | 806.232092 | 55  
1784 | WY | 843.471331 | 56  
1785 | WY | 881.071518 | 57  
1786 | WY | 921.203653 | 58  
1787 | WY | 941.088912 | 59  
1788 | WY | 981.221205 | 60  
1789 | WY | 1015.928200 | 61  
1790 | WY | 1038.706518 | 62  
1791 | WY | 1067.268306 | 63  
1792 | WY | 1084.593532 | 64  
1793 | WY | 1084.593532 | 65 and over  
  
1794 rows Ã 3 columns

In [43]:

    
    
    medical_rate_age=medical_rate_age.pivot(index= 'StateCode', columns= 'Age', values='medical_rate')
    medical_rate_age.head()
    

Out[43]:

Age | 0-20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 and over  
---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---  
StateCode |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   
AK | 287.268880 | 452.436965 | 452.436965 | 452.436965 | 452.436965 | 454.211556 | 463.233955 | 474.112276 | 491.740414 | 506.229902 | 513.470763 | 524.324867 | 535.188430 | 541.955736 | 549.196543 | 552.825442 | 556.443951 | 560.053479 | 563.670233 | 570.903501 | 578.149593 | 589.010480 | 599.397550 | 613.880872 | 632.004464 | 653.242475 | 678.566274 | 707.062148 | 739.656049 | 771.793555 | 807.980560 | 843.724798 | 883.066459 | 922.861999 | 965.824006 | 1008.822657 | 1055.409142 | 1102.463155 | 1152.699477 | 1177.581578 | 1227.772141 | 1271.205216 | 1299.693391 | 1335.460625 | 1357.109811 | 1357.109811  
AL | 155.854465 | 245.440270 | 245.440270 | 245.440270 | 245.440270 | 246.421843 | 251.330323 | 257.220740 | 266.793136 | 274.647199 | 278.574247 | 284.464836 | 290.355152 | 294.036752 | 297.963944 | 299.927220 | 301.891157 | 303.854295 | 305.818055 | 309.745107 | 313.672112 | 319.562702 | 325.207619 | 333.062038 | 342.879687 | 354.415178 | 368.160415 | 383.622348 | 401.294131 | 418.720378 | 438.355568 | 457.745287 | 479.098672 | 500.696967 | 524.014414 | 547.330841 | 572.611236 | 598.136798 | 625.380870 | 638.879553 | 666.123563 | 689.685722 | 705.148303 | 724.538338 | 736.316869 | 736.316869  
AR | 155.011769 | 244.116809 | 244.116809 | 244.116809 | 244.116809 | 245.089525 | 249.971621 | 255.830562 | 265.350914 | 273.162678 | 277.068486 | 282.927136 | 288.785892 | 292.447401 | 296.353402 | 298.306141 | 300.259097 | 302.212093 | 304.164945 | 308.070723 | 311.976567 | 317.835303 | 323.449734 | 331.261687 | 341.025754 | 352.499067 | 366.169721 | 381.548728 | 399.124846 | 416.456808 | 435.985777 | 455.270673 | 476.508513 | 497.990683 | 521.181579 | 544.372196 | 569.515787 | 594.903552 | 622.000161 | 635.426443 | 662.522942 | 685.957515 | 701.336962 | 720.621773 | 732.336600 | 732.336600  
AZ | 161.322441 | 254.053209 | 254.053131 | 254.053131 | 254.053131 | 255.067394 | 260.149923 | 266.247667 | 276.152820 | 284.284744 | 288.349006 | 294.446280 | 300.544943 | 304.354287 | 308.418869 | 310.451443 | 312.481739 | 314.517382 | 316.547028 | 320.614625 | 324.678973 | 330.776281 | 336.615428 | 344.747246 | 354.910212 | 366.852392 | 381.077610 | 397.084424 | 415.373461 | 433.411321 | 453.734536 | 473.804041 | 495.907799 | 518.263791 | 542.399368 | 566.533284 | 592.700138 | 619.124190 | 647.322930 | 661.293028 | 689.496115 | 713.882449 | 729.886868 | 749.959549 | 762.140099 | 762.140099  
DE | 185.461096 | 292.064851 | 292.064851 | 292.064851 | 292.064851 | 293.233135 | 299.074308 | 306.083492 | 317.474477 | 326.820204 | 331.493577 | 338.503110 | 345.512710 | 349.893611 | 354.566975 | 356.903203 | 359.240008 | 361.576500 | 363.912948 | 368.585760 | 373.258743 | 380.268216 | 386.985735 | 396.331997 | 408.014817 | 421.741920 | 438.098980 | 456.497358 | 477.525871 | 498.262506 | 521.627545 | 544.700467 | 570.110790 | 595.811546 | 623.558284 | 651.304843 | 681.386780 | 711.761784 | 744.180986 | 760.244172 | 792.663755 | 820.701589 | 839.101801 | 862.175497 | 876.120433 | 876.120433  
  
In [44]:

    
    
    fig, ax=plt.subplots(figsize=[20,10])
    sns.heatmap(medical_rate_age)
    

Out[44]:

    
    
    <matplotlib.axes._subplots.AxesSubplot at 0x7f07319eb438>

![](__results___files/__results___76_1.png)

It seems for medical insurance, the rate is positively related with age.
especially in some states like AK, WY, NJ and NC, the medical rate is higher
than other states.

In [45]:

    
    
    dental_realrate_age=pd.read_sql("""select rate.statecode,  avg(rate.individualrate) as dental_rate, rate.age
                                from rate
                                inner join planattributes on rate.planid=substr(planattributes.planid, 1,14)
                                where planattributes.dentalonlyplan='Yes' and rate.individualrate !=999999 
                                group by rate.statecode, rate.age
                                order by rate.statecode;""", conn)
    dental_realrate_age
    

Out[45]:

| StateCode | dental_rate | Age  
---|---|---|---  
0 | AK | 54.690765 | 0-20  
1 | AK | 31.141905 | 21  
2 | AK | 31.141905 | 22  
3 | AK | 31.141905 | 23  
4 | AK | 31.141905 | 24  
5 | AK | 31.074060 | 25  
6 | AK | 32.578476 | 26  
7 | AK | 32.578476 | 27  
8 | AK | 32.578476 | 28  
9 | AK | 32.578476 | 29  
10 | AK | 32.556005 | 30  
11 | AK | 32.556005 | 31  
12 | AK | 32.556005 | 32  
13 | AK | 32.556005 | 33  
14 | AK | 32.556005 | 34  
15 | AK | 32.577254 | 35  
16 | AK | 32.577254 | 36  
17 | AK | 32.577254 | 37  
18 | AK | 32.577254 | 38  
19 | AK | 32.577254 | 39  
20 | AK | 32.594481 | 40  
21 | AK | 32.594481 | 41  
22 | AK | 32.594481 | 42  
23 | AK | 32.594481 | 43  
24 | AK | 32.594481 | 44  
25 | AK | 32.657911 | 45  
26 | AK | 32.657911 | 46  
27 | AK | 32.657911 | 47  
28 | AK | 32.657911 | 48  
29 | AK | 32.657911 | 49  
... | ... | ... | ...  
1800 | WY | 27.591115 | 37  
1801 | WY | 27.591115 | 38  
1802 | WY | 27.591115 | 39  
1803 | WY | 27.608599 | 40  
1804 | WY | 27.608599 | 41  
1805 | WY | 27.608599 | 42  
1806 | WY | 27.608599 | 43  
1807 | WY | 27.608599 | 44  
1808 | WY | 27.917293 | 45  
1809 | WY | 27.917293 | 46  
1810 | WY | 27.917293 | 47  
1811 | WY | 27.917293 | 48  
1812 | WY | 27.917293 | 49  
1813 | WY | 29.115892 | 50  
1814 | WY | 29.115892 | 51  
1815 | WY | 29.115892 | 52  
1816 | WY | 29.115892 | 53  
1817 | WY | 29.115892 | 54  
1818 | WY | 29.628662 | 55  
1819 | WY | 29.628662 | 56  
1820 | WY | 29.628662 | 57  
1821 | WY | 29.628662 | 58  
1822 | WY | 29.628662 | 59  
1823 | WY | 29.696879 | 60  
1824 | WY | 29.696879 | 61  
1825 | WY | 29.696879 | 62  
1826 | WY | 29.696879 | 63  
1827 | WY | 29.696879 | 64  
1828 | WY | 32.025892 | 65 and over  
1829 | WY | 33.840970 | Family Option  
  
1830 rows Ã 3 columns

In [46]:

    
    
    dental_realrate_age=dental_realrate_age.pivot(index= 'StateCode', columns= 'Age', values='dental_rate')
    dental_realrate_age.head()
    

Out[46]:

Age | 0-20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 and over | Family Option  
---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---  
StateCode |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   
AK | 54.690765 | 31.141905 | 31.141905 | 31.141905 | 31.141905 | 31.074060 | 32.578476 | 32.578476 | 32.578476 | 32.578476 | 32.556005 | 32.556005 | 32.556005 | 32.556005 | 32.556005 | 32.577254 | 32.577254 | 32.577254 | 32.577254 | 32.577254 | 32.594481 | 32.594481 | 32.594481 | 32.594481 | 32.594481 | 32.657911 | 32.657911 | 32.657911 | 32.657911 | 32.657911 | 32.707937 | 32.707937 | 32.707937 | 32.707937 | 32.707937 | 33.127937 | 33.127937 | 33.127937 | 33.127937 | 33.127937 | 33.194757 | 33.194757 | 33.194757 | 33.194757 | 33.194757 | 37.849054 | 49.343333  
AL | 24.317918 | 52.334184 | 52.362755 | 52.391327 | 52.419898 | 52.427291 | 52.783446 | 52.831819 | 52.860390 | 52.888962 | 52.910462 | 52.939033 | 52.967604 | 52.996176 | 53.024747 | 53.059890 | 53.088462 | 53.117033 | 53.145604 | 53.174176 | 53.253712 | 53.282283 | 53.310854 | 53.339426 | 53.367997 | 53.416497 | 53.445069 | 53.473640 | 53.502212 | 53.530783 | 53.632122 | 53.660694 | 53.689265 | 53.717837 | 53.746408 | 53.987658 | 54.016229 | 54.044801 | 54.073372 | 54.101944 | 54.160174 | 54.188746 | 54.217317 | 54.245889 | 54.281317 | 55.260293 | 27.267829  
AR | 25.435263 | 21.854559 | 21.854559 | 21.854559 | 21.854559 | 21.807512 | 22.221520 | 22.221520 | 22.221520 | 22.221520 | 22.205614 | 22.205614 | 22.205614 | 22.205614 | 22.205614 | 22.219372 | 22.219372 | 22.219372 | 22.219372 | 22.219372 | 22.377157 | 22.377157 | 22.377157 | 22.377157 | 22.377157 | 22.420110 | 22.420110 | 22.420110 | 22.420110 | 22.420110 | 22.454204 | 22.454204 | 22.454204 | 22.454204 | 22.454204 | 22.949650 | 22.949650 | 22.949650 | 22.949650 | 22.949650 | 22.995221 | 22.995221 | 22.995221 | 22.995221 | 22.995221 | 24.258078 | 30.028499  
AZ | 31.042206 | 364.367834 | 364.482834 | 364.597834 | 364.712834 | 364.885793 | 365.311693 | 365.442970 | 365.557970 | 365.672970 | 365.791720 | 365.906720 | 366.021720 | 366.136720 | 366.251720 | 366.790732 | 366.905732 | 367.020732 | 367.135732 | 367.250732 | 367.448161 | 367.563161 | 367.678161 | 367.793161 | 367.908161 | 368.061973 | 368.176973 | 368.291973 | 368.406973 | 368.521973 | 369.000243 | 369.115243 | 369.230243 | 369.345243 | 369.460243 | 369.783825 | 369.898825 | 370.013825 | 370.128825 | 370.243825 | 370.502698 | 370.617698 | 370.732698 | 370.847698 | 370.974182 | 372.060650 | 32.784407  
DE | 30.013103 | 62.713996 | 62.749710 | 62.785424 | 62.821138 | 62.856853 | 62.892567 | 62.928281 | 62.963996 | 62.999710 | 63.713013 | 63.748728 | 63.784442 | 63.820156 | 63.855871 | 63.891585 | 63.927299 | 63.963013 | 63.998728 | 64.034442 | 64.070156 | 64.105871 | 64.141585 | 64.177299 | 64.213013 | 64.248728 | 65.209152 | 65.244866 | 65.280580 | 65.316295 | 65.352009 | 65.387723 | 65.423438 | 65.459152 | 65.494866 | 65.530580 | 65.566295 | 65.602009 | 65.637723 | 65.673438 | 65.709152 | 65.744866 | 65.780580 | 65.816295 | 65.852009 | 65.887723 | 38.815625  
  
In [47]:

    
    
    fig, (axes1, axes2)=plt.subplots(2,1,figsize=[20,20])
    sns.heatmap(medical_rate_age, ax=axes1)
    sns.heatmap(dental_realrate_age, ax=axes2)
    

Out[47]:

    
    
    <matplotlib.axes._subplots.AxesSubplot at 0x7f072edaaf60>

![](__results___files/__results___80_1.png)

Surprisingly dental insurance rate has no relationship with age... And some
states have super high level, like UT Let's take a look at dental plans in UT

In [48]:

    
    
    dental_UT=pd.read_sql("""select rate.planid, rate.individualrate as dental_rate
                                from rate
                                inner join planattributes on rate.planid=substr(planattributes.planid, 1,14)
                                where planattributes.statecode= 'UT' and planattributes.dentalonlyplan='Yes'
                                group by rate.planid
                                order by dental_rate desc;""", conn)
    dental_UT
    

Out[48]:

| PlanId | dental_rate  
---|---|---  
0 | 42757UT0020001 | 999999.00  
1 | 42757UT0020002 | 999999.00  
2 | 40335UT0110001 | 9999.99  
3 | 40335UT0120001 | 9999.99  
4 | 42757UT0020003 | 68.06  
5 | 42757UT0020004 | 63.86  
6 | 42757UT0020005 | 63.86  
7 | 42757UT0020006 | 63.86  
8 | 72660UT0010004 | 52.87  
9 | 71246UT0010004 | 52.04  
10 | 40335UT0010001 | 50.50  
11 | 68809UT0010003 | 50.08  
12 | 68809UT0010005 | 50.08  
13 | 46958UT0460001 | 42.20  
14 | 87169UT0020001 | 40.93  
15 | 40335UT0030001 | 39.50  
16 | 87169UT0010001 | 39.24  
17 | 68809UT0010004 | 35.88  
18 | 68809UT0010006 | 35.88  
19 | 68809UT0010009 | 32.97  
20 | 68809UT0010002 | 31.10  
21 | 40335UT0020001 | 30.00  
22 | 14948UT0010004 | 28.99  
23 | 72660UT0010006 | 27.74  
24 | 71246UT0010006 | 27.31  
25 | 87169UT0010002 | 27.05  
26 | 87169UT0020002 | 26.76  
27 | 46958UT0470001 | 23.60  
28 | 14948UT0010006 | 21.49  
29 | 80251UT0010005 | 20.20  
30 | 80251UT0010003 | 19.97  
31 | 80251UT0010002 | 17.44  
32 | 80251UT0010006 | 16.05  
33 | 80251UT0010004 | 15.42  
34 | 68809UT0010001 | 14.83  
35 | 71246UT0010002 | 13.56  
36 | 14948UT0010002 | 13.49  
37 | 80251UT0010001 | 13.47  
38 | 14948UT0010001 | 11.49  
39 | 72660UT0010001 | 10.38  
40 | 71246UT0010001 | 10.04  
41 | 68781UT0180006 | 10.00  
42 | 68781UT0180004 | 8.00  
43 | 68781UT0180005 | 8.00  
44 | 68781UT0180002 | 7.00  
45 | 68781UT0180003 | 7.00  
46 | 68781UT0180001 | 6.00  
  
So besides millions dollar plans, UT has 10,000 dollar dental plans...

In [49]:

    
    
    dental_wy=pd.read_sql("""select rate.planid, rate.individualrate as dental_rate
                                from rate
                                inner join planattributes on rate.planid=substr(planattributes.planid, 1,14)
                                where planattributes.statecode= 'WY' and planattributes.dentalonlyplan='Yes'
                                group by rate.planid
                                ORDER BY dental_rate desc;""", conn)
    dental_wy
    

Out[49]:

| PlanId | dental_rate  
---|---|---  
0 | 47731WY0020001 | 999999.00  
1 | 47731WY0020002 | 999999.00  
2 | 47731WY0030001 | 999999.00  
3 | 47731WY0030002 | 999999.00  
4 | 38921WY0010001 | 99.00  
5 | 38921WY0020001 | 99.00  
6 | 83964WY0010002 | 64.99  
7 | 83964WY0010004 | 64.99  
8 | 47731WY0020003 | 64.04  
9 | 83964WY0010001 | 53.87  
10 | 83964WY0010003 | 53.87  
11 | 47731WY0020004 | 53.25  
12 | 47731WY0010007 | 52.86  
13 | 44450WY0020010 | 51.46  
14 | 44450WY0010010 | 51.05  
15 | 62081WY0030001 | 50.95  
16 | 62081WY0040001 | 50.95  
17 | 47731WY0020005 | 50.68  
18 | 47731WY0030003 | 48.63  
19 | 90776WY0030002 | 48.30  
20 | 76197WY0030002 | 48.16  
21 | 54763WY0030002 | 47.50  
22 | 47731WY0010008 | 47.17  
23 | 47731WY0010009 | 47.17  
24 | 46998WY0010003 | 46.98  
25 | 76197WY0040001 | 46.53  
26 | 48887WY0010002 | 46.38  
27 | 83964WY0020004 | 45.68  
28 | 46998WY0010001 | 45.55  
29 | 80132WY0020001 | 45.38  
... | ... | ...  
63 | 48887WY0010006 | 32.47  
64 | 37378WY0010007 | 31.91  
65 | 37378WY0010003 | 31.68  
66 | 37378WY0010004 | 31.46  
67 | 14609WY0010002 | 31.00  
68 | 47731WY0030006 | 30.94  
69 | 80132WY0020002 | 30.92  
70 | 80132WY0040002 | 30.92  
71 | 47731WY0010012 | 30.80  
72 | 62081WY0010001 | 30.41  
73 | 47731WY0010002 | 30.30  
74 | 80132WY0050002 | 29.73  
75 | 80132WY0060002 | 29.73  
76 | 48887WY0010003 | 28.80  
77 | 37378WY0010006 | 28.30  
78 | 90776WY0030001 | 28.19  
79 | 54763WY0030001 | 27.72  
80 | 80132WY0010002 | 27.05  
81 | 46998WY0020002 | 26.22  
82 | 80132WY0030002 | 25.79  
83 | 48887WY0010007 | 25.49  
84 | 48887WY0010008 | 25.49  
85 | 38921WY0050001 | 24.90  
86 | 38921WY0060001 | 24.90  
87 | 44450WY0020007 | 24.13  
88 | 44450WY0020009 | 24.13  
89 | 44450WY0010007 | 23.93  
90 | 44450WY0010009 | 23.93  
91 | 90776WY0040001 | 22.29  
92 | 54763WY0040001 | 21.92  
  
93 rows Ã 2 columns

So WY state has only million dollar super dental plan. There is no 10,000
dollar dental rate. That's why the average dental rate is so low in WY.

Keep updating!

