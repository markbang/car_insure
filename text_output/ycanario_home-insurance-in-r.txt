# **R Project**¶

### Yabir Canario¶

#### Universite de Technologie de Troyes¶

This is my R Notebook, here i will try and gain some insights using the Home
Insurance (HI) dataset that i previously converted in csv format (i will name
it Model_Data for this project's purpouse). This dataset is composed of
**256,136** insurances collected from a Customer Relationship Management (CRM)
using the Cross Industry Standard Process for Data Mining (CRISP-DM).

HI is a dataset that keeps all the significant characteristics of a house, the
zone, the privileges, the faults, the risk indicators and so on. It was
created in Microsoft Office Access.

For the techniques, models, machine learning, beautify and visuaization i will
be using R, Rattle and the following libraries:

In [1]:

    
    
    library(readr) # CSV fxile I/O, e.g. the read_csv function
    library(knitr)
    library(car)
    library(data.table)
    library(plotrix)
    library(ggplot2)
    library(magrittr)
    library(ggpubr)
    library(lubridate)
    
    
    
    Attaching package: âlubridateâ
    
    The following objects are masked from âpackage:data.tableâ:
    
        hour, isoweek, mday, minute, month, quarter, second, wday, week,
        yday, year
    
    The following object is masked from âpackage:baseâ:
    
        date
    
    

Creating a data table from the Home Insurance dataset as Model_Data:

In [2]:

    
    
    Model_Data <- data.table(read.csv("../input/home_insurance.csv", header=TRUE, sep=",", na.strings=c("NA", "NULL")))
    

Showing the 6 first records of the Home Insurance to get more familiar with
the data

In [3]:

    
    
    t(head(Model_Data))
    

QUOTE_DATE| 11/22/2007| 11/22/2007| 11/23/2007| 11/23/2007| 11/22/2007|
11/22/2007  
---|---|---|---|---|---|---  
COVER_START| 22/11/2007| 01/01/2008| 23/11/2007| 12/12/2007| 15/12/2007|
01/12/2007  
CLAIM3YEARS| N | N | N | N | N | N   
P1_EMP_STATUS| R | E | E | R | R | R   
P1_PT_EMP_STATUS|  |  |  |  |  |   
BUS_USE| N | Y | N | N | N | N   
CLERICAL|  | N |  |  |  |   
AD_BUILDINGS| Y | Y | N | N | Y | N   
RISK_RATED_AREA_B| 19 | 25 | NA | NA |  5 | NA   
SUM_INSURED_BUILDINGS| 1000000 | 1000000 |  0 |  0 | 1000000 |  0   
NCD_GRANTED_YEARS_B| 7 | 6 | 0 | 0 | 7 | 0   
AD_CONTENTS| Y | Y | Y | Y | Y | Y   
RISK_RATED_AREA_C|  6 |  9 | 12 | 14 | 10 |  8   
SUM_INSURED_CONTENTS| 50000 | 50000 | 50000 | 50000 | 50000 | 50000   
NCD_GRANTED_YEARS_C| 7 | 7 | 7 | 7 | 7 | 7   
CONTENTS_COVER| Y | Y | N | N | Y | N   
BUILDINGS_COVER| Y | Y | Y | Y | Y | Y   
SPEC_SUM_INSURED| 7500 |  0 |  0 |  0 |  0 |  0   
SPEC_ITEM_PREM| 44.42 |  0.00 |  0.00 |  0.00 |  0.00 |  0.00   
UNSPEC_HRP_PREM| 12.45 | 24.60 |  0.00 |  0.00 | 19.82 |  0.00   
P1_DOB| 15/06/1939| 20/05/1970| 10/06/1947| 16/12/1925| 11/02/1936| 03/09/1935  
P1_MAR_STATUS| O | M | S | W | M | M   
P1_POLICY_REFUSED| N | N | N | N | N | N   
P1_SEX| M | M | M | F | M | M   
APPR_ALARM| N | N | Y | N | Y | N   
APPR_LOCKS| Y | N | Y | Y | Y | N   
BEDROOMS| 3 | 3 | 2 | 2 | 3 | 1   
ROOF_CONSTRUCTION| 11 | 11 | 11 | 11 | 11 | 11   
WALL_CONSTRUCTION| 15 | 15 | 15 | 15 | 15 | 15   
FLOODING| Y | Y | Y | Y | Y | Y   
â®| â®| â®| â®| â®| â®| â®  
PROP_TYPE| 10 |  2 |  9 | 19 |  1 |  7   
SAFE_INSTALLED| Y | N | N | N | N | N   
SEC_DISC_REQ| Y | N | Y | Y | Y | N   
SUBSIDENCE| N | N | N | N | N | N   
YEARBUILT| 1960 | 1960 | 1946 | 1870 | 1960 | 1960   
CAMPAIGN_DESC| NA | NA | NA | NA | NA | NA   
PAYMENT_METHOD| PureDD | PureDD | PureDD | NonDD | DD-Other | PureDD   
PAYMENT_FREQUENCY| NA | NA | NA | NA | NA | NA   
LEGAL_ADDON_PRE_REN| N | Y | Y | N | Y | N   
LEGAL_ADDON_POST_REN| N | Y | Y | N | Y | N   
HOME_EM_ADDON_PRE_REN| N | N | N | N | N | N   
HOME_EM_ADDON_POST_REN| N | N | N | N | N | N   
GARDEN_ADDON_PRE_REN| N | N | N | N | Y | N   
GARDEN_ADDON_POST_REN| N | N | N | N | Y | N   
KEYCARE_ADDON_PRE_REN| N | N | N | N | N | N   
KEYCARE_ADDON_POST_REN| N | N | N | N | N | N   
HP1_ADDON_PRE_REN| N | N | N | N | N | N   
HP1_ADDON_POST_REN| N | N | N | N | N | N   
HP2_ADDON_PRE_REN| N | N | N | N | N | N   
HP2_ADDON_POST_REN| N | N | N | N | N | N   
HP3_ADDON_PRE_REN| N | N | N | N | N | N   
HP3_ADDON_POST_REN| N | N | N | N | N | N   
MTA_FLAG| N | Y | Y | N | N | N   
MTA_FAP| NA | 308.83 |  52.65 | NA | NA | NA   
MTA_APRP| NA | -9.27 | 52.65 | NA | NA | NA   
MTA_DATE|  |  | 03/11/2010|  |  |   
LAST_ANN_PREM_GROSS| 274.81 | 308.83 |  52.65 |  54.23 | 244.58 |  51.45   
POL_STATUS| Lapsed | Live | Live | Live | Live | Live   
i| 1 | 2 | 3 | 4 | 5 | 6   
Police| P000001 | P000002 | P000003 | P000004 | P000005 | P000006   
  
I will start by removing the features that are not useful.

In [4]:

    
    
    Model_Data$CAMPAIGN_DESC <- NULL
    Model_Data$i <- NULL
    #t(head(Model_Data, 8))
    

# **Understanding the Data**¶

## **Features**¶

  * **QUOTE_DATE:** Day where the quotation was made
  * **COVER_START:** Beginning of the cover payment
  * **CLAIM3YEARS:** 3 last years loss
  * **P1_EMP_STATUS:** Client's professional status
  * **P1_PT_EMP_STATUS:** Client's part-time professional status
  * **BUS_USE:** Commercial use indicator
  * **CLERICAL:** Administration office usage indicator
  * **AD_BUILDINGS:** Building coverage - Self damage
  * **RISK_RATED_AREA_B:** Geographical Classification of Risk - Building
  * **SUM_INSURED_BUILDINGS:** Assured Sum - Building
  * **NCD_GRANTED_YEARS_B:** Bonus Malus - Building
  * **AD_CONTENTS:** Coverage of personal items - Self Damage
  * **RISK_RATED_AREA_C:** Geographical Classification of Risk - Personal Objects
  * **SUM_INSURED_CONTENTS:** Assured Sum - Personal Items
  * **NCD_GRANTED_YEARS_C:** Malus Bonus - Personal Items
  * **CONTENTS_COVER:** Coverage - Personal Objects indicator
  * **BUILDINGS_COVER:** Cover - Building indicator
  * **SPEC_SUM_INSURED:** Assured Sum - Valuable Personal Property
  * **SPEC_ITEM_PREM:** Premium - Personal valuable items
  * **UNSPEC_HRP_PREM:** Unknown
  * **P1_DOB:** Date of birth of the client
  * **P1_MAR_STATUS:** Marital status of the client
  * **P1_POLICY_REFUSED:** Policy Emission Denial Indicator
  * **P1_SEX:** customer sex
  * **APPR_ALARM:** Appropriate alarm
  * **APPR_LOCKS:** Appropriate lock
  * **BEDROOMS:** Number of bedrooms
  * **ROOF_CONSTRUCTION:** Code of the type of construction of the roof
  * **WALL_CONSTRUCTION:** Code of the type of wall construction
  * **FLOODING:** House susceptible to floods
  * **LISTED:** National Heritage Building
  * **MAX_DAYS_UNOCC:** Number of days unoccupied
  * **NEIGH_WATCH:** Vigils of proximity present
  * **OCC_STATUS:** Occupancy status
  * **OWNERSHIP_TYPE:** Type of membership
  * **PAYING_GUESTS:** Presence of paying guests
  * **PROP_TYPE:** Type of property
  * **SAFE_INSTALLED:** Safe installs
  * **SEC_DISC_REQ:** Reduction of premium for security
  * **SUBSIDENCE:** Subsidence indicator (relative downwards motion of the surface ) 
  * **YEARBUILT:** Year of construction
  * **CAMPAIGN_DESC:** Description of the marketing campaign
  * **PAYMENT_METHOD:** Method of payment
  * **PAYMENT_FREQUENCY:** Frequency of payment
  * **LEGAL_ADDON_PRE_REN:** Option "Legal Fees" included before 1st renewal
  * **LEGAL_ADDON_POST_REN:** Option "Legal Fees" included after 1st renewal
  * **HOME_EM_ADDON_PRE_REN:** "Emergencies" option included before 1st renewal
  * **HOME_EM_ADDON_POST_REN:** Option "Emergencies" included after 1st renewal
  * **GARDEN_ADDON_PRE_REN:** Option "Gardens" included before 1st renewal
  * **GARDEN_ADDON_POST_REN:** Option "Gardens" included after 1st renewal
  * **KEYCARE_ADDON_PRE_REN:** Option "Replacement of keys" included before 1st renewal
  * **KEYCARE_ADDON_POST_REN:** Option "Replacement of keys" included after 1st renewal
  * **HP1_ADDON_PRE_REN:** Option "HP1" included before 1st renewal
  * **HP1_ADDON_POST_REN:** Option "HP1" included after 1st renewal
  * **HP2_ADDON_PRE_REN:** Option "HP2" included before 1st renewal
  * **HP2_ADDON_POST_REN:** Option "HP2" included afterrenewal
  * **HP3_ADDON_PRE_REN:** Option "HP3" included before 1st renewal
  * **HP3_ADDON_POST_REN:** Option "HP3" included after renewal
  * **MTA_FLAG:** Mid-Term Adjustment indicator
  * **MTA_FAP:** Bonus up to date of Adjustment
  * **MTA_APRP:** Adjustment of the premium for Mid-Term Adjustmen
  * **MTA_DATE:** Date of Mid-Term Adjustment
  * **LAST_ANN_PREM_GROSS:** Premium - Total for the previous year
  * **POL_STATUS:** Policy status
  * **Police:** Policy number

In [5]:

    
    
    total <- nrow(Model_Data)
    total
    

256136

In [6]:

    
    
    str(Model_Data)
    
    
    
    Classes âdata.tableâ and 'data.frame':	256136 obs. of  64 variables:
     $ QUOTE_DATE            : Factor w/ 1261 levels "","1/10/2008",..: 322 322 326 326 322 322 305 322 322 322 ...
     $ COVER_START           : Factor w/ 2208 levels "","01/01/1993",..: 1594 17 1666 885 1106 76 885 76 36 76 ...
     $ CLAIM3YEARS           : Factor w/ 3 levels "","N","Y": 2 2 2 2 2 2 2 2 2 2 ...
     $ P1_EMP_STATUS         : Factor w/ 12 levels "","A","C","E",..: 9 4 4 9 9 9 9 9 4 4 ...
     $ P1_PT_EMP_STATUS      : Factor w/ 10 levels "","C","E","F",..: 1 1 1 1 1 1 1 1 1 1 ...
     $ BUS_USE               : Factor w/ 3 levels "","N","Y": 2 3 2 2 2 2 2 2 2 2 ...
     $ CLERICAL              : Factor w/ 3 levels "","N","Y": 1 2 1 1 1 1 1 1 1 1 ...
     $ AD_BUILDINGS          : Factor w/ 3 levels "","N","Y": 3 3 2 2 3 2 3 2 3 3 ...
     $ RISK_RATED_AREA_B     : int  19 25 NA NA 5 NA 1 NA 0 5 ...
     $ SUM_INSURED_BUILDINGS : int  1000000 1000000 0 0 1000000 0 1000000 0 1000000 1000000 ...
     $ NCD_GRANTED_YEARS_B   : int  7 6 0 0 7 0 7 0 3 7 ...
     $ AD_CONTENTS           : Factor w/ 3 levels "","N","Y": 3 3 3 3 3 3 3 3 3 3 ...
     $ RISK_RATED_AREA_C     : int  6 9 12 14 10 8 6 6 0 1 ...
     $ SUM_INSURED_CONTENTS  : int  50000 50000 50000 50000 50000 50000 50000 50000 50000 50000 ...
     $ NCD_GRANTED_YEARS_C   : int  7 7 7 7 7 7 7 7 3 7 ...
     $ CONTENTS_COVER        : Factor w/ 3 levels "","N","Y": 3 3 2 2 3 2 3 2 3 3 ...
     $ BUILDINGS_COVER       : Factor w/ 3 levels "","N","Y": 3 3 3 3 3 3 3 3 3 3 ...
     $ SPEC_SUM_INSURED      : int  7500 0 0 0 0 0 0 0 0 0 ...
     $ SPEC_ITEM_PREM        : num  44.4 0 0 0 0 ...
     $ UNSPEC_HRP_PREM       : num  12.4 24.6 0 0 19.8 ...
     $ P1_DOB                : Factor w/ 19900 levels "","01/01/1890",..: 9427 12667 6167 10405 6591 1764 3275 15249 3796 18749 ...
     $ P1_MAR_STATUS         : Factor w/ 11 levels "","A","B","C",..: 8 6 10 11 6 6 5 6 9 10 ...
     $ P1_POLICY_REFUSED     : Factor w/ 3 levels "","N","Y": 2 2 2 2 2 2 2 2 2 2 ...
     $ P1_SEX                : Factor w/ 4 levels "","F","M","N": 3 3 3 2 3 3 2 3 3 3 ...
     $ APPR_ALARM            : Factor w/ 3 levels "","N","Y": 2 2 3 2 3 2 2 2 2 2 ...
     $ APPR_LOCKS            : Factor w/ 3 levels "","N","Y": 3 2 3 3 3 2 3 3 3 3 ...
     $ BEDROOMS              : int  3 3 2 2 3 1 2 2 3 3 ...
     $ ROOF_CONSTRUCTION     : int  11 11 11 11 11 11 11 11 11 11 ...
     $ WALL_CONSTRUCTION     : int  15 15 15 15 15 15 15 15 15 15 ...
     $ FLOODING              : Factor w/ 3 levels "","N","Y": 3 3 3 3 3 3 3 3 3 3 ...
     $ LISTED                : int  3 3 3 3 3 3 3 3 3 3 ...
     $ MAX_DAYS_UNOCC        : int  0 0 0 0 0 0 0 0 0 0 ...
     $ NEIGH_WATCH           : Factor w/ 3 levels "","N","Y": 2 2 3 2 2 2 2 2 2 2 ...
     $ OCC_STATUS            : Factor w/ 8 levels "","HH","LP","OT",..: 5 5 5 5 5 5 5 5 5 5 ...
     $ OWNERSHIP_TYPE        : int  8 3 8 18 8 18 8 12 8 8 ...
     $ PAYING_GUESTS         : int  0 0 0 0 0 0 0 0 0 0 ...
     $ PROP_TYPE             : int  10 2 9 19 1 7 9 7 19 10 ...
     $ SAFE_INSTALLED        : Factor w/ 3 levels "","N","Y": 3 2 2 2 2 2 2 2 2 2 ...
     $ SEC_DISC_REQ          : Factor w/ 3 levels "","N","Y": 3 2 3 3 3 2 3 3 3 3 ...
     $ SUBSIDENCE            : Factor w/ 3 levels "","N","Y": 2 2 2 2 2 2 2 2 2 2 ...
     $ YEARBUILT             : int  1960 1960 1946 1870 1960 1960 1980 1990 1960 1946 ...
     $ PAYMENT_METHOD        : Factor w/ 4 levels "","DD-Other",..: 4 4 4 3 2 4 3 2 4 4 ...
     $ PAYMENT_FREQUENCY     : int  NA NA NA NA NA NA NA NA NA NA ...
     $ LEGAL_ADDON_PRE_REN   : Factor w/ 3 levels "","N","Y": 2 3 3 2 3 2 3 2 3 3 ...
     $ LEGAL_ADDON_POST_REN  : Factor w/ 3 levels "","N","Y": 2 3 3 2 3 2 3 2 3 3 ...
     $ HOME_EM_ADDON_PRE_REN : Factor w/ 3 levels "","N","Y": 2 2 2 2 2 2 2 2 3 2 ...
     $ HOME_EM_ADDON_POST_REN: Factor w/ 3 levels "","N","Y": 2 2 2 2 2 2 2 2 2 2 ...
     $ GARDEN_ADDON_PRE_REN  : Factor w/ 3 levels "","N","Y": 2 2 2 2 3 2 2 2 2 2 ...
     $ GARDEN_ADDON_POST_REN : Factor w/ 3 levels "","N","Y": 2 2 2 2 3 2 2 2 2 2 ...
     $ KEYCARE_ADDON_PRE_REN : Factor w/ 3 levels "","N","Y": 2 2 2 2 2 2 2 2 2 2 ...
     $ KEYCARE_ADDON_POST_REN: Factor w/ 3 levels "","N","Y": 2 2 2 2 2 2 2 2 2 2 ...
     $ HP1_ADDON_PRE_REN     : Factor w/ 3 levels "","N","Y": 2 2 2 2 2 2 2 2 2 2 ...
     $ HP1_ADDON_POST_REN    : Factor w/ 3 levels "","N","Y": 2 2 2 2 2 2 2 2 2 2 ...
     $ HP2_ADDON_PRE_REN     : Factor w/ 3 levels "","N","Y": 2 2 2 2 2 2 2 2 2 2 ...
     $ HP2_ADDON_POST_REN    : Factor w/ 3 levels "","N","Y": 2 2 2 2 2 2 2 2 3 2 ...
     $ HP3_ADDON_PRE_REN     : Factor w/ 3 levels "","N","Y": 2 2 2 2 2 2 2 2 2 2 ...
     $ HP3_ADDON_POST_REN    : Factor w/ 3 levels "","N","Y": 2 2 2 2 2 2 2 2 2 2 ...
     $ MTA_FLAG              : Factor w/ 3 levels "","N","Y": 2 3 3 2 2 2 3 2 3 2 ...
     $ MTA_FAP               : num  NA 308.8 52.6 NA NA ...
     $ MTA_APRP              : num  NA -9.27 52.65 NA NA ...
     $ MTA_DATE              : Factor w/ 1288 levels "","01/01/2008",..: 1 1 122 1 1 1 636 1 1 1 ...
     $ LAST_ANN_PREM_GROSS   : num  274.8 308.8 52.6 54.2 244.6 ...
     $ POL_STATUS            : Factor w/ 5 levels "","Cancelled",..: 3 4 4 4 4 4 4 2 4 4 ...
     $ Police                : Factor w/ 256136 levels "P000001","P000002",..: 1 2 3 4 5 6 7 8 9 10 ...
     - attr(*, ".internal.selfref")=<externalptr> 
    

There are a total of **256,136 policies** with **66 features**. Most of the
features have so much null values. I will attempt at cleaning this dataset to
a form suitable for analysis.

## Data Wrangling¶

The data that was originally obtained was in the form of a Microsoft Office
Access File (.accdb). This was converted manually into a CSV file (in
Microsoft Office Excel) to arrive at an input that could be loaded into a R
DataFrame effortlessly. In other words, this dataset is already relatively
clean. I will however attempt at learning more about this features and
performing appropriate wrangling steps to arrive at a form that is more
suitable for analysis.

In [7]:

    
    
    status_groups <- Model_Data[, .(count=.N, percent=round((.N/total)*100, 2)), by = POL_STATUS]
    status_groups <- status_groups[order(count, decreasing = TRUE)]
    status_groups
    pieLabels <- paste(status_groups$POL_STATUS,' ', status_groups$percent, '%')
    pie3D(status_groups$count,labels=pieLabels,explode=0.1, radius=0.8,height=0.1, col=rainbow(length(status_groups$POL_STATUS)),
      	main="Pie Chart of Policy Status ")
    

POL_STATUS| count| percent  
---|---|---  
Live | 132160 | 51.60   
|  67115 | 26.20   
Lapsed |  52534 | 20.51   
Cancelled|  4311 |  1.68   
Unknown |  16 |  0.01   
  
![](__results___files/__results___12_1.png)

We can see that the majority of the policies have a status of live
(**51.6%**).

In [8]:

    
    
    status_groups[POL_STATUS != 'Lapsed', POL_STATUS:= "Non Resiliated"]
    status_groups[POL_STATUS == 'Lapsed', POL_STATUS:= "Resiliated"]
    status_groups <- status_groups[, .(count=sum(count), percent = round((.N*100)/sum(count), 2)), by = POL_STATUS]
    status_groups[,percent := round((count*100)/sum(count), 2)]
    status_groups <- status_groups[order(count, decreasing = TRUE)]
    status_groups
    pieLabels <- paste(status_groups$POL_STATUS,' ', status_groups$percent, '%')
    pie <- pie3D(status_groups$percent,labels=pieLabels,explode=0.1, radius=0.8,height=0.1, col=rainbow(length(status_groups$POL_STATUS)),
      	main="Pie Chart of Resiliation")
    

POL_STATUS| count| percent  
---|---|---  
Non Resiliated| 203602 | 79.49   
Resiliated |  52534 | 20.51   
  
![](__results___files/__results___14_4.png)

Here we can see that **20.5%** of the clients return to the policy after
cancelled.

For create the models later i will save this information in the original
dataset too.

In [9]:

    
    
    Model_Data$Resiliated[Model_Data$POL_STATUS == 'Lapsed'] <- 1
    Model_Data$Resiliated[Model_Data$POL_STATUS != 'Lapsed'] <- 0
    #t(head(Model_Data, 3))
    

# **Exploratory Data Analysis**¶

## Policy best covered¶

I am curious to discover the most covered policy among the others. I will
wrangle the data to find out adding a new column that show the total coverage
of the policy

In [10]:

    
    
    dt <- Model_Data[, .(SUM_INSURED_BUILDINGS, SUM_INSURED_CONTENTS, SPEC_SUM_INSURED)]
    name <- 'total_coverage'
    Model_Data[, (name):= SUM_INSURED_BUILDINGS+ SUM_INSURED_CONTENTS+ SPEC_SUM_INSURED]
    ordered_table <- Model_Data[order(total_coverage, decreasing = TRUE), .(Police, SUM_INSURED_BUILDINGS, SUM_INSURED_CONTENTS, SPEC_SUM_INSURED, total_coverage)]
    

In [11]:

    
    
    ordered_table <- data.table(ordered_table)
    head(ordered_table, 8)
    

Police| SUM_INSURED_BUILDINGS| SUM_INSURED_CONTENTS| SPEC_SUM_INSURED|
total_coverage  
---|---|---|---|---  
P098293| 1000000| 100000 | 38080 | 1138080  
P032217| 1000000| 100000 | 32800 | 1132800  
P028759| 1000000| 100000 | 20000 | 1120000  
P159900| 1000000| 100000 | 11480 | 1111480  
P103729| 1000000| 100000 | 11160 | 1111160  
P079048| 1000000| 100000 | 10000 | 1110000  
P245704| 1000000| 100000 |  9100 | 1109100  
P025046| 1000000| 100000 |  8880 | 1108880  
  
The Policy with ID **P098293** is the most covered policy in almost **1,138k**
dollars. The **P032217** come in a close second with a **1,132k** dollars.
Policy **P028759** is third but this policy has significantly less Valuable
Personal Property compared to the two first ones in the list and therefore, a
much smaller total coverage.

## Client's professional status¶

In this section, i will look at the client's professional status of the
policies in the HI dataset.

In [12]:

    
    
    status_client <- Model_Data[!is.na(P1_EMP_STATUS), .(count=.N), by = P1_EMP_STATUS]
    status_client <- status_client[order(count, decreasing = TRUE)]
    status_client
    

P1_EMP_STATUS| count  
---|---  
R | 146621  
|  67115  
E |  36398  
S |  3065  
H |  1069  
U |  921  
N |  754  
V |  68  
A |  52  
F |  29  
I |  28  
C |  16  
  
This was the information i received from the teacher. Sorry is not completed,
the main goal of this project is just get some insights, even when we don't
have the complete information.

  * R = Retired, 
  * E = Employed, 
  * N = Not Available, 
  * H = House person, 
  * S = Student ,
  * U = Unemployed.

Anyways, there are over **11** professional status represented in the HI
dataset (avoiding the null status). The **Retired** clients form the
overwhelmingly majority. The **Employees** and **Students** come at a very
distant second and third respectively.

In [13]:

    
    
    palette_colors <-  c("#5e482c", "#f7d2a7", "#df45a4", "#d1223d", "#fbdb50", "#cd500d", "#d5addf", "#206536", "#b98d9b", "#ebaa7b", "#85a664", "#ef99fa")
    ordered_status <- status_client$P1_EMP_STATUS
    ggbarplot(status_client, x= "P1_EMP_STATUS", y= "count", xlab="Clientâs professional status", ylab ="quantity policies", fill = "P1_EMP_STATUS", label=TRUE, title = "Clients professional status", label.pos = "out", order = ordered_status, palette = palette_colors)
    

![](__results___files/__results___23_1.png)

As mentioned earlier, **Retired** and **Employees** clients are the most
commonly occurring professional status. **V** , **A** , **F** , **I** , **C**
form the minority. I can imagine that this last statuses are two or the
following:

  1. The richest clients of the sample.
  2. The clients living in a very uncomfortable zone/building.

# **Correlations**¶

### Geographical Classification of Risk - Building and Assured Sum - Building¶

In [14]:

    
    
    ggscatter(Model_Data, x = "SUM_INSURED_BUILDINGS", y = "RISK_RATED_AREA_B", 
              add = "reg.line", conf.int = TRUE, 
              cor.coef = TRUE, cor.method = "pearson",
              xlab = "Assured Sum - Building", ylab = "Geographical Classification of Risk - Building")
    
    
    
    Warning message:
    âRemoved 115260 rows containing non-finite values (stat_smooth).âWarning message:
    âRemoved 115260 rows containing non-finite values (stat_cor).âWarning message:
    âRemoved 115260 rows containing missing values (geom_point).â

![](__results___files/__results___25_2.png)

As we can see in the plot, the Pearson Coefficient of the two aforementioned
quantities is **-0.012** which suggests that there is not a tangible
correlation. In other words, the buildings Geographical Classification of Risk
and the Assured Sum are independent quantities. The points fall close to the
line, which indicates that there is a strong negative relationship between the
variables. (source: <http://support.minitab.com/en-us/minitab-express/1/help-
and-how-to/modeling-statistics/regression/how-to/correlation/interpret-the-
results/>)

In [15]:

    
    
    risk <- Model_Data[LAST_ANN_PREM_GROSS > 0]
    #head(risk, 2)
    ggqqplot(Model_Data$LAST_ANN_PREM_GROSS, ylab = "Premium - Total for the previous year")
    
    
    
    Warning message:
    âRemoved 66097 rows containing non-finite values (stat_qq).âWarning message:
    âRemoved 66097 rows containing non-finite values (stat_qq_line).âWarning message:
    âRemoved 66097 rows containing non-finite values (stat_qq_line).â

![](__results___files/__results___27_2.png)

We can see that for those premium clients with Total for the previous year
bonus (more than 0/null) are between 0 and 1,000.

Now i will check the most popular and most successful months and day for
quotation and cover start.

In [16]:

    
    
    month_order <- c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')
    day_order <- c('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun')
    Model_Data$quotemonth_n <- month(as.POSIXlt(Model_Data$QUOTE_DATE, format="%m/%d/%Y"))
    Model_Data$covermonth_n <- month(as.POSIXlt(Model_Data$COVER_START, format="%d/%m/%Y"))
    #i name the columns
    quotesmonthDF <- data.frame(month_n = Model_Data$quotemonth_n )
    coversmonthDF <- data.frame(month_n = Model_Data$covermonth_n)
    #head(quotesmonthDF, 2)
    #i avoid the null values and make the group by each month to get the monthly total
    quotesmonthgroup <- data.table(quotesmonthDF)
    quotesmonthgroup <-quotesmonthgroup[month_n <= 12]
    quotesmonthgroup <-quotesmonthgroup[(order(month_n)), .(count=.N), by=month_n]
    
    coversmonthgroup <- data.table(coversmonthDF)
    coversmonthgroup <-coversmonthgroup[month_n <= 12]
    coversmonthgroup <-coversmonthgroup[(order(month_n)), .(count=.N), by=month_n]
    #i add the name of the month
    quotesmonthgroup$month_s <- month_order[quotesmonthgroup$month_n ]
    coversmonthgroup$month_s <- month_order[coversmonthgroup$month_n ]
    head(quotesmonthgroup, 12)
    head(coversmonthgroup, 12)
    

month_n| count| month_s  
---|---|---  
1 | 34764| Jan   
2 | 19974| Feb   
3 |  1085| Mar   
4 |  129| Apr   
5 |  129| May   
6 |  153| Jun   
7 |  256| Jul   
8 |  579| Aug   
9 |  1750| Sep   
10 | 13869| Oct   
11 | 32035| Nov   
12 | 24801| Dec   
  
month_n| count| month_s  
---|---|---  
1 | 45894| Jan   
2 | 45542| Feb   
3 | 17905| Mar   
6 |  2| Jun   
8 |  2| Aug   
9 |  1| Sep   
10 |  1| Oct   
11 | 32494| Nov   
12 | 47180| Dec   
  
In [17]:

    
    
    Model_Data$quotemonth_s <- month_order[Model_Data$quotemonth_n ]
    Model_Data$covermonth_s <- month_order[Model_Data$covermonth_n ]
    

In [18]:

    
    
    ggbarplot(quotesmonthgroup, x= "month_s" , y= "count", xlab="Month", ylab ="quantity policies", label=TRUE, title = "Most successful months in Quotation date", label.pos = "out", fill = "month_s", color = "month_s", palette = palette_colors)
    

![](__results___files/__results___31_1.png)

It appears that **January** is the most popular month when it comes to
policies quotations. This is maybe for the salary bonus that employees get in
christmas and the clients makes theirs plan come true making the quote.

In [19]:

    
    
    ggbarplot(coversmonthgroup, x= "month_s" , y= "count", xlab="Month", ylab ="quantity policies", fill = "month_s", palette = palette_colors, label=TRUE, title = "Most successful months in Coverage date", label.pos = "out")
    

![](__results___files/__results___33_1.png)

It seems that the beggining and ending months of the year have the highest
number of policies. This can be attributed to the fact that people tend to
dedicate their money in the summer to vacances when the kids are out of
school, the parents are on vacation and therefore, the policies is more likely
to be practically none.

Now i want to know if there are months that tend to be more successful than
others. For this i will create a boxplot between the total coverage and the
months.

In [20]:

    
    
    boxplotDF <- Model_Data[covermonth_n <= 12, .(covermonth_n, covermonth_s, total_coverage)]
    ggboxplot(boxplotDF, x = "covermonth_s", y = "total_coverage", xlab="Coverage month", ylab="total coverage amount", width = 0.8, fill="covermonth_s", palette = palette_colors, order=month_order)
    

![](__results___files/__results___35_1.png)

We see that effectively the months of **January** , **February** , **March**
and **November** tend to yield the highest median returns. However
**December** does not have a high total coverage, even when this month has the
highest number of policies. On the other hand **June** and **August** have a
not so high coverage and finally the resting months are the least successful
months on the aforementioned metrics. Again, the success of the starting and
ending months can be attributed to the fact that in summer the people tend to
spend their money on vacation stuffs.

## Number of buildings by year¶

In [21]:

    
    
    year_built <- Model_Data[Model_Data$YEARBUILT != 'null' & Model_Data$YEARBUILT > 0, .(count=.N), by = YEARBUILT]
    year_built <- year_built[order(YEARBUILT)]
    year_built
    

YEARBUILT| count  
---|---  
1749 |  222  
1750 |  6  
1869 |  2564  
1870 |  2835  
1871 |  11  
1900 | 15687  
1910 |  1  
1920 | 33679  
1930 |  4  
1946 | 64831  
1950 |  4  
1960 | 31287  
1970 |  2  
1980 | 28057  
1990 |  5692  
1995 |  3  
2000 |  4136  
  
In [22]:

    
    
    qplot(x = year_built$YEARBUILT, y = year_built$count, xlab="Year of building construction", ylab="Number of Policies", main = "Number of buildings by year construction" , geom="line")
    

![](__results___files/__results___38_1.png)

We notice that there is a rise in the number of buildings constructed the
**1870s** decade and there is a peak in the **1940s** decade with more than
**60 thousands** policies. It can be concluded that the majority of buildings
have between **20** and **80** years of constructed.

## Relation between age of client (at the time that made the first payment)
and the duration of the policy (for those who have a cancelled policy)¶

In [23]:

    
    
    #set client age
    birthday_year <- year(as.POSIXlt(Model_Data$P1_DOB, format="%d/%m/%Y"))
    cover_year <- year(as.POSIXlt(Model_Data$COVER_START, format="%d/%m/%Y"))
    Model_Data$client_age <- cover_year-birthday_year
    

In [24]:

    
    
    #set policy duration
    cancelation_year <- year(as.POSIXlt(Model_Data$MTA_DATE, format="%d/%m/%Y"))
    Model_Data$police_duration <- cancelation_year-cover_year
    

In [25]:

    
    
    age_bar <- Model_Data[!is.na(client_age) & client_age > 0, .(count=.N), by = client_age]
    age_bar <- age_bar[order(client_age)]
    head(age_bar, 20)
    

client_age| count  
---|---  
18 |  2  
19 |  3  
20 |  2  
21 |  6  
22 |  4  
23 |  14  
24 |  16  
25 |  24  
26 |  37  
27 |  41  
28 |  50  
29 |  54  
30 | 100  
31 | 122  
32 | 143  
33 | 172  
34 | 200  
35 | 235  
36 | 262  
37 | 324  
  
In [26]:

    
    
    years_table <- Model_Data[!is.na(police_duration) & police_duration > 0 & !is.na(client_age) & client_age > 0, .(client_age,police_duration)]
    
    ggdensity(years_table, x = "client_age", y = "..count..", xlab = "Age of client", ylab="Policies", add = "mean", fill="#00AFBB", rug = TRUE, palette = c("#00AFBB", "#E7B800"))
    

![](__results___files/__results___43_1.png)

Surprisingly, the median age of the clients at the moment of the coverage
payment is **66** years old and the peak is around **70's**. This makes sense
with the the previous discovery that most clients are retired.

Now, i want to know if there is a correlation between the age of the client
and the policy duration.

In [27]:

    
    
    ggscatter(years_table, x = "client_age", y = "police_duration", 
              add = "reg.line", conf.int = TRUE, 
              cor.coef = TRUE, cor.method = "pearson",
              xlab = "Client Age", ylab = "Policy duration")
    

![](__results___files/__results___45_1.png)

As we can see in thi scattered graphic, the Pearson Coefficient between the
client's age and the policy duration (in years) is **-0.074** which suggests
that there is no tangible correlation. So we can say that this quantitative
variables are independent quantities. The relationship is negative because, as
one variable increases, the other variable decreases.

# Machine Learning¶

Finally i will make some models evaluations in Rattle. I hope this notebook
will give a more clearly insights, I will try to build the next models: Linear
Logistic Regression, Decision tree, Random Forest , Extreme Boost, SVM and
Neuron Network. As well as Error Matrix, ROC curves and Area Under the
Precision-Recall (PR) for each model. My goal with this is to get the best
model to predict which clients have more probabilities to remove/resiliate
their policy.

    
    
    {r}
    rattle()

Note: For upload the images i will be using to <https://imgbb.com/>

## Pearson Correlation¶

![](https://preview.ibb.co/jXgQCm/model_data_pearson.png)

As we can see in this complete correlation analysis, there are some evidently
relations like while the building has more bedroom the coverage increments (as
well as the total coverage). However we can also see that there is weak
inversely proportional relation between the age of the client and the duration
of the policy. This may be due to the fact that young people move a lot,
either through studies, work, family, etc.

## Models¶

### Logistic Linear Regression¶

This is a logistic regression for the Resiliation indicator. This can be used
to predict of a client will renew his policy given certains features.

![](https://image.ibb.co/c1g2iR/linear_regression_renewal.png)

#### Summary of the Logistic Regression model (built using glm):¶

** _Note_** Singularities were found in the modeling and are indicated by an
NA in the following table. This is often the case when variables are linear
combinations of other variables, or the variable has a constant value. These
variables will be ignored when using the model to score new data and will not
be included as parameters in the exported scoring routine.

Call: glm(formula = Resiliated ~ ., family = binomial(link = "logit"), data =
crs$dataset[crs$train, c(crs$input, crs$target)])

    
    
    Null deviance: 8.3041e+03  on 7196  degrees of freedom
    

Residual deviance: 4.1754e-08 on 7132 degrees of freedom (44698 observations
deleted due to missingness) AIC: 130

Number of Fisher Scoring iterations: 25

Log likelihood: -0.000 (65 df) Null/Residual deviance difference: 8304.087 (64
df) Chi-square p-value: 0.00000000 Pseudo R-Square (optimistic): 1.00000000

### Decision Tree¶

This is the Resiliation indicator Decision Tree.

![](https://image.ibb.co/dkVbcm/decision_tree_resiliation.png)

We can predict if a policy will be cancelled/resiliated firstly asking if the
marriage status is **B** or **P** , if yes then there is 24% probability that
that client give up with his policy. On the other hand the purest subset of
this decision tree is the client that doesn't have a payment method of **DD-
Other** or **PureDD** which give us **40%** of probability that this client
will cancel the policy. However this is not enough to be considered, so this
model can be safely dropped since we did not get a strong subset that allow us
to make a decision (based on this model).

### Random Forest¶

#### Summary of the Random Forest Model for resiliation¶

Number of observations used to build the model: 51895 Missing value imputation
is active.

Call: randomForest(formula = as.factor(Resiliated) ~ ., data =
crs$dataset[crs$sample, c(crs$input, crs$target)], ntree = 500, mtry = 6,
importance = TRUE, replace = FALSE, na.action = randomForest::na.roughfix)

    
    
               Type of random forest: classification
                     Number of trees: 500
    

No. of variables tried at each split: 6

    
    
        OOB estimate of  error rate: 0%
    Confusion matrix:
          0     1 class.error
    0 37577     0           0
    1     0 14318           0
    
    

#### Analysis of the Area Under the Curve (AUC)¶

Call: roc.default(response = crs$rf$y, predictor =
as.numeric(crs$rf$predicted))

Data: as.numeric(crs$rf$predicted) in 37577 controls (crs$rf$y 0) < 14318
cases (crs$rf$y 1). Area under the curve: 1

95% CI: 1-1 (DeLong)

#### Variable Importance¶

    
    
                               0      1 MeanDecreaseAccuracy MeanDecreaseGini
    POL_STATUS            471.61 491.62               490.56         11883.98
    LAST_ANN_PREM_GROSS    17.50   8.96                16.85            94.85
    P1_MAR_STATUS          15.11  13.93                15.47           175.80
    PAYMENT_METHOD         12.92   6.50                14.08           137.43
    NCD_GRANTED_YEARS_B    12.94   9.65                12.79            40.48
    MTA_FAP                12.14   4.85                12.67            36.81
    client_age             12.75   6.46                12.54            63.09
    total_coverage         11.62   8.42                12.26            50.68
    MTA_APRP               11.08   6.78                12.10            23.66
    UNSPEC_HRP_PREM        12.86   2.38                11.97            37.08
    MAX_DAYS_UNOCC         11.75   5.33                11.59            97.49
    NCD_GRANTED_YEARS_C    11.85   5.46                11.32            29.74
    SPEC_ITEM_PREM          9.93   2.50                10.31            22.49
    P1_EMP_STATUS          10.20   3.56                10.04            19.16
    AD_BUILDINGS            8.51   4.27                 8.85            24.78
    SUM_INSURED_BUILDINGS   8.56   4.62                 8.84            21.36
    CONTENTS_COVER          8.41   5.97                 8.83            25.58
    SPEC_SUM_INSURED        8.86   2.60                 8.83            19.89
    BEDROOMS                8.90   5.65                 8.55            23.14
    YEARBUILT               9.97   1.46                 8.49            36.79
    PROP_TYPE               8.39   4.92                 7.95            32.95
    police_duration         8.12   1.42                 7.87            15.38
    SUM_INSURED_CONTENTS    6.30  -0.41                 6.05             4.86
    BUS_USE                 6.05  -2.08                 5.45             2.90
    SEC_DISC_REQ            3.98   3.40                 4.79             7.34
    OWNERSHIP_TYPE          4.29   3.02                 4.68            14.68
    APPR_LOCKS              3.67   3.52                 4.52             8.24
    SAFE_INSTALLED          4.92  -0.53                 4.51             2.06
    P1_SEX                  3.63   3.12                 4.19            13.02
    covermonth_s            3.22   1.39                 3.40            37.30
    NEIGH_WATCH             2.12   2.76                 3.14             8.94
    BUILDINGS_COVER         2.96  -0.84                 2.33             1.37
    AD_CONTENTS             2.72  -0.84                 1.71             1.24
    FLOODING                2.52  -2.33                 1.51             3.43
    OCC_STATUS              3.97  -4.90                 1.33             2.42
    APPR_ALARM              1.59  -0.15                 1.23             5.31
    ROOF_CONSTRUCTION       2.40  -2.83                 1.16             2.58
    SUBSIDENCE              1.33  -1.42                 0.81             1.47
    PAYING_GUESTS           0.53   0.57                 0.63             0.45
    LISTED                  1.68  -1.17                 0.58             1.66
    P1_POLICY_REFUSED       0.63  -0.45                 0.26             0.28
    WALL_CONSTRUCTION      -1.48   0.94                -1.08             1.69
    
    

Time taken: 3.07 mins

Rattle timestamp: 2017-11-25 02:22:03 Yabir

![](https://preview.ibb.co/mKkfv6/roc.png)

Here's the Out-of-bag error plot .

### Boost¶

Summary of the Extreme Boost model:

##### xgb.Booster¶

raw: 11.8 Kb call: xgb.train(params = params, data = dtrain, nrounds =
nrounds, watchlist = watchlist, verbose = verbose, print_every_n =
print_every_n, early_stopping_rounds = early_stopping_rounds, maximize =
maximize, save_period = save_period, save_name = save_name, xgb_model =
xgb_model, callbacks = callbacks, max_depth = 6, eta = 0.3, num_parallel_tree
= 1, nthread = 2, metrics = "error", objective = "binary:logistic") params (as
set within xgb.train): max_depth = "6", eta = "0.3", num_parallel_tree = "1",
nthread = "2", metrics = "error", objective = "binary:logistic", silent = "1"
xgb.attributes: niter callbacks: cb.print.evaluation(period = print_every_n)
cb.evaluation.log() cb.save.model(save_period = save_period, save_name =
save_name) niter: 50 formula: Resiliated ~ .

<environment: 0x000000002712e270> dimnames:
(Intercept)P1_EMP_STATUSCP1_EMP_STATUSEP1_EMP_STATUSFP1_EMP_STATUSHP1_EMP_STATUSIP1_EMP_STATUSNP1_EMP_STATUSRP1_EMP_STATUSSP1_EMP_STATUSUP1_EMP_STATUSVBUS_USEYAD_BUILDINGSYSUM_INSURED_BUILDINGSNCD_GRANTED_YEARS_BAD_CONTENTSYSUM_INSURED_CONTENTSNCD_GRANTED_YEARS_CCONTENTS_COVERYBUILDINGS_COVERYSPEC_SUM_INSUREDSPEC_ITEM_PREMUNSPEC_HRP_PREMP1_MAR_STATUSBP1_MAR_STATUSCP1_MAR_STATUSDP1_MAR_STATUSMP1_MAR_STATUSNP1_MAR_STATUSOP1_MAR_STATUSPP1_MAR_STATUSSP1_MAR_STATUSWP1_POLICY_REFUSEDYP1_SEXMP1_SEXNAPPR_ALARMYAPPR_LOCKSYBEDROOMSROOF_CONSTRUCTIONWALL_CONSTRUCTIONFLOODINGYLISTEDMAX_DAYS_UNOCCNEIGH_WATCHYOCC_STATUSLPOCC_STATUSPHOCC_STATUSUNOCC_STATUSWDOCC_STATUSWEOWNERSHIP_TYPEPAYING_GUESTSPROP_TYPESAFE_INSTALLEDYSEC_DISC_REQYSUBSIDENCEYYEARBUILTPAYMENT_METHODNonDDPAYMENT_METHODPureDDMTA_FAPMTA_APRPLAST_ANN_PREM_GROSSPOL_STATUSLapsedPOL_STATUSLivePOL_STATUSUnknowntotal_coveragecovermonth_sDeccovermonth_sFebcovermonth_sJancovermonth_sJuncovermonth_sMarcovermonth_sNovcovermonth_sSepclient_agepolice_duration
evaluation_log: iter train_error 1 0

    
    
       2           0
    

* * *
    
    
      49           0
      50           0
    
    

Final iteration error rate: iter train_error 1: 50 0

Importance/Frequency of variables actually used: Feature Gain Cover Frequency
1: POL_STATUSLapsed 0.99985382356599 0.9985962032 0.81250 2: POL_STATUSLive
0.00014574263160 0.0004934116 0.06250 3: PAYMENT_METHODNonDD 0.00000034897050
0.0006848001 0.09375 4: MTA_APRP 0.00000008483191 0.0002255850 0.03125

Time taken: 0.79 secs

Rattle timestamp: 2017-11-25 02:22:37 Yabir

### SVM¶

Summary of the SVM model (built using ksvm):

Support Vector Machine object of class "ksvm"

SV type: C-svc (classification) parameter : cost C = 1

Gaussian Radial Basis kernel function. Hyperparameter : sigma =
0.0372910963005799

Number of Support Vectors : 899

Objective Function Value : -272.004 Training error : 0.000695 Probability
model included.

Time taken: 5.61 secs

### Neural Network¶

Summary of the Neural Net model (built using nnet):

A 73-10-1 network with 824 weights. Inputs: P1_EMP_STATUSC, P1_EMP_STATUSE,
P1_EMP_STATUSF, P1_EMP_STATUSH, P1_EMP_STATUSI, P1_EMP_STATUSN,
P1_EMP_STATUSR, P1_EMP_STATUSS, P1_EMP_STATUSU, P1_EMP_STATUSV, BUS_USEY,
AD_BUILDINGSY, SUM_INSURED_BUILDINGS, NCD_GRANTED_YEARS_B, AD_CONTENTSY,
SUM_INSURED_CONTENTS, NCD_GRANTED_YEARS_C, CONTENTS_COVERY, BUILDINGS_COVERY,
SPEC_SUM_INSURED, SPEC_ITEM_PREM, UNSPEC_HRP_PREM, P1_MAR_STATUSB,
P1_MAR_STATUSC, P1_MAR_STATUSD, P1_MAR_STATUSM, P1_MAR_STATUSN,
P1_MAR_STATUSO, P1_MAR_STATUSP, P1_MAR_STATUSS, P1_MAR_STATUSW,
P1_POLICY_REFUSEDY, P1_SEXM, P1_SEXN, APPR_ALARMY, APPR_LOCKSY, BEDROOMS,
ROOF_CONSTRUCTION, WALL_CONSTRUCTION, FLOODINGY, LISTED, MAX_DAYS_UNOCC,
NEIGH_WATCHY, OCC_STATUSLP, OCC_STATUSPH, OCC_STATUSUN, OCC_STATUSWD,
OCC_STATUSWE, OWNERSHIP_TYPE, PAYING_GUESTS, PROP_TYPE, SAFE_INSTALLEDY,
SEC_DISC_REQY, SUBSIDENCEY, YEARBUILT, PAYMENT_METHODNonDD,
PAYMENT_METHODPureDD, MTA_FAP, MTA_APRP, LAST_ANN_PREM_GROSS,
POL_STATUSLapsed, POL_STATUSLive, POL_STATUSUnknown, total_coverage,
covermonth_sDec, covermonth_sFeb, covermonth_sJan, covermonth_sJun,
covermonth_sMar, covermonth_sNov, covermonth_sSep, client_age,
police_duration. Output: as.factor(Resiliated). Sum of Squares Residuals:
1896.0000.

Neural Network build options: skip-layer connections; entropy fitting.

In the following table: b represents the bias associated with a node h1
represents hidden layer node 1 i1 represents input node 1 (i.e., input
variable 1) o represents the output node

Weights for node h1: b->h1 i1->h1 i2->h1 i3->h1 i4->h1 i5->h1 i6->h1 i7->h1
i8->h1 i9->h1 i10->h1 i11->h1 i12->h1 i13->h1 i14->h1 -0.66 0.23 0.29 -0.31
-0.68 -0.36 0.27 0.23 -0.31 -0.18 0.31 -0.02 0.29 -0.50 0.39 i15->h1 i16->h1
i17->h1 i18->h1 i19->h1 i20->h1 i21->h1 i22->h1 i23->h1 i24->h1 i25->h1
i26->h1 i27->h1 i28->h1 i29->h1 0.25 -0.16 -0.55 -0.52 0.25 -0.65 -0.15 -0.03
-0.20 0.30 -0.16 -0.04 0.49 0.56 0.44 i30->h1 i31->h1 i32->h1 i33->h1 i34->h1
i35->h1 i36->h1 i37->h1 i38->h1 i39->h1 i40->h1 i41->h1 i42->h1 i43->h1
i44->h1 0.41 0.51 0.38 0.22 0.47 -0.41 0.15 -0.22 0.46 -0.08 -0.41 0.33 -0.54
0.56 0.59 i45->h1 i46->h1 i47->h1 i48->h1 i49->h1 i50->h1 i51->h1 i52->h1
i53->h1 i54->h1 i55->h1 i56->h1 i57->h1 i58->h1 i59->h1 0.64 0.13 -0.68 -0.51
0.55 0.05 0.15 0.31 -0.15 0.24 0.02 0.33 -0.44 -0.47 -0.68 i60->h1 i61->h1
i62->h1 i63->h1 i64->h1 i65->h1 i66->h1 i67->h1 i68->h1 i69->h1 i70->h1
i71->h1 i72->h1 i73->h1 0.07 0.30 0.35 -0.01 0.09 0.65 -0.36 -0.41 -0.56 0.50
-0.53 -0.19 -0.24 -0.62

Weights for node h2: b->h2 i1->h2 i2->h2 i3->h2 i4->h2 i5->h2 i6->h2 i7->h2
i8->h2 i9->h2 i10->h2 i11->h2 i12->h2 i13->h2 i14->h2 0.23 -0.47 -0.14 -0.28
0.33 0.44 -0.07 -0.08 0.51 -0.17 -0.26 0.07 -0.01 -0.52 0.14 i15->h2 i16->h2
i17->h2 i18->h2 i19->h2 i20->h2 i21->h2 i22->h2 i23->h2 i24->h2 i25->h2
i26->h2 i27->h2 i28->h2 i29->h2 -0.18 -0.62 0.70 -0.04 -0.37 -0.06 -0.07 -0.12
0.41 0.37 0.03 -0.19 -0.46 0.05 0.29 i30->h2 i31->h2 i32->h2 i33->h2 i34->h2
i35->h2 i36->h2 i37->h2 i38->h2 i39->h2 i40->h2 i41->h2 i42->h2 i43->h2
i44->h2 -0.18 -0.51 -0.16 0.55 0.51 -0.57 -0.56 -0.02 0.09 0.21 0.62 0.06 0.66
0.07 -0.39 i45->h2 i46->h2 i47->h2 i48->h2 i49->h2 i50->h2 i51->h2 i52->h2
i53->h2 i54->h2 i55->h2 i56->h2 i57->h2 i58->h2 i59->h2 0.08 0.50 -0.64 0.12
0.45 -0.21 -0.54 -0.44 0.08 -0.61 0.57 0.30 0.64 0.16 -0.42 i60->h2 i61->h2
i62->h2 i63->h2 i64->h2 i65->h2 i66->h2 i67->h2 i68->h2 i69->h2 i70->h2
i71->h2 i72->h2 i73->h2 0.51 -0.59 -0.23 0.31 -0.19 0.69 -0.37 0.26 -0.18
-0.16 0.53 -0.42 -0.65 -0.30

Weights for node h3: b->h3 i1->h3 i2->h3 i3->h3 i4->h3 i5->h3 i6->h3 i7->h3
i8->h3 i9->h3 i10->h3 i11->h3 i12->h3 i13->h3 i14->h3 -0.49 -0.69 0.68 0.26
0.17 -0.22 0.23 -0.25 0.06 -0.52 -0.13 0.58 0.14 0.28 0.23 i15->h3 i16->h3
i17->h3 i18->h3 i19->h3 i20->h3 i21->h3 i22->h3 i23->h3 i24->h3 i25->h3
i26->h3 i27->h3 i28->h3 i29->h3 0.53 0.25 0.34 -0.02 -0.17 0.33 0.57 0.46 0.47
0.68 -0.44 -0.61 0.16 -0.65 0.20 i30->h3 i31->h3 i32->h3 i33->h3 i34->h3
i35->h3 i36->h3 i37->h3 i38->h3 i39->h3 i40->h3 i41->h3 i42->h3 i43->h3
i44->h3 0.55 -0.44 0.05 0.43 -0.24 0.63 -0.07 -0.59 0.50 0.35 0.31 -0.15 0.14
0.30 0.50 i45->h3 i46->h3 i47->h3 i48->h3 i49->h3 i50->h3 i51->h3 i52->h3
i53->h3 i54->h3 i55->h3 i56->h3 i57->h3 i58->h3 i59->h3 -0.63 -0.54 -0.44 0.65
0.27 -0.49 -0.66 0.60 -0.56 0.19 0.04 -0.28 -0.38 -0.41 -0.14 i60->h3 i61->h3
i62->h3 i63->h3 i64->h3 i65->h3 i66->h3 i67->h3 i68->h3 i69->h3 i70->h3
i71->h3 i72->h3 i73->h3 -0.01 0.09 0.17 -0.45 0.61 -0.17 -0.07 -0.44 -0.22
-0.67 -0.07 0.57 -0.64 0.31

Weights for node h4: b->h4 i1->h4 i2->h4 i3->h4 i4->h4 i5->h4 i6->h4 i7->h4
i8->h4 i9->h4 i10->h4 i11->h4 i12->h4 i13->h4 i14->h4 -0.04 -0.70 0.40 -0.31
-0.02 0.64 0.12 -0.25 -0.17 -0.17 -0.33 0.68 -0.26 0.48 -0.51 i15->h4 i16->h4
i17->h4 i18->h4 i19->h4 i20->h4 i21->h4 i22->h4 i23->h4 i24->h4 i25->h4
i26->h4 i27->h4 i28->h4 i29->h4 0.24 -0.58 -0.58 -0.58 -0.41 0.31 0.18 0.09
0.35 -0.62 -0.17 0.44 0.36 -0.62 -0.55 i30->h4 i31->h4 i32->h4 i33->h4 i34->h4
i35->h4 i36->h4 i37->h4 i38->h4 i39->h4 i40->h4 i41->h4 i42->h4 i43->h4
i44->h4 0.31 -0.52 0.06 0.40 0.10 -0.07 -0.43 0.60 -0.63 0.12 0.36 -0.67 -0.58
-0.41 0.56 i45->h4 i46->h4 i47->h4 i48->h4 i49->h4 i50->h4 i51->h4 i52->h4
i53->h4 i54->h4 i55->h4 i56->h4 i57->h4 i58->h4 i59->h4 0.57 0.29 -0.28 0.25
-0.39 0.43 -0.29 -0.36 0.08 -0.61 0.36 -0.12 0.14 -0.25 -0.20 i60->h4 i61->h4
i62->h4 i63->h4 i64->h4 i65->h4 i66->h4 i67->h4 i68->h4 i69->h4 i70->h4
i71->h4 i72->h4 i73->h4 0.50 -0.15 0.10 -0.20 -0.69 0.50 -0.33 0.24 -0.17
-0.38 -0.09 -0.66 -0.37 -0.70

Weights for node h5: b->h5 i1->h5 i2->h5 i3->h5 i4->h5 i5->h5 i6->h5 i7->h5
i8->h5 i9->h5 i10->h5 i11->h5 i12->h5 i13->h5 i14->h5 0.04 0.26 -0.57 0.59
-0.15 -0.42 0.43 0.46 0.46 0.62 -0.35 0.68 0.30 -0.65 0.35 i15->h5 i16->h5
i17->h5 i18->h5 i19->h5 i20->h5 i21->h5 i22->h5 i23->h5 i24->h5 i25->h5
i26->h5 i27->h5 i28->h5 i29->h5 0.32 0.40 -0.53 0.07 -0.30 0.00 -0.16 0.27
-0.05 0.30 -0.55 -0.09 -0.39 -0.59 0.42 i30->h5 i31->h5 i32->h5 i33->h5
i34->h5 i35->h5 i36->h5 i37->h5 i38->h5 i39->h5 i40->h5 i41->h5 i42->h5
i43->h5 i44->h5 0.35 -0.10 -0.54 -0.17 -0.59 -0.53 0.13 -0.70 -0.27 0.00 -0.64
-0.17 -0.45 -0.63 -0.33 i45->h5 i46->h5 i47->h5 i48->h5 i49->h5 i50->h5
i51->h5 i52->h5 i53->h5 i54->h5 i55->h5 i56->h5 i57->h5 i58->h5 i59->h5 -0.64
-0.03 0.40 0.64 0.53 -0.31 -0.39 -0.12 -0.24 -0.35 0.04 -0.09 -0.12 0.06 -0.20
i60->h5 i61->h5 i62->h5 i63->h5 i64->h5 i65->h5 i66->h5 i67->h5 i68->h5
i69->h5 i70->h5 i71->h5 i72->h5 i73->h5 0.56 0.03 -0.61 0.38 -0.68 0.64 0.27
0.15 -0.70 -0.67 -0.40 -0.63 -0.68 0.50

Weights for node h6: b->h6 i1->h6 i2->h6 i3->h6 i4->h6 i5->h6 i6->h6 i7->h6
i8->h6 i9->h6 i10->h6 i11->h6 i12->h6 i13->h6 i14->h6 0.05 -0.07 0.17 0.02
-0.05 -0.13 -0.27 -0.07 0.54 -0.41 -0.05 0.42 0.07 -0.36 -0.50 i15->h6 i16->h6
i17->h6 i18->h6 i19->h6 i20->h6 i21->h6 i22->h6 i23->h6 i24->h6 i25->h6
i26->h6 i27->h6 i28->h6 i29->h6 -0.32 0.26 -0.52 0.53 0.23 -0.59 -0.40 0.12
0.08 0.28 0.12 -0.48 -0.65 -0.36 0.32 i30->h6 i31->h6 i32->h6 i33->h6 i34->h6
i35->h6 i36->h6 i37->h6 i38->h6 i39->h6 i40->h6 i41->h6 i42->h6 i43->h6
i44->h6 -0.21 0.52 0.04 -0.49 -0.47 0.51 0.15 -0.34 -0.46 -0.16 -0.13 -0.14
0.15 0.34 -0.35 i45->h6 i46->h6 i47->h6 i48->h6 i49->h6 i50->h6 i51->h6
i52->h6 i53->h6 i54->h6 i55->h6 i56->h6 i57->h6 i58->h6 i59->h6 0.50 0.58
-0.46 0.04 0.35 -0.39 0.59 -0.69 0.42 0.43 0.66 0.31 -0.14 -0.02 0.08 i60->h6
i61->h6 i62->h6 i63->h6 i64->h6 i65->h6 i66->h6 i67->h6 i68->h6 i69->h6
i70->h6 i71->h6 i72->h6 i73->h6 -0.54 -0.43 0.03 0.46 -0.31 0.62 -0.49 0.48
-0.31 -0.55 0.30 0.26 -0.46 0.59

Weights for node h7: b->h7 i1->h7 i2->h7 i3->h7 i4->h7 i5->h7 i6->h7 i7->h7
i8->h7 i9->h7 i10->h7 i11->h7 i12->h7 i13->h7 i14->h7 -0.15 -0.20 0.34 0.64
0.48 0.49 -0.63 -0.69 0.11 0.66 0.01 0.27 0.38 0.07 0.39 i15->h7 i16->h7
i17->h7 i18->h7 i19->h7 i20->h7 i21->h7 i22->h7 i23->h7 i24->h7 i25->h7
i26->h7 i27->h7 i28->h7 i29->h7 0.56 -0.01 0.28 0.47 0.27 -0.54 0.25 -0.33
0.57 0.08 0.50 0.45 -0.64 -0.04 0.30 i30->h7 i31->h7 i32->h7 i33->h7 i34->h7
i35->h7 i36->h7 i37->h7 i38->h7 i39->h7 i40->h7 i41->h7 i42->h7 i43->h7
i44->h7 0.60 0.15 0.66 -0.09 0.59 0.17 0.43 -0.69 0.53 -0.54 -0.23 0.22 -0.06
-0.31 -0.36 i45->h7 i46->h7 i47->h7 i48->h7 i49->h7 i50->h7 i51->h7 i52->h7
i53->h7 i54->h7 i55->h7 i56->h7 i57->h7 i58->h7 i59->h7 0.02 -0.24 -0.21 -0.08
0.52 0.01 0.14 -0.64 -0.08 0.41 0.36 -0.51 -0.65 -0.38 -0.69 i60->h7 i61->h7
i62->h7 i63->h7 i64->h7 i65->h7 i66->h7 i67->h7 i68->h7 i69->h7 i70->h7
i71->h7 i72->h7 i73->h7 0.67 -0.30 0.32 0.52 -0.26 -0.24 0.39 0.01 -0.24 0.56
-0.56 0.25 -0.02 0.20

Weights for node h8: b->h8 i1->h8 i2->h8 i3->h8 i4->h8 i5->h8 i6->h8 i7->h8
i8->h8 i9->h8 i10->h8 i11->h8 i12->h8 i13->h8 i14->h8 -0.37 -0.30 0.22 0.44
0.63 0.61 -0.67 0.55 0.70 -0.44 -0.35 0.32 -0.47 -0.52 0.16 i15->h8 i16->h8
i17->h8 i18->h8 i19->h8 i20->h8 i21->h8 i22->h8 i23->h8 i24->h8 i25->h8
i26->h8 i27->h8 i28->h8 i29->h8 0.31 -0.23 -0.50 0.07 -0.45 0.09 -0.46 0.03
0.00 0.54 -0.37 -0.49 0.55 0.12 -0.52 i30->h8 i31->h8 i32->h8 i33->h8 i34->h8
i35->h8 i36->h8 i37->h8 i38->h8 i39->h8 i40->h8 i41->h8 i42->h8 i43->h8
i44->h8 0.56 -0.01 -0.35 -0.56 0.30 0.57 0.40 0.36 -0.16 0.57 0.15 0.30 -0.64
0.57 0.25 i45->h8 i46->h8 i47->h8 i48->h8 i49->h8 i50->h8 i51->h8 i52->h8
i53->h8 i54->h8 i55->h8 i56->h8 i57->h8 i58->h8 i59->h8 0.61 -0.66 0.54 -0.43
-0.49 0.21 -0.15 -0.66 0.55 0.24 -0.42 -0.55 -0.62 -0.66 -0.21 i60->h8 i61->h8
i62->h8 i63->h8 i64->h8 i65->h8 i66->h8 i67->h8 i68->h8 i69->h8 i70->h8
i71->h8 i72->h8 i73->h8 -0.54 0.14 0.31 0.13 0.24 0.51 0.49 -0.56 -0.47 -0.60
-0.15 -0.38 0.18 -0.28

Weights for node h9: b->h9 i1->h9 i2->h9 i3->h9 i4->h9 i5->h9 i6->h9 i7->h9
i8->h9 i9->h9 i10->h9 i11->h9 i12->h9 i13->h9 i14->h9 0.18 0.01 -0.59 0.59
0.51 -0.15 -0.03 0.11 0.32 0.51 -0.66 0.29 -0.46 0.63 -0.53 i15->h9 i16->h9
i17->h9 i18->h9 i19->h9 i20->h9 i21->h9 i22->h9 i23->h9 i24->h9 i25->h9
i26->h9 i27->h9 i28->h9 i29->h9 -0.05 -0.11 -0.64 0.23 0.58 -0.26 -0.61 0.41
-0.16 0.26 0.59 0.52 0.68 -0.16 0.37 i30->h9 i31->h9 i32->h9 i33->h9 i34->h9
i35->h9 i36->h9 i37->h9 i38->h9 i39->h9 i40->h9 i41->h9 i42->h9 i43->h9
i44->h9 -0.21 0.04 -0.56 0.44 -0.32 -0.12 -0.42 -0.21 0.55 -0.57 0.17 0.56
0.11 -0.53 -0.63 i45->h9 i46->h9 i47->h9 i48->h9 i49->h9 i50->h9 i51->h9
i52->h9 i53->h9 i54->h9 i55->h9 i56->h9 i57->h9 i58->h9 i59->h9 -0.65 -0.47
-0.09 0.21 -0.27 -0.38 0.06 -0.34 -0.55 -0.63 -0.20 -0.47 0.49 0.42 -0.53
i60->h9 i61->h9 i62->h9 i63->h9 i64->h9 i65->h9 i66->h9 i67->h9 i68->h9
i69->h9 i70->h9 i71->h9 i72->h9 i73->h9 0.48 0.51 -0.34 -0.08 -0.63 -0.33
-0.08 -0.42 0.57 -0.09 0.47 -0.44 -0.15 0.53

Weights for node h10: b->h10 i1->h10 i2->h10 i3->h10 i4->h10 i5->h10 i6->h10
i7->h10 i8->h10 i9->h10 i10->h10 i11->h10 i12->h10 -0.66 0.40 -0.08 0.06 -0.16
-0.13 -0.16 0.21 0.25 -0.30 -0.29 0.10 0.58 i13->h10 i14->h10 i15->h10
i16->h10 i17->h10 i18->h10 i19->h10 i20->h10 i21->h10 i22->h10 i23->h10
i24->h10 i25->h10 0.16 -0.38 0.20 0.16 -0.45 -0.09 -0.23 0.03 -0.37 -0.23 0.35
-0.14 -0.36 i26->h10 i27->h10 i28->h10 i29->h10 i30->h10 i31->h10 i32->h10
i33->h10 i34->h10 i35->h10 i36->h10 i37->h10 i38->h10 -0.33 -0.36 0.05 -0.36
0.52 -0.54 -0.06 0.15 -0.02 -0.16 0.52 0.59 -0.35 i39->h10 i40->h10 i41->h10
i42->h10 i43->h10 i44->h10 i45->h10 i46->h10 i47->h10 i48->h10 i49->h10
i50->h10 i51->h10 -0.30 0.03 -0.07 -0.56 -0.62 0.21 -0.14 0.05 0.56 0.06 0.59
-0.18 -0.18 i52->h10 i53->h10 i54->h10 i55->h10 i56->h10 i57->h10 i58->h10
i59->h10 i60->h10 i61->h10 i62->h10 i63->h10 i64->h10 -0.04 -0.68 -0.05 -0.40
0.36 -0.33 0.06 0.41 -0.11 0.49 -0.24 0.41 0.60 i65->h10 i66->h10 i67->h10
i68->h10 i69->h10 i70->h10 i71->h10 i72->h10 i73->h10 -0.07 -0.01 -0.53 0.61
-0.35 0.24 0.09 -0.32 0.60

Weights for node o: b->o h1->o h2->o h3->o h4->o h5->o h6->o h7->o h8->o h9->o
h10->o i1->o i2->o i3->o i4->o i5->o i6->o -0.40 -0.67 0.13 -0.09 -0.14 0.44
0.57 -0.58 -0.10 0.69 0.25 0.23 0.60 0.15 0.61 0.04 -0.05 i7->o i8->o i9->o
i10->o i11->o i12->o i13->o i14->o i15->o i16->o i17->o i18->o i19->o i20->o
i21->o i22->o i23->o 0.03 0.65 0.35 -0.11 -0.24 0.33 0.30 -0.38 -0.26 -0.40
-0.26 -0.52 0.20 0.41 -0.42 -0.15 -0.47 i24->o i25->o i26->o i27->o i28->o
i29->o i30->o i31->o i32->o i33->o i34->o i35->o i36->o i37->o i38->o i39->o
i40->o -0.31 -0.07 -0.18 0.63 0.39 -0.12 -0.22 -0.38 -0.12 -0.06 0.07 0.27
0.09 0.66 0.00 -0.67 -0.51 i41->o i42->o i43->o i44->o i45->o i46->o i47->o
i48->o i49->o i50->o i51->o i52->o i53->o i54->o i55->o i56->o i57->o -0.11
0.66 -0.28 -0.42 0.44 -0.66 -0.21 0.57 -0.51 -0.64 0.12 0.51 -0.65 -0.62 0.47
-0.22 -0.36 i58->o i59->o i60->o i61->o i62->o i63->o i64->o i65->o i66->o
i67->o i68->o i69->o i70->o i71->o i72->o i73->o 0.31 0.16 -0.13 0.26 0.09
0.07 -0.37 -0.54 0.23 0.20 -0.09 -0.46 -0.68 0.39 -0.63 0.26

Time taken: 0.97 secs

## Validation¶

This are the testing probabilities on the resiliation indicator. 0 for renewed
and 1 for potential policy remove. I will make for all the possible models and
then i will choose who's better ofr the predicting job.

### Error Matrix¶

Error matrix for the **Decision Tree** model on Model_Data_models100k.csv
[validate] (**counts**):

    
    
          Predicted
    Actual    0 1 Error
         0 8024 0     0
         1 3096 0   100
    
    

Error matrix for the **Decision Tree** model on Model_Data_models100k.csv
[validate] (**proportions**):

    
    
          Predicted
    Actual    0 1 Error
         0 72.2 0     0
         1 27.8 0   100
    
    

Overall error: 27.8%, Averaged class error: 50%

## Rattle timestamp: 2017-11-25 02:49:06 Yabir¶

Error matrix for the **Extreme Boost** model on Model_Data_models100k.csv
[validate] (**counts**):

    
    
          Predicted
    Actual    0  1 Error
         0 1092 63   5.5
         1  352 44  88.9
    
    

Error matrix for the **Extreme Boost** model on Model_Data_models100k.csv
[validate] (**proportions**):

    
    
          Predicted
    Actual    0   1 Error
         0 70.4 4.1   5.5
         1 22.7 2.8  88.9
    
    

Overall error: 26.8%, Averaged class error: 47.2%

## Rattle timestamp: 2017-11-25 02:49:07 Yabir¶

Error matrix for the **Random Forest** model on Model_Data_models100k.csv
[validate] (**counts**):

    
    
          Predicted
    Actual    0  1 Error
         0 1133 22   1.9
         1  369 27  93.2
    
    

Error matrix for the **Random Forest** model on Model_Data_models100k.csv
[validate] (**proportions**):

    
    
          Predicted
    Actual    0   1 Error
         0 73.0 1.4   1.9
         1 23.8 1.7  93.2
    
    

Overall error: 25.3%, Averaged class error: 47.55%

## Rattle timestamp: 2017-11-25 02:49:08 Yabir¶

Error matrix for the **SVM** model on Model_Data_models100k.csv [validate]
(**counts**):

    
    
          Predicted
    Actual    0 1 Error
         0 1154 1   0.1
         1  395 1  99.7
    
    

Error matrix for the **SVM** model on Model_Data_models100k.csv [validate]
(**proportions**):

    
    
          Predicted
    Actual    0   1 Error
         0 74.4 0.1   0.1
         1 25.5 0.1  99.7
    
    

Overall error: 25.5%, Averaged class error: 49.9%

## Rattle timestamp: 2017-11-25 02:49:09 Yabir¶

Error matrix for the **Neural Net** model on Model_Data_models100k.csv
[validate] (**counts**):

    
    
          Predicted
    Actual    0 Error
         0 1155     0
         1  396   100
    
    

Error matrix for the **Neural Net** model on Model_Data_models100k.csv
[validate] (**proportions**):

    
    
          Predicted
    Actual    0 Error
         0 74.5     0
         1 25.5   100
    
    

Overall error: -74.5%, Averaged class error: 50%

## Rattle timestamp: 2017-11-25 02:49:09 Yabir¶

The **Extreme Boost** got the best qualification for what we want since this
was the model with best true positive results (44 predicted of 396 samples).

## Models Receiver Operating Characteristic (ROC) curve¶

### Decision Tree¶

![](https://image.ibb.co/dnYjV6/decisiontreeroc.png)

### Extreme Boost¶

![](https://image.ibb.co/me0niR/bostroc.png)

### Random Forest¶

![](https://image.ibb.co/f9kyq6/Randomforestroc.png)

### SVM¶

![](https://image.ibb.co/nNcBA6/svmRoc.png)

### Neural Network¶

![](https://image.ibb.co/cnNdq6/neural_Net_Roc.png)

As we can see in the plots above, the Decision Tree Model is the more accurate
predictive one for this project, since it has the greatest Area Under the
Curve (AUC) which is **0.65**.

## Models Risks¶

### Decision Tree¶

![](https://image.ibb.co/eemMA6/Decision_Tree_Risk.png)

The area under the Recall curve for Decision Tree model

  * Area under the Recall (green) curve: **70%** (0.703)
  * Area under the Risk (red) curve: **65%** (0.650)

### Extreme Boost¶

![](https://image.ibb.co/hNmzxm/Extreme_Boost.png)

The area under the Recall curve for Extreme Boost model

  * Area under the Recall (green) curve: **66%** (0.661)
  * Area under the Risk (red) curve: **61%** (0.613)

### Random Forest¶

![](https://image.ibb.co/dkXuV6/random_Forest_Risk.png)

The area under the Recall curve for Random Forest model

  * Area under the Recall (green) curve: **68%** (0.676)
  * Area under the Risk (red) curve: **63%** (0.626)

### SVM¶

![](https://image.ibb.co/hP5sHm/svm_risk.png)

The area under the Recall curve for SVM model

  * Area under the Recall (green) curve: **66%** (0.656)
  * Area under the Risk (red) curve: **59%** (0.594)

Again, the **Decision Tree** model appears as the best predictif option since
the AUC of it has **70%** recall

# Testing¶

For the testing i will choose the **Decision Tree** since it was the best
predictive model to know those clients who have more probabilities to dismiss
their policy.

As we saw earlier, the clients that doesn't have a marital status of **B** or
**P** have already **76%** probabilities of resiliate their policy and for
this subset those who have a **Non-DD (Non-Direct Debit)** method of payment
have a 40% of resiliate the policy too. This means that the clients that don't
have a financial engagement with the company are more likely to cancel their
policy (since they are free to go when they want to).

# Solution Proposed¶

Already explored all the data, models and discovered some insights, I suggest
to this Insurance company to offer extra privileges if the clients choose the
**Direct-Debit** payment method, since the clients with financial engagement
are the ones more likely to stay in the insurance company and therefore are
the most loyal to it. I also suggest that it will be better to do this "extra
privileges" marketing in the **first and last trimester of the year** , since
these are the months with the best earnings for the company and last but not
least I suggest to aim this marketing specially to the **Retired** people
since they are the ones who buy the most insurance in the history of the
company.

