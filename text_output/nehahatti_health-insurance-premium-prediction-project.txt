In [1]:

    
    
    # This Python 3 environment comes with many helpful analytics libraries installed
    # It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
    # For example, here's several helpful packages to load
    
    import numpy as np # linear algebra
    import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
    
    # Input data files are available in the read-only "../input/" directory
    # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory
    
    import os
    for dirname, _, filenames in os.walk('/kaggle/input'):
        for filename in filenames:
            print(os.path.join(dirname, filename))
    
    # You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
    # You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session
    
    
    
    /kaggle/input/insurance-premium-prediction/insurance.csv
    

In [2]:

    
    
    df = pd.read_csv('../input/insurance-premium-prediction/insurance.csv')
    

In [3]:

    
    
    df.head()
    

Out[3]:

| age | sex | bmi | children | smoker | region | expenses  
---|---|---|---|---|---|---|---  
0 | 19 | female | 27.9 | 0 | yes | southwest | 16884.92  
1 | 18 | male | 33.8 | 1 | no | southeast | 1725.55  
2 | 28 | male | 33.0 | 3 | no | southeast | 4449.46  
3 | 33 | male | 22.7 | 0 | no | northwest | 21984.47  
4 | 32 | male | 28.9 | 0 | no | northwest | 3866.86  
  
In [4]:

    
    
    df.shape
    

Out[4]:

    
    
    (1338, 7)

In [5]:

    
    
    df.describe()
    

Out[5]:

| age | bmi | children | expenses  
---|---|---|---|---  
count | 1338.000000 | 1338.000000 | 1338.000000 | 1338.000000  
mean | 39.207025 | 30.665471 | 1.094918 | 13270.422414  
std | 14.049960 | 6.098382 | 1.205493 | 12110.011240  
min | 18.000000 | 16.000000 | 0.000000 | 1121.870000  
25% | 27.000000 | 26.300000 | 0.000000 | 4740.287500  
50% | 39.000000 | 30.400000 | 1.000000 | 9382.030000  
75% | 51.000000 | 34.700000 | 2.000000 | 16639.915000  
max | 64.000000 | 53.100000 | 5.000000 | 63770.430000  
  
In [6]:

    
    
    df.isnull().sum()
    

Out[6]:

    
    
    age         0
    sex         0
    bmi         0
    children    0
    smoker      0
    region      0
    expenses    0
    dtype: int64

In [7]:

    
    
    import seaborn as sns
    import plotly.express as px
    

In [8]:

    
    
    plot = px.histogram(df, x='sex', color='smoker')
    plot.show()
    

In [9]:

    
    
    df['sex']=df['sex'].map({'female':0, 'male':1})
    df['smoker']=df['smoker'].map({'no':0, 'yes':1})
    

In [10]:

    
    
    df.head()
    

Out[10]:

| age | sex | bmi | children | smoker | region | expenses  
---|---|---|---|---|---|---|---  
0 | 19 | 0 | 27.9 | 0 | 1 | southwest | 16884.92  
1 | 18 | 1 | 33.8 | 1 | 0 | southeast | 1725.55  
2 | 28 | 1 | 33.0 | 3 | 0 | southeast | 4449.46  
3 | 33 | 1 | 22.7 | 0 | 0 | northwest | 21984.47  
4 | 32 | 1 | 28.9 | 0 | 0 | northwest | 3866.86  
  
In [11]:

    
    
    import plotly.express as px
    

In [12]:

    
    
    pie = df['region'].value_counts()
    a = pie.index
    b = pie.values
    fig = px.pie(df, values=b, names=a)
    fig.show()
    

In [13]:

    
    
    df.corr()
    

Out[13]:

| age | sex | bmi | children | smoker | expenses  
---|---|---|---|---|---|---  
age | 1.000000 | -0.020856 | 0.109341 | 0.042469 | -0.025019 | 0.299008  
sex | -0.020856 | 1.000000 | 0.046380 | 0.017163 | 0.076185 | 0.057292  
bmi | 0.109341 | 0.046380 | 1.000000 | 0.012645 | 0.003968 | 0.198576  
children | 0.042469 | 0.017163 | 0.012645 | 1.000000 | 0.007673 | 0.067998  
smoker | -0.025019 | 0.076185 | 0.003968 | 0.007673 | 1.000000 | 0.787251  
expenses | 0.299008 | 0.057292 | 0.198576 | 0.067998 | 0.787251 | 1.000000  
  
In [14]:

    
    
    X = np.array(df[['age', 'sex', 'bmi', 'smoker']])
    y = np.array(df['expenses'])
    

In [15]:

    
    
    from sklearn.model_selection import train_test_split
    

In [16]:

    
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=3)
    

In [17]:

    
    
    X_train.shape
    

Out[17]:

    
    
    (1070, 4)

In [18]:

    
    
    y_train.shape
    

Out[18]:

    
    
    (1070,)

In [19]:

    
    
    from sklearn.ensemble import RandomForestRegressor
    

In [20]:

    
    
    model = RandomForestRegressor()
    

In [21]:

    
    
    model.fit(X_train, y_train)
    

Out[21]:

    
    
    RandomForestRegressor()

In [22]:

    
    
    pred = model.predict(X_test)
    

In [23]:

    
    
    pred
    

Out[23]:

    
    
    array([ 5052.0636    , 10845.0614    ,  3298.6514    , 15861.8528    ,
            2524.596375  , 19657.2457    ,  6954.8122    ,  1684.6052    ,
           13567.5395    ,  4840.766     ,  9884.9858    , 15036.9026    ,
            1869.00963333, 14596.6737    ,  5547.6724    , 14931.1439    ,
           11404.6096    ,  5686.5542    ,  3662.806     ,  9746.76413333,
           14287.45863333,  6889.7764    ,  6922.7081    ,  6185.2128    ,
           13315.0673    , 16498.9945    ,  5541.1172    ,  6669.9876    ,
            4900.7828    ,  7178.16022   ,  1804.6649    , 14231.7559    ,
            3300.9416    ,  4537.544     ,  2658.69936667, 43197.8541    ,
            4614.0052    ,  4958.0235    ,  3816.9333    ,  5366.0944    ,
            4522.5281    , 17017.0959    ,  6860.05343333, 16566.1215    ,
           40841.0333    ,  7924.45938   ,  7756.2236    ,  6979.0082    ,
            2914.0637    , 18455.9209    ,  6315.2629    , 39806.3317    ,
            2453.8094    , 13507.7602    , 48390.6234    , 10076.0299    ,
           40492.8405    ,  1881.6138    , 21138.9615    , 11933.3543    ,
            2475.6088    ,  4837.9982    , 14098.3757    , 15527.2595    ,
            2031.2673    ,  5218.6475    , 21613.2159    ,  7607.91528333,
           43179.7757    , 14337.1759    ,  4953.4022    ,  5508.383     ,
           21902.7225    ,  6124.1325    , 11641.3307    ,  1893.1676    ,
           39422.1353    ,  8089.7536    , 13965.1913    ,  2042.3944    ,
            7940.8511    ,  9151.8453    ,  6908.0516    ,  9396.0944    ,
            8363.0052    , 17726.3016    , 14288.0672    , 11494.439     ,
           48036.5132    , 21866.2734    , 19760.1503    , 40107.9061    ,
            1881.6138    ,  1650.0465    , 12094.371185  , 34713.9921    ,
            5167.8019    , 13331.7026    , 27155.0951    , 34670.119     ,
           11892.1723    ,  7476.6738    ,  7062.6598    ,  7973.63958   ,
           37639.0324    ,  7202.5196    , 15089.8903    ,  9832.7201    ,
           11326.2186    ,  9314.0639    , 13495.6617    ,  6693.2104    ,
            7905.5383    , 22595.3072    ,  3596.3067    ,  3166.8444    ,
            2228.2605    , 44588.8266    ,  7442.0093    , 10834.826     ,
           45424.7263    ,  3562.606     , 45715.921     ,  9582.7365    ,
           14867.4703    , 10622.6744    ,  9289.6079    , 14499.8954    ,
           48071.4769    , 16541.3923    , 15982.9788    , 15147.0877    ,
            4206.3888    ,  7824.3057    ,  1836.3817    ,  5580.6303    ,
           15482.4725    , 39510.0355    ,  7714.3244    ,  5357.7036    ,
           16998.8609    , 36911.3752    ,  5258.0958    ,  3458.3048    ,
            1815.9805    , 17324.8838    , 10053.1586    ,  8209.4737    ,
           11539.0252    , 14236.0319    ,  5995.5864    , 14395.7892    ,
            2478.4674    ,  3254.7356    ,  8058.3775    , 17874.1707    ,
           10576.3199    ,  9671.5457    ,  7175.17078333,  2979.7358    ,
            7236.9835    ,  1987.9458    , 15464.1372    ,  7606.509     ,
            3353.52337   , 37461.0063    , 12781.76      , 14510.1541    ,
           14197.2224    , 46006.9245    ,  8767.671205  , 16634.3876    ,
            7297.707     , 10139.8792    ,  9021.2761    ,  2872.0199    ,
           47692.1279    , 12308.7003    ,  4556.635     , 42124.8763    ,
           10051.9747    , 35344.8646    ,  9757.2224    , 12615.2383    ,
           13931.1571    ,  1945.8425    ,  2176.2131    ,  7917.2561    ,
           13102.7557    , 11555.5701    , 24403.9092    , 11111.113     ,
           14191.2239    , 15556.9189    , 13373.2707    ,  7658.6325    ,
           17523.9704    , 47491.5693    ,  1779.186     ,  6379.7368    ,
            6458.3555    ,  1839.0588    ,  7041.0656    ,  4655.14      ,
            4973.6155    ,  5690.1638    ,  3338.4566    , 15363.9578    ,
           10899.4479    , 28957.1404    , 15303.4943    , 34670.119     ,
           12136.106     ,  4767.9834    ,  5139.5416    ,  3879.9784    ,
           36090.4255    ,  3590.9165    , 13926.4032    ,  2692.1943    ,
           14836.5712    , 12381.2291    ,  7193.2449    , 11584.9196    ,
           45961.0547    ,  2609.9569    , 20678.5951    , 10508.3935    ,
            9003.3682    , 10558.5816    ,  6417.7797    , 18905.0008    ,
           25187.6443    , 45708.4711    , 29215.9832    ,  5555.0095    ,
            5647.0255    ,  4115.8833    ,  7181.0655    , 35740.2295    ,
            1806.8468    ,  4976.8754    ,  2930.8635    , 22290.0858    ,
           13469.4895    ,  6849.3964    , 27231.4555    , 48764.8131    ,
            7429.07034   ,  2399.2635    , 29821.4063    , 13084.6205    ,
            5015.2156    ,  6178.2975    , 25048.9088    , 15298.5404    ,
            3366.18537   , 19968.9625    ,  2449.1291    , 12803.9323    ,
            4124.8818    , 12090.6377    , 40392.3234    , 17633.1374    ,
            5683.4534    , 14102.56926667, 11475.6259    ,  9249.18326333])

In [ ]:

    
    
     
    

