In [1]:

    
    
    # This Python 3 environment comes with many helpful analytics libraries installed
    # It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
    # For example, here's several helpful packages to load
    
    import numpy as np # linear algebra
    import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
    
    # Input data files are available in the read-only "../input/" directory
    # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory
    
    import os
    for dirname, _, filenames in os.walk('/kaggle/input'):
        for filename in filenames:
            print(os.path.join(dirname, filename))
    
    # You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
    # You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session
    
    
    
    /kaggle/input/vehicle-insurance-fraud-detection/carclaims.csv
    

In [2]:

    
    
    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt
    import seaborn as sns
    

In [3]:

    
    
    df = pd.read_csv("/kaggle/input/vehicle-insurance-fraud-detection/carclaims.csv")
    

In [4]:

    
    
    df
    

Out[4]:

| Month | WeekOfMonth | DayOfWeek | Make | AccidentArea | DayOfWeekClaimed | MonthClaimed | WeekOfMonthClaimed | Sex | MaritalStatus | ... | AgeOfPolicyHolder | PoliceReportFiled | WitnessPresent | AgentType | NumberOfSuppliments | AddressChange-Claim | NumberOfCars | Year | BasePolicy | FraudFound  
---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---  
0 | Dec | 5 | Wednesday | Honda | Urban | Tuesday | Jan | 1 | Female | Single | ... | 26 to 30 | No | No | External | none | 1 year | 3 to 4 | 1994 | Liability | No  
1 | Jan | 3 | Wednesday | Honda | Urban | Monday | Jan | 4 | Male | Single | ... | 31 to 35 | Yes | No | External | none | no change | 1 vehicle | 1994 | Collision | No  
2 | Oct | 5 | Friday | Honda | Urban | Thursday | Nov | 2 | Male | Married | ... | 41 to 50 | No | No | External | none | no change | 1 vehicle | 1994 | Collision | No  
3 | Jun | 2 | Saturday | Toyota | Rural | Friday | Jul | 1 | Male | Married | ... | 51 to 65 | Yes | No | External | more than 5 | no change | 1 vehicle | 1994 | Liability | No  
4 | Jan | 5 | Monday | Honda | Urban | Tuesday | Feb | 2 | Female | Single | ... | 31 to 35 | No | No | External | none | no change | 1 vehicle | 1994 | Collision | No  
... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ...  
15415 | Nov | 4 | Friday | Toyota | Urban | Tuesday | Nov | 5 | Male | Married | ... | 31 to 35 | No | No | External | none | no change | 1 vehicle | 1996 | Collision | Yes  
15416 | Nov | 5 | Thursday | Pontiac | Urban | Friday | Dec | 1 | Male | Married | ... | 31 to 35 | No | No | External | more than 5 | no change | 3 to 4 | 1996 | Liability | No  
15417 | Nov | 5 | Thursday | Toyota | Rural | Friday | Dec | 1 | Male | Single | ... | 26 to 30 | No | No | External | 1 to 2 | no change | 1 vehicle | 1996 | Collision | Yes  
15418 | Dec | 1 | Monday | Toyota | Urban | Thursday | Dec | 2 | Female | Married | ... | 31 to 35 | No | No | External | more than 5 | no change | 1 vehicle | 1996 | All Perils | No  
15419 | Dec | 2 | Wednesday | Toyota | Urban | Thursday | Dec | 3 | Male | Single | ... | 26 to 30 | No | No | External | 1 to 2 | no change | 1 vehicle | 1996 | Collision | Yes  
  
15420 rows Ã 33 columns

In [5]:

    
    
    df.isnull().sum()
    

Out[5]:

    
    
    Month                   0
    WeekOfMonth             0
    DayOfWeek               0
    Make                    0
    AccidentArea            0
    DayOfWeekClaimed        0
    MonthClaimed            0
    WeekOfMonthClaimed      0
    Sex                     0
    MaritalStatus           0
    Age                     0
    Fault                   0
    PolicyType              0
    VehicleCategory         0
    VehiclePrice            0
    PolicyNumber            0
    RepNumber               0
    Deductible              0
    DriverRating            0
    Days:Policy-Accident    0
    Days:Policy-Claim       0
    PastNumberOfClaims      0
    AgeOfVehicle            0
    AgeOfPolicyHolder       0
    PoliceReportFiled       0
    WitnessPresent          0
    AgentType               0
    NumberOfSuppliments     0
    AddressChange-Claim     0
    NumberOfCars            0
    Year                    0
    BasePolicy              0
    FraudFound              0
    dtype: int64

In [6]:

    
    
    df.describe()
    

Out[6]:

| WeekOfMonth | WeekOfMonthClaimed | Age | PolicyNumber | RepNumber | Deductible | DriverRating | Year  
---|---|---|---|---|---|---|---|---  
count | 15420.000000 | 15420.000000 | 15420.000000 | 15420.000000 | 15420.000000 | 15420.000000 | 15420.000000 | 15420.000000  
mean | 2.788586 | 2.693969 | 39.855707 | 7710.500000 | 8.483268 | 407.704280 | 2.487808 | 1994.866472  
std | 1.287585 | 1.259115 | 13.492377 | 4451.514911 | 4.599948 | 43.950998 | 1.119453 | 0.803313  
min | 1.000000 | 1.000000 | 0.000000 | 1.000000 | 1.000000 | 300.000000 | 1.000000 | 1994.000000  
25% | 2.000000 | 2.000000 | 31.000000 | 3855.750000 | 5.000000 | 400.000000 | 1.000000 | 1994.000000  
50% | 3.000000 | 3.000000 | 38.000000 | 7710.500000 | 8.000000 | 400.000000 | 2.000000 | 1995.000000  
75% | 4.000000 | 4.000000 | 48.000000 | 11565.250000 | 12.000000 | 400.000000 | 3.000000 | 1996.000000  
max | 5.000000 | 5.000000 | 80.000000 | 15420.000000 | 16.000000 | 700.000000 | 4.000000 | 1996.000000  
  
In [7]:

    
    
    df.info()
    
    
    
    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 15420 entries, 0 to 15419
    Data columns (total 33 columns):
     #   Column                Non-Null Count  Dtype 
    ---  ------                --------------  ----- 
     0   Month                 15420 non-null  object
     1   WeekOfMonth           15420 non-null  int64 
     2   DayOfWeek             15420 non-null  object
     3   Make                  15420 non-null  object
     4   AccidentArea          15420 non-null  object
     5   DayOfWeekClaimed      15420 non-null  object
     6   MonthClaimed          15420 non-null  object
     7   WeekOfMonthClaimed    15420 non-null  int64 
     8   Sex                   15420 non-null  object
     9   MaritalStatus         15420 non-null  object
     10  Age                   15420 non-null  int64 
     11  Fault                 15420 non-null  object
     12  PolicyType            15420 non-null  object
     13  VehicleCategory       15420 non-null  object
     14  VehiclePrice          15420 non-null  object
     15  PolicyNumber          15420 non-null  int64 
     16  RepNumber             15420 non-null  int64 
     17  Deductible            15420 non-null  int64 
     18  DriverRating          15420 non-null  int64 
     19  Days:Policy-Accident  15420 non-null  object
     20  Days:Policy-Claim     15420 non-null  object
     21  PastNumberOfClaims    15420 non-null  object
     22  AgeOfVehicle          15420 non-null  object
     23  AgeOfPolicyHolder     15420 non-null  object
     24  PoliceReportFiled     15420 non-null  object
     25  WitnessPresent        15420 non-null  object
     26  AgentType             15420 non-null  object
     27  NumberOfSuppliments   15420 non-null  object
     28  AddressChange-Claim   15420 non-null  object
     29  NumberOfCars          15420 non-null  object
     30  Year                  15420 non-null  int64 
     31  BasePolicy            15420 non-null  object
     32  FraudFound            15420 non-null  object
    dtypes: int64(8), object(25)
    memory usage: 3.9+ MB
    

In [8]:

    
    
    df.corr()
    

Out[8]:

| WeekOfMonth | WeekOfMonthClaimed | Age | PolicyNumber | RepNumber | Deductible | DriverRating | Year  
---|---|---|---|---|---|---|---|---  
WeekOfMonth | 1.000000 | 0.275400 | -0.004810 | -0.007797 | 0.005283 | -0.003993 | -0.016817 | -0.003906  
WeekOfMonthClaimed | 0.275400 | 1.000000 | 0.001859 | 0.011665 | 0.008908 | 0.005457 | -0.000048 | 0.012175  
Age | -0.004810 | 0.001859 | 1.000000 | 0.025944 | -0.007063 | 0.069420 | 0.001668 | 0.025197  
PolicyNumber | -0.007797 | 0.011665 | 0.025944 | 1.000000 | 0.008990 | 0.002133 | -0.012312 | 0.936513  
RepNumber | 0.005283 | 0.008908 | -0.007063 | 0.008990 | 1.000000 | 0.000509 | 0.011031 | 0.009338  
Deductible | -0.003993 | 0.005457 | 0.069420 | 0.002133 | 0.000509 | 1.000000 | 0.003886 | -0.001170  
DriverRating | -0.016817 | -0.000048 | 0.001668 | -0.012312 | 0.011031 | 0.003886 | 1.000000 | -0.013890  
Year | -0.003906 | 0.012175 | 0.025197 | 0.936513 | 0.009338 | -0.001170 | -0.013890 | 1.000000  
  
In [9]:

    
    
    df.drop(['Make','WeekOfMonth','DayOfWeek','DayOfWeekClaimed','MonthClaimed','WeekOfMonthClaimed','MaritalStatus','PolicyNumber','Days:Policy-Accident','AddressChange-Claim','Year',],axis = 1, inplace = True)
    

In [10]:

    
    
    df['AgeOfVehicle'].unique()
    

Out[10]:

    
    
    array(['3 years', '6 years', '7 years', 'more than 7', '5 years', 'new',
           '4 years', '2 years'], dtype=object)

In [11]:

    
    
    df['PastNumberOfClaims'].unique()
    

Out[11]:

    
    
    array(['none', '1', '2 to 4', 'more than 4'], dtype=object)

In [12]:

    
    
     df['AgeOfPolicyHolder'].unique()
    

Out[12]:

    
    
    array(['26 to 30', '31 to 35', '41 to 50', '51 to 65', '21 to 25',
           '36 to 40', '16 to 17', 'over 65', '18 to 20'], dtype=object)

In [13]:

    
    
    df['AgeOfVehicle'].unique()
    

Out[13]:

    
    
    array(['3 years', '6 years', '7 years', 'more than 7', '5 years', 'new',
           '4 years', '2 years'], dtype=object)

In [14]:

    
    
    df['VehiclePrice'].unique()
    

Out[14]:

    
    
    array(['more than 69,000', '20,000 to 29,000', '30,000 to 39,000',
           'less than 20,000', '40,000 to 59,000', '60,000 to 69,000'],
          dtype=object)

In [15]:

    
    
    df['NumberOfCars'].unique()
    

Out[15]:

    
    
    array(['3 to 4', '1 vehicle', '2 vehicles', '5 to 8', 'more than 8'],
          dtype=object)

In [16]:

    
    
    import seaborn as sns
    

In [17]:

    
    
    sns.pairplot(df, diag_kind='kde')
    

Out[17]:

    
    
    <seaborn.axisgrid.PairGrid at 0x7ff9416aced0>

![](__results___files/__results___16_1.png)

In [18]:

    
    
    sns.barplot(df['Fault'],df['Age'] , hue = df['Sex'])
    
    
    
    /opt/conda/lib/python3.7/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
      FutureWarning
    

Out[18]:

    
    
    <AxesSubplot:xlabel='Fault', ylabel='Age'>

![](__results___files/__results___17_2.png)

In [19]:

    
    
    sns.catplot(x= 'Fault', y = 'PolicyType', data = df)
    

Out[19]:

    
    
    <seaborn.axisgrid.FacetGrid at 0x7ff93ef90250>

![](__results___files/__results___18_1.png)

In [20]:

    
    
    plt.figure(figsize=(20,5))
    sns.barplot(df['Deductible'],df['PolicyType'])
    
    
    
    /opt/conda/lib/python3.7/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
      FutureWarning
    

Out[20]:

    
    
    <AxesSubplot:xlabel='Deductible', ylabel='PolicyType'>

![](__results___files/__results___19_2.png)

In [21]:

    
    
    plt.figure(figsize=(5,5))
    sns.boxplot(df['VehicleCategory'],df['DriverRating'])
    
    
    
    /opt/conda/lib/python3.7/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
      FutureWarning
    

Out[21]:

    
    
    <AxesSubplot:xlabel='VehicleCategory', ylabel='DriverRating'>

![](__results___files/__results___20_2.png)

In [22]:

    
    
    sns.stripplot(x= 'VehicleCategory',y = 'VehiclePrice', data = df)
    

Out[22]:

    
    
    <AxesSubplot:xlabel='VehicleCategory', ylabel='VehiclePrice'>

![](__results___files/__results___21_1.png)

In [23]:

    
    
    plt.figure(figsize=(20,10))
    sns.stripplot(x= 'PoliceReportFiled',y = 'PolicyType', data = df)
    

Out[23]:

    
    
    <AxesSubplot:xlabel='PoliceReportFiled', ylabel='PolicyType'>

![](__results___files/__results___22_1.png)

In [24]:

    
    
    plt.figure(figsize=(20,10))
    sns.stripplot(df['PolicyType'],df['AgeOfPolicyHolder'])
    
    
    
    /opt/conda/lib/python3.7/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
      FutureWarning
    

Out[24]:

    
    
    <AxesSubplot:xlabel='PolicyType', ylabel='AgeOfPolicyHolder'>

![](__results___files/__results___23_2.png)

In [25]:

    
    
    df['PastNumberOfClaims'] = df['PastNumberOfClaims'].map({'none':1,'1':1,'2 to 4':4 , 'more than 4':5})
    

In [26]:

    
    
    df['AgeOfVehicle'] = df['AgeOfVehicle'].map({'3 years':3,'6 years':6,'7 years':7,'more than 7':8,'5 years':5,'new': 0, '4 years':4, '2 years':2})
    

In [27]:

    
    
    df['AgeOfPolicyHolder'] = df['AgeOfPolicyHolder'].map({'26 to 30':2,'31 to 35':3,'41 to 50':4,
                                                           '51 to 65':6,'21 to 25':1,'36 to 40':5,'16 to 17':0,'over 65':7,'18 to 20':0})
    

In [28]:

    
    
    df['NumberOfCars'].unique() 
    

Out[28]:

    
    
    array(['3 to 4', '1 vehicle', '2 vehicles', '5 to 8', 'more than 8'],
          dtype=object)

In [29]:

    
    
    df['FraudFound'] = df['FraudFound'].map({'yes':1,'No':0})
    

In [30]:

    
    
    df.drop(['Month'] , axis = 1, inplace = True)
    

In [31]:

    
    
    df.drop(['AccidentArea'],axis = 1, inplace = True)
    

In [32]:

    
    
    df.drop(['VehicleCategory'],axis = 1, inplace= True)
    

In [33]:

    
    
    df1 = pd.get_dummies(df, columns = ['Sex','PoliceReportFiled','Fault','PolicyType','WitnessPresent','AgentType','BasePolicy'],drop_first=True)
    

In [34]:

    
    
    df1.info()
    
    
    
    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 15420 entries, 0 to 15419
    Data columns (total 27 columns):
     #   Column                           Non-Null Count  Dtype  
    ---  ------                           --------------  -----  
     0   Age                              15420 non-null  int64  
     1   VehiclePrice                     15420 non-null  object 
     2   RepNumber                        15420 non-null  int64  
     3   Deductible                       15420 non-null  int64  
     4   DriverRating                     15420 non-null  int64  
     5   Days:Policy-Claim                15420 non-null  object 
     6   PastNumberOfClaims               15420 non-null  int64  
     7   AgeOfVehicle                     15420 non-null  int64  
     8   AgeOfPolicyHolder                15420 non-null  int64  
     9   NumberOfSuppliments              15420 non-null  object 
     10  NumberOfCars                     15420 non-null  object 
     11  FraudFound                       14497 non-null  float64
     12  Sex_Male                         15420 non-null  uint8  
     13  PoliceReportFiled_Yes            15420 non-null  uint8  
     14  Fault_Third Party                15420 non-null  uint8  
     15  PolicyType_Sedan - Collision     15420 non-null  uint8  
     16  PolicyType_Sedan - Liability     15420 non-null  uint8  
     17  PolicyType_Sport - All Perils    15420 non-null  uint8  
     18  PolicyType_Sport - Collision     15420 non-null  uint8  
     19  PolicyType_Sport - Liability     15420 non-null  uint8  
     20  PolicyType_Utility - All Perils  15420 non-null  uint8  
     21  PolicyType_Utility - Collision   15420 non-null  uint8  
     22  PolicyType_Utility - Liability   15420 non-null  uint8  
     23  WitnessPresent_Yes               15420 non-null  uint8  
     24  AgentType_Internal               15420 non-null  uint8  
     25  BasePolicy_Collision             15420 non-null  uint8  
     26  BasePolicy_Liability             15420 non-null  uint8  
    dtypes: float64(1), int64(7), object(4), uint8(15)
    memory usage: 1.6+ MB
    

In [35]:

    
    
    df1.corr()
    

Out[35]:

| Age | RepNumber | Deductible | DriverRating | PastNumberOfClaims | AgeOfVehicle | AgeOfPolicyHolder | FraudFound | Sex_Male | PoliceReportFiled_Yes | ... | PolicyType_Sport - All Perils | PolicyType_Sport - Collision | PolicyType_Sport - Liability | PolicyType_Utility - All Perils | PolicyType_Utility - Collision | PolicyType_Utility - Liability | WitnessPresent_Yes | AgentType_Internal | BasePolicy_Collision | BasePolicy_Liability  
---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---  
Age | 1.000000 | -0.007063 | 0.069420 | 0.001668 | -0.028042 | 0.682472 | 0.854955 | NaN | 0.073113 | -0.008346 | ... | -0.017679 | -0.045496 | -0.011255 | 0.055779 | 0.031015 | 0.004566 | -0.007280 | -0.000319 | -0.072228 | -0.016014  
RepNumber | -0.007063 | 1.000000 | 0.000509 | 0.011031 | -0.001286 | -0.005869 | -0.001525 | NaN | -0.000833 | 0.006107 | ... | 0.016199 | -0.004004 | 0.006157 | 0.004579 | 0.010079 | 0.000708 | 0.007521 | 0.005630 | -0.011935 | 0.003231  
Deductible | 0.069420 | 0.000509 | 1.000000 | 0.003886 | 0.003980 | 0.091614 | 0.078519 | NaN | 0.014784 | 0.009005 | ... | 0.005102 | -0.013721 | -0.019736 | 0.011863 | 0.002306 | -0.006474 | 0.000586 | -0.004244 | -0.016765 | 0.018619  
DriverRating | 0.001668 | 0.011031 | 0.003886 | 1.000000 | -0.001737 | -0.002418 | 0.003380 | NaN | -0.002788 | 0.015947 | ... | -0.005728 | 0.000485 | -0.010704 | 0.009526 | 0.007054 | -0.009809 | 0.010489 | -0.000262 | -0.007651 | -0.000548  
PastNumberOfClaims | -0.028042 | -0.001286 | 0.003980 | -0.001737 | 1.000000 | -0.003478 | -0.015889 | NaN | -0.001799 | -0.001636 | ... | 0.005222 | -0.097395 | -0.007695 | 0.020696 | 0.018896 | 0.008083 | -0.015209 | 0.000052 | -0.127752 | 0.349034  
AgeOfVehicle | 0.682472 | -0.005869 | 0.091614 | -0.002418 | -0.003478 | 1.000000 | 0.661278 | NaN | 0.102660 | -0.001556 | ... | -0.054700 | -0.062647 | -0.019213 | 0.047734 | 0.019168 | 0.007950 | -0.008419 | 0.020840 | -0.021768 | -0.010160  
AgeOfPolicyHolder | 0.854955 | -0.001525 | 0.078519 | 0.003380 | -0.015889 | 0.661278 | 1.000000 | NaN | 0.057942 | -0.011701 | ... | -0.022487 | -0.067705 | -0.011784 | 0.054489 | 0.027313 | 0.010570 | -0.002707 | 0.003866 | -0.069375 | 0.002531  
FraudFound | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN  
Sex_Male | 0.073113 | -0.000833 | 0.014784 | -0.002788 | -0.001799 | 0.102660 | 0.057942 | NaN | 1.000000 | -0.007413 | ... | 0.011585 | 0.018744 | -0.018665 | 0.063571 | 0.019049 | 0.015933 | -0.005585 | 0.012681 | 0.006469 | -0.061632  
PoliceReportFiled_Yes | -0.008346 | 0.006107 | 0.009005 | 0.015947 | -0.001636 | -0.001556 | -0.011701 | NaN | -0.007413 | 1.000000 | ... | 0.014531 | 0.000906 | -0.001361 | -0.006552 | 0.001499 | -0.006240 | 0.198096 | 0.023268 | 0.034467 | -0.041331  
Fault_Third Party | 0.009310 | -0.006240 | -0.002259 | -0.010277 | -0.121009 | 0.027789 | -0.000550 | NaN | 0.000230 | 0.027246 | ... | -0.003777 | 0.082882 | -0.004919 | -0.058957 | -0.023660 | -0.014651 | 0.061036 | 0.005306 | 0.057170 | -0.197380  
PolicyType_Sedan - Collision | -0.061969 | -0.011780 | -0.012958 | -0.008549 | -0.101078 | -0.004454 | -0.051875 | NaN | -0.000984 | 0.034506 | ... | -0.028480 | -0.114490 | -0.006068 | -0.113136 | -0.033266 | -0.027824 | 0.009899 | 0.027988 | 0.949002 | -0.522628  
PolicyType_Sedan - Liability | -0.016198 | 0.003072 | 0.019490 | 0.000409 | 0.348929 | -0.010468 | 0.001904 | NaN | -0.062638 | -0.040863 | ... | -0.026133 | -0.105056 | -0.005568 | -0.103814 | -0.030525 | -0.025532 | -0.039122 | 0.051479 | -0.548923 | 0.996749  
PolicyType_Sport - All Perils | -0.017679 | 0.016199 | 0.005102 | -0.005728 | 0.005222 | -0.054700 | -0.022487 | NaN | 0.011585 | 0.014531 | ... | 1.000000 | -0.005744 | -0.000304 | -0.005676 | -0.001669 | -0.001396 | -0.002847 | -0.004763 | -0.030011 | -0.026219  
PolicyType_Sport - Collision | -0.045496 | -0.004004 | -0.013721 | 0.000485 | -0.097395 | -0.062647 | -0.067705 | NaN | 0.018744 | 0.000906 | ... | -0.005744 | 1.000000 | -0.001224 | -0.022816 | -0.006709 | -0.005611 | 0.035191 | -0.019147 | 0.191385 | -0.105398  
PolicyType_Sport - Liability | -0.011255 | 0.006157 | -0.019736 | -0.010704 | -0.007695 | -0.019213 | -0.011784 | NaN | -0.018665 | -0.001361 | ... | -0.000304 | -0.001224 | 1.000000 | -0.001209 | -0.000356 | -0.000297 | -0.000607 | -0.001015 | -0.006394 | 0.011610  
PolicyType_Utility - All Perils | 0.055779 | 0.004579 | 0.011863 | 0.009526 | 0.020696 | 0.047734 | 0.054489 | NaN | 0.063571 | -0.006552 | ... | -0.005676 | -0.022816 | -0.001209 | 1.000000 | -0.006629 | -0.005545 | 0.006378 | -0.018920 | -0.119216 | -0.104152  
PolicyType_Utility - Collision | 0.031015 | 0.010079 | 0.002306 | 0.007054 | 0.018896 | 0.019168 | 0.027313 | NaN | 0.019049 | 0.001499 | ... | -0.001669 | -0.006709 | -0.000356 | -0.006629 | 1.000000 | -0.001630 | -0.003326 | -0.005563 | 0.055609 | -0.030625  
PolicyType_Utility - Liability | 0.004566 | 0.000708 | -0.006474 | -0.009809 | 0.008083 | 0.007950 | 0.010570 | NaN | 0.015933 | -0.006240 | ... | -0.001396 | -0.005611 | -0.000297 | -0.005545 | -0.001630 | 1.000000 | -0.002782 | 0.052057 | -0.029320 | 0.053240  
WitnessPresent_Yes | -0.007280 | 0.007521 | 0.000586 | 0.010489 | -0.015209 | -0.008419 | -0.002707 | NaN | -0.005585 | 0.198096 | ... | -0.002847 | 0.035191 | -0.000607 | 0.006378 | -0.003326 | -0.002782 | 1.000000 | 0.011450 | 0.020201 | -0.039307  
AgentType_Internal | -0.000319 | 0.005630 | -0.004244 | -0.000262 | 0.000052 | 0.020840 | 0.003866 | NaN | 0.012681 | 0.023268 | ... | -0.004763 | -0.019147 | -0.001015 | -0.018920 | -0.005563 | 0.052057 | 0.011450 | 1.000000 | 0.021279 | 0.055502  
BasePolicy_Collision | -0.072228 | -0.011935 | -0.016765 | -0.007651 | -0.127752 | -0.021768 | -0.069375 | NaN | 0.006469 | 0.034467 | ... | -0.030011 | 0.191385 | -0.006394 | -0.119216 | 0.055609 | -0.029320 | 0.020201 | 0.021279 | 1.000000 | -0.550713  
BasePolicy_Liability | -0.016014 | 0.003231 | 0.018619 | -0.000548 | 0.349034 | -0.010160 | 0.002531 | NaN | -0.061632 | -0.041331 | ... | -0.026219 | -0.105398 | 0.011610 | -0.104152 | -0.030625 | 0.053240 | -0.039307 | 0.055502 | -0.550713 | 1.000000  
  
23 rows Ã 23 columns

In [36]:

    
    
    df1['Days:Policy-Claim'].unique()
    

Out[36]:

    
    
    array(['more than 30', '15 to 30', '8 to 15', 'none'], dtype=object)

In [37]:

    
    
    df1['Days:Policy-Claim'] = df['Days:Policy-Claim'].map({'more than 30':35,'15 to 30':25,'8 to 15':12,'none':0})
    

In [38]:

    
    
    df1.drop(['NumberOfSuppliments'],axis = 1, inplace=True)
    

In [39]:

    
    
    df1.drop(['VehiclePrice'],axis = 1, inplace=True)
    

In [40]:

    
    
    df1.drop(['NumberOfCars'],axis = 1, inplace=True)
    

In [41]:

    
    
    df1['FraudFound']=df1['FraudFound'].fillna(value = 1)
    

In [42]:

    
    
    from sklearn.model_selection import train_test_split
    

In [43]:

    
    
    train = df1.drop('FraudFound',  axis = 1)
    test = df1['FraudFound']
    

In [44]:

    
    
    x_train, x_test, y_train, y_test = train_test_split(train, test, test_size = 0.19, random_state = 20)
    

In [45]:

    
    
    from sklearn.linear_model import LogisticRegression
    

In [46]:

    
    
    logreg = LogisticRegression()
    

In [47]:

    
    
    logreg.fit(x_train, y_train)
    
    
    
    /opt/conda/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):
    STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.
    
    Increase the number of iterations (max_iter) or scale the data as shown in:
        https://scikit-learn.org/stable/modules/preprocessing.html
    Please also refer to the documentation for alternative solver options:
        https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
      extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,
    

Out[47]:

    
    
    LogisticRegression()

In [48]:

    
    
    prediction = logreg.predict(x_test)
    

In [49]:

    
    
    from sklearn.metrics import accuracy_score
    

In [50]:

    
    
    accuracy_score(y_test, prediction)
    

Out[50]:

    
    
    0.9378839590443686

In [ ]:

    
    
     
    

