#

Medical Insurance Cost Predictor

¶

![](https://i.ibb.co/FYBkxBT/Screenshot-2021-10-28-194050.jpg)
![](https://i.ibb.co/dbRXRT0/Screenshot-2021-10-28-194215.jpg)

ðThis notebook is beginner friendly and contains an end to end deployed
project.  
ðCreating a notebook is one thing and deploying the notebook to make it
useful in real life is another.

ð <https://medical-ins-cost-predict.herokuapp.com/>

ð <https://github.com/raj-gupta1/medical-insurance-cost-predictor>

ð **Algorithms used:**  
1.Linear Regression  

    
    
    2. Ridge<br>
    3. Lasso<br>
    4. Polynomial Regression<br>
    5. Random Forest regressor
    
    
    

ð**Tools used:-**

  * Flask
  * Google Colab
  * Pycharm
  * Heroku
  * Github

ð**Libraries used:-**

  * Numpy
  * pandas
  * Matplotlib
  * flask
  * scikit-learn

In [1]:

    
    
    # Importing Libraries:
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    

In [2]:

    
    
    # Loading Train dataset:
    train_data = pd.read_csv('../input/medical-insurance-dataset/Train_Data.csv')
    # Top 5 records:
    train_data.head()
    

Out[2]:

| age | sex | bmi | smoker | region | children | charges  
---|---|---|---|---|---|---|---  
0 | 21.000000 | male | 25.745000 | no | northeast | 2 | 3279.868550  
1 | 36.976978 | female | 25.744165 | yes | southeast | 3 | 21454.494239  
2 | 18.000000 | male | 30.030000 | no | southeast | 1 | 1720.353700  
3 | 37.000000 | male | 30.676891 | no | northeast | 3 | 6801.437542  
4 | 58.000000 | male | 32.010000 | no | southeast | 1 | 11946.625900  
  
In [3]:

    
    
    # Shape of dataset:
    train_data.shape
    

Out[3]:

    
    
    (3630, 7)

In [4]:

    
    
    # Cheacking for NaN Values (Missing Values):
    train_data.isnull().sum()
    

Out[4]:

    
    
    age         0
    sex         0
    bmi         0
    smoker      0
    region      0
    children    0
    charges     0
    dtype: int64

In [5]:

    
    
    # Insights of dataset:
    train_data.info()
    
    
    
    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 3630 entries, 0 to 3629
    Data columns (total 7 columns):
     #   Column    Non-Null Count  Dtype  
    ---  ------    --------------  -----  
     0   age       3630 non-null   float64
     1   sex       3630 non-null   object 
     2   bmi       3630 non-null   float64
     3   smoker    3630 non-null   object 
     4   region    3630 non-null   object 
     5   children  3630 non-null   int64  
     6   charges   3630 non-null   float64
    dtypes: float64(3), int64(1), object(3)
    memory usage: 198.6+ KB
    

In [6]:

    
    
    # Description of dataset (Numerical):
    train_data.describe()
    

Out[6]:

| age | bmi | children | charges  
---|---|---|---|---  
count | 3630.000000 | 3630.000000 | 3630.000000 | 3630.000000  
mean | 38.887036 | 30.629652 | 2.503581 | 12784.808644  
std | 12.151029 | 5.441307 | 1.712568 | 10746.166743  
min | 18.000000 | 15.960000 | 0.000000 | 1121.873900  
25% | 29.000000 | 26.694526 | 1.000000 | 5654.818262  
50% | 39.170922 | 30.200000 | 3.000000 | 9443.807222  
75% | 48.343281 | 34.100000 | 4.000000 | 14680.407505  
max | 64.000000 | 53.130000 | 5.000000 | 63770.428010  
  
In [7]:

    
    
    # Description of dataset (Categorical):
    train_data.describe(include=['O'])
    

Out[7]:

| sex | smoker | region  
---|---|---|---  
count | 3630 | 3630 | 3630  
unique | 2 | 2 | 4  
top | male | no | southeast  
freq | 2029 | 3070 | 1021  
  
#### Medical Insurance Charges:¶

In [8]:

    
    
    # Histrogram of Medical Insurance Charges:
    plt.figure(figsize=(8,5))
    sns.histplot(train_data['charges'], kde=True)
    plt.title('Medical Insurance Charges', fontsize=20)
    plt.show()
    

![](__results___files/__results___11_0.png)

In [9]:

    
    
    # Boxplot of Medical Insurance Charges:
    plt.figure(figsize=(8,5))
    sns.boxplot(train_data['charges'])
    plt.title('Medical Insurance Charges (Boxplot)', fontsize=20)
    plt.show()
    
    
    
    /opt/conda/lib/python3.7/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
      FutureWarning
    

![](__results___files/__results___12_1.png)

#### Age:¶

In [10]:

    
    
    # Histrogram of Age:
    plt.figure(figsize=(8,5))
    sns.histplot(train_data['age'], kde=True)
    plt.title('Age', fontsize=20)
    plt.show()
    

![](__results___files/__results___14_0.png)

In [11]:

    
    
    # Boxplot of Age:
    plt.figure(figsize=(8,5))
    sns.boxplot(train_data['age'])
    plt.title('Age (boxplot)', fontsize=20)
    plt.show()
    
    
    
    /opt/conda/lib/python3.7/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
      FutureWarning
    

![](__results___files/__results___15_1.png)

#### Body Mass Index:¶

In [12]:

    
    
    # Histrogram of Body Mass Index:
    plt.figure(figsize=(8,5))
    sns.histplot(train_data['bmi'], kde=True)
    plt.title('Body Mass Index', fontsize=20)
    plt.show()
    

![](__results___files/__results___17_0.png)

In [13]:

    
    
    # Boxplot of Body Mass Index:
    plt.figure(figsize=(8,5))
    sns.boxplot(train_data['bmi'])
    plt.title('Body Mass Index (Boxplot)', fontsize=20)
    plt.show()
    
    
    
    /opt/conda/lib/python3.7/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
      FutureWarning
    

![](__results___files/__results___18_1.png)

#### children:¶

In [14]:

    
    
    # Histrogram of children:
    plt.figure(figsize=(8,5))
    sns.histplot(train_data['children'], kde=True)
    plt.title('childrens', fontsize=20)
    plt.show()
    

![](__results___files/__results___20_0.png)

In [15]:

    
    
    # Boxplot of children:
    plt.figure(figsize=(8,4))
    sns.boxplot(train_data['children'])
    plt.title('childrens (Boxplot)', fontsize=20)
    plt.show()
    
    
    
    /opt/conda/lib/python3.7/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
      FutureWarning
    

![](__results___files/__results___21_1.png)

#### Sex:¶

In [16]:

    
    
    # Value Counts:
    print("Male   :", train_data['sex'].value_counts()[0])
    print("Female :", train_data['sex'].value_counts()[1])
    
    # Visualization:
    plt.figure(figsize=(6,4))
    sns.countplot(train_data['sex'])
    plt.title('Sex', fontsize=20)
    plt.show()
    
    
    
    Male   : 2029
    Female : 1601
    
    
    
    /opt/conda/lib/python3.7/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
      FutureWarning
    

![](__results___files/__results___23_2.png)

#### Smokers:¶

In [17]:

    
    
    # Value Counts:
    print("Smokers     :", train_data['smoker'].value_counts()[1])
    print("Non-Smokers :", train_data['smoker'].value_counts()[0])
    
    # Visualization:
    sns.countplot(train_data['smoker'])
    sns.countplot(train_data['smoker'])
    plt.title('Smokers', fontsize=20)
    plt.show()
    
    
    
    Smokers     : 560
    Non-Smokers : 3070
    
    
    
    /opt/conda/lib/python3.7/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
      FutureWarning
    /opt/conda/lib/python3.7/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
      FutureWarning
    

![](__results___files/__results___25_2.png)

#### Region:¶

In [18]:

    
    
    # Value Counts:
    print("South-East region :", train_data['region'].value_counts()[0])
    print("North-West region :", train_data['region'].value_counts()[1])
    print("South-West region :", train_data['region'].value_counts()[2])
    print("North-East region :", train_data['region'].value_counts()[3])
    
    # Visualization:
    sns.countplot(train_data['region'])
    sns.countplot(train_data['region'])
    plt.title('Regions', fontsize=20)
    plt.show()
    
    
    
    South-East region : 1021
    North-West region : 911
    South-West region : 850
    North-East region : 848
    
    
    
    /opt/conda/lib/python3.7/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
      FutureWarning
    /opt/conda/lib/python3.7/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
      FutureWarning
    

![](__results___files/__results___27_2.png)

In [19]:

    
    
    # top 5 records:
    train_data.head()
    

Out[19]:

| age | sex | bmi | smoker | region | children | charges  
---|---|---|---|---|---|---|---  
0 | 21.000000 | male | 25.745000 | no | northeast | 2 | 3279.868550  
1 | 36.976978 | female | 25.744165 | yes | southeast | 3 | 21454.494239  
2 | 18.000000 | male | 30.030000 | no | southeast | 1 | 1720.353700  
3 | 37.000000 | male | 30.676891 | no | northeast | 3 | 6801.437542  
4 | 58.000000 | male | 32.010000 | no | southeast | 1 | 11946.625900  
  
In [20]:

    
    
    # Rounding up & down Age:
    train_data['age'] = round(train_data['age'])
    

In [21]:

    
    
    # top 5 records, after rounding up & down Age:
    train_data.head()
    

Out[21]:

| age | sex | bmi | smoker | region | children | charges  
---|---|---|---|---|---|---|---  
0 | 21.0 | male | 25.745000 | no | northeast | 2 | 3279.868550  
1 | 37.0 | female | 25.744165 | yes | southeast | 3 | 21454.494239  
2 | 18.0 | male | 30.030000 | no | southeast | 1 | 1720.353700  
3 | 37.0 | male | 30.676891 | no | northeast | 3 | 6801.437542  
4 | 58.0 | male | 32.010000 | no | southeast | 1 | 11946.625900  
  
In [22]:

    
    
    # Encoding:
    train_data = pd.get_dummies(train_data, drop_first=True)
    

In [23]:

    
    
    # top 2 records, after encoding:
    train_data.head(2)
    

Out[23]:

| age | bmi | children | charges | sex_male | smoker_yes | region_northwest | region_southeast | region_southwest  
---|---|---|---|---|---|---|---|---|---  
0 | 21.0 | 25.745000 | 2 | 3279.868550 | 1 | 0 | 0 | 0 | 0  
1 | 37.0 | 25.744165 | 3 | 21454.494239 | 0 | 1 | 0 | 1 | 0  
  
In [24]:

    
    
    # Columns of dataset:
    train_data.columns
    

Out[24]:

    
    
    Index(['age', 'bmi', 'children', 'charges', 'sex_male', 'smoker_yes',
           'region_northwest', 'region_southeast', 'region_southwest'],
          dtype='object')

In [25]:

    
    
    # Rearranging columns to see better: 
    train_data = train_data[['age','sex_male','smoker_yes','bmi','children','region_northwest','region_southeast','region_southwest','charges']]
    train_data.head(2)
    

Out[25]:

| age | sex_male | smoker_yes | bmi | children | region_northwest | region_southeast | region_southwest | charges  
---|---|---|---|---|---|---|---|---|---  
0 | 21.0 | 1 | 0 | 25.745000 | 2 | 0 | 0 | 0 | 3279.868550  
1 | 37.0 | 0 | 1 | 25.744165 | 3 | 0 | 1 | 0 | 21454.494239  
  
In [26]:

    
    
    # Splitting Independent & Dependent Feature:
    X = train_data.iloc[:, :-1]
    y = train_data.iloc[:, -1]
    

In [27]:

    
    
    # top 2 records of Independent feature:
    X.head(2)
    

Out[27]:

| age | sex_male | smoker_yes | bmi | children | region_northwest | region_southeast | region_southwest  
---|---|---|---|---|---|---|---|---  
0 | 21.0 | 1 | 0 | 25.745000 | 2 | 0 | 0 | 0  
1 | 37.0 | 0 | 1 | 25.744165 | 3 | 0 | 1 | 0  
  
In [28]:

    
    
    # top 2 records of Dependent Feature:
    y.head(2)
    

Out[28]:

    
    
    0     3279.868550
    1    21454.494239
    Name: charges, dtype: float64

In [29]:

    
    
    # Train Test Split:
    from sklearn.model_selection import train_test_split
    X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=0)
    

# Model Building:¶

In [30]:

    
    
    # Importing Performance Metrics:
    from sklearn.metrics import mean_squared_error, r2_score
    

In [31]:

    
    
    # Linear Regression:
    from sklearn.linear_model import LinearRegression
    LinearRegression = LinearRegression()
    LinearRegression = LinearRegression.fit(X_train, y_train)
    
    # Prediction:
    y_pred = LinearRegression.predict(X_test)
    
    # Scores:
    print(r2_score(y_test, y_pred))
    print(mean_squared_error(y_test, y_pred))
    
    
    
    0.7482602892322037
    30898859.03596079
    

In [32]:

    
    
    # Ridge:
    from sklearn.linear_model import Ridge
    Ridge = Ridge()
    Ridge = Ridge.fit(X_train, y_train)
    
    # Prediction:
    y_pred = Ridge.predict(X_test)
    
    # Scores:
    print(r2_score(y_test, y_pred))
    print(mean_squared_error(y_test, y_pred))
    
    
    
    0.748102888431925
    30918178.614604652
    

In [33]:

    
    
    # Lasso:
    from sklearn.linear_model import Lasso
    Lasso = Lasso()
    Lasso = Lasso.fit(X_train, y_train)
    
    # Prediction:
    y_pred = Lasso.predict(X_test)
    
    # Scores:
    print(r2_score(y_test, y_pred))
    print(mean_squared_error(y_test, y_pred))
    
    
    
    0.7482269824960902
    30902947.14800708
    

In [34]:

    
    
    # Random Forest Regressor:
    from sklearn.ensemble import RandomForestRegressor
    RandomForestRegressor = RandomForestRegressor()
    RandomForestRegressor = RandomForestRegressor.fit(X_train, y_train)
    
    # Prediction:
    y_pred = RandomForestRegressor.predict(X_test)
    
    # Scores:
    print(r2_score(y_test, y_pred))
    print(mean_squared_error(y_test, y_pred))
    
    
    
    0.9090588752279771
    11162231.76046455
    

In [35]:

    
    
    # Creating a pickle file for the classifier
    import pickle
    filename = 'MedicalInsuranceCost.pkl'
    pickle.dump(RandomForestRegressor, open(filename, 'wb'))
    

In [ ]:

    
    
     
    

In [ ]:

    
    
     
    

In [ ]:

    
    
     
    

